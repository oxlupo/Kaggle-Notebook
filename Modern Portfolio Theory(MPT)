{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "054661ce",
   "metadata": {
    "papermill": {
     "duration": 0.025653,
     "end_time": "2024-05-31T16:06:07.432369",
     "exception": false,
     "start_time": "2024-05-31T16:06:07.406716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MPT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3933c783",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:07.486726Z",
     "iopub.status.busy": "2024-05-31T16:06:07.486049Z",
     "iopub.status.idle": "2024-05-31T16:06:50.493948Z",
     "shell.execute_reply": "2024-05-31T16:06:50.492424Z"
    },
    "papermill": {
     "duration": 43.038736,
     "end_time": "2024-05-31T16:06:50.497089",
     "exception": false,
     "start_time": "2024-05-31T16:06:07.458353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance\r\n",
      "  Downloading yfinance-0.2.40-py2.py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: pandas>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.2.2)\r\n",
      "Requirement already satisfied: numpy>=1.16.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.26.4)\r\n",
      "Requirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.31.0)\r\n",
      "Collecting multitasking>=0.0.7 (from yfinance)\r\n",
      "  Downloading multitasking-0.0.11-py3-none-any.whl.metadata (5.5 kB)\r\n",
      "Requirement already satisfied: lxml>=4.9.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (5.2.1)\r\n",
      "Requirement already satisfied: platformdirs>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (4.2.0)\r\n",
      "Requirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2023.3.post1)\r\n",
      "Requirement already satisfied: frozendict>=2.3.4 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.4.2)\r\n",
      "Collecting peewee>=3.16.2 (from yfinance)\r\n",
      "  Downloading peewee-3.17.5.tar.gz (3.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m33.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \bdone\r\n",
      "\u001b[?25h  Getting requirements to build wheel ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (4.12.2)\r\n",
      "Requirement already satisfied: html5lib>=1.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.1)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\r\n",
      "Requirement already satisfied: six>=1.9 in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\r\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2023.4)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\r\n",
      "Downloading yfinance-0.2.40-py2.py3-none-any.whl (73 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.5/73.5 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading multitasking-0.0.11-py3-none-any.whl (8.5 kB)\r\n",
      "Building wheels for collected packages: peewee\r\n",
      "  Building wheel for peewee (pyproject.toml) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \bdone\r\n",
      "\u001b[?25h  Created wheel for peewee: filename=peewee-3.17.5-cp310-cp310-linux_x86_64.whl size=293378 sha256=7a508261c1b0920235cdb41bf7fa44c6a5d84bfe2082d8900ca8de3f0038568d\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/06/80/9b/98db0d58349a2f5c09f8406789ade4270762f97b7d26f2fa22\r\n",
      "Successfully built peewee\r\n",
      "Installing collected packages: peewee, multitasking, yfinance\r\n",
      "Successfully installed multitasking-0.0.11 peewee-3.17.5 yfinance-0.2.40\r\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e1b0ac54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:50.555831Z",
     "iopub.status.busy": "2024-05-31T16:06:50.555333Z",
     "iopub.status.idle": "2024-05-31T16:06:53.238191Z",
     "shell.execute_reply": "2024-05-31T16:06:53.236741Z"
    },
    "papermill": {
     "duration": 2.715947,
     "end_time": "2024-05-31T16:06:53.241051",
     "exception": false,
     "start_time": "2024-05-31T16:06:50.525104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats \n",
    "from pandas_datareader import data \n",
    "from datetime import datetime\n",
    "from scipy.optimize import minimize\n",
    "import yfinance as yf\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a2292a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:53.300306Z",
     "iopub.status.busy": "2024-05-31T16:06:53.299720Z",
     "iopub.status.idle": "2024-05-31T16:06:53.343092Z",
     "shell.execute_reply": "2024-05-31T16:06:53.342100Z"
    },
    "papermill": {
     "duration": 0.075868,
     "end_time": "2024-05-31T16:06:53.345726",
     "exception": false,
     "start_time": "2024-05-31T16:06:53.269858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b26672cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:53.404556Z",
     "iopub.status.busy": "2024-05-31T16:06:53.403935Z",
     "iopub.status.idle": "2024-05-31T16:06:55.385562Z",
     "shell.execute_reply": "2024-05-31T16:06:55.384167Z"
    },
    "papermill": {
     "duration": 2.013843,
     "end_time": "2024-05-31T16:06:55.388300",
     "exception": false,
     "start_time": "2024-05-31T16:06:53.374457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(1, '/kaggle/input/edhec-investment-management-datasets')\n",
    "import edhec_risk_kit as erk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee5027cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:55.447676Z",
     "iopub.status.busy": "2024-05-31T16:06:55.446712Z",
     "iopub.status.idle": "2024-05-31T16:06:55.486663Z",
     "shell.execute_reply": "2024-05-31T16:06:55.485461Z"
    },
    "papermill": {
     "duration": 0.072978,
     "end_time": "2024-05-31T16:06:55.489336",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.416358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# using seaborn style (type plt.style.available to see available styles)\n",
    "plt.style.use(\"seaborn-dark\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e0e5b56",
   "metadata": {
    "papermill": {
     "duration": 0.027307,
     "end_time": "2024-05-31T16:06:55.544641",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.517334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Modern portfolio theory (MPT)\n",
    "\n",
    "The **Modern portfolio theory (MPT)** is a mathematical framework **for assembling a portfolio of assets such that the expected return is maximized for a given level of volatility**. It is a formalization of **diversification in investing**, i.e., the idea that owning different kinds of financial assets is less risky than owning one signgle asset. \n",
    "\n",
    "### Efficient Frontiers \n",
    "\n",
    "In the MPT, the **efficient frontier** is a curve denoting the **efficient** part of the **volatility-return plane**. \n",
    "Formally, it is the set of portfolios that can be constructed with the given input assets \n",
    "that have the maximum expected returns for a fixed level of volatility and, in turn, \n",
    "the lowest volatilities for a fixed level of expected return. The efficient frontier was first formulated by **Harry Markowitz** (1952).\n",
    "\n",
    "We have to construct a portfolio of several assets and **we want to find the optimal percentages of investment to be allocated in these assets** so that, for example, the total (expected) return of such a portfolio is maximixed for a given level of volatility. \n",
    "\n",
    "Suppose **we have $N > 1$ stocks** and we decide to invest our capital in them. \n",
    "Let $\\mathbf{w}:=(w_1,\\dots,w_N)^T$, with $w_i\\in (0,1)$ for all $i=1,\\dots,N$, \n",
    "where each $w_i$ represents the proportion of the investiment \n",
    "(a percentage of the capital invested) in asset $i$. \n",
    "These quantities $w_i$ are the **weights**.\n",
    "\n",
    "Since we invest all of our capital, there holds $\\sum_{i=1}^N w_i = 1$ (this is a **long-only** strategy).\n",
    "\n",
    "Let $R_i$ and $R_p$ be the return of asset $i$ and the total return of the portfolio, respectively. \n",
    "Likewise, let $\\sigma_i$ and $\\sigma_p$ be the volatility of asset $i$ and the volatility of the portfolio, respectively. \n",
    "\n",
    "\n",
    "### Return of a portfolio\n",
    "The **total return of the porfolio** is going to be a simple weigthed average of the (total) returns of single assets, i.e.,\n",
    "$$\n",
    "R_p = \\sum_{i=1}^N w_i R_i = \\mathbf{w}^T \\mathbf{R},\n",
    "$$\n",
    "where $\\mathbf{R} := (R_1,\\dots,R_N)^T$. \n",
    "Note that if we have a dataset of **past returns**, the total return $R_p$ is computed as above using the returns of the past data. On the other hand, if we are going to invest now, we do not have a series of true (past) return, but we instead would have **expected returns**. Hence, in this case we would have the maean value $\\mathbb{E}$ in the formula above. \n",
    "\n",
    "\n",
    "### Volatility of a portfolio\n",
    "The **volatility of the porfolio** is computed as the (square root of the) variance of the weigthed sum of the returns of single assets. \n",
    "\n",
    "Let us consider an example with only two assets. \n",
    "We have $w_1$ and $w_2$ and two assets whose returns are $R_1$ and $R_2$. We have:\n",
    "$$\n",
    "\\sigma_p^2 =   \\text{Var}(w_1 R_1 + w_2 R_2) = \n",
    "w_1^2 \\text{Var}(R_1) + w_2^2\\text{Var}(R_2) + 2w_1 w_2\\text{Cov}(R_1,R_2) =\n",
    "w_1^2 \\sigma_1^2 + w_2^2\\sigma_2^2 + 2w_1 w_2\\text{Cov}(R_1,R_2), \n",
    "$$\n",
    "where \n",
    "$$\n",
    "\\text{Cov}(R_1,R_2) := \\mathbb{E}[(R_1-\\mu_1)(R_2 - \\mu_2)], \n",
    "$$\n",
    "is the **covariance** between the two assets and $\\mu_i$ and $\\mu_j$ denote \n",
    "their mean returns, respectively. In particular, if we let \n",
    "$$\n",
    "\\rho_{1,2} := \\frac{\\text{Cov}(R_1,R_2)}{\\sigma_1 \\sigma_2}, \n",
    "$$\n",
    "denote the **correlation coefficient** between the assets, \n",
    "then the volatility of a $2$ assets portfolio becomes:\n",
    "$$\n",
    "\\sigma_p = \n",
    "\\sqrt{ w_1^2 \\sigma_1^2 + w_2^2 \\sigma_2^2 + 2w_1 w_2 \\sigma_1 \\sigma_2 \\rho_{1,2} }. \n",
    "$$\n",
    "Note that, using matrix notation, we can write in compact form such a volatility. That is:\n",
    "$$\n",
    "\\sigma_p = \n",
    "\\sqrt{\n",
    "(w_1, w_2)\\, \n",
    "\\begin{pmatrix}\n",
    "\\sigma^2_1 & \\sigma_1 \\sigma_2 \\rho_{12} \\\\\n",
    "\\sigma_1 \\sigma_2 \\rho_{21} & \\sigma^2_2\n",
    "\\end{pmatrix}\n",
    "\\begin{pmatrix}\n",
    "w_1 \\\\\n",
    "w_2 \n",
    "\\end{pmatrix}\n",
    "}\n",
    "=\n",
    "\\sqrt{\n",
    "\\mathbf{w}^T \\Sigma \\mathbf{w}\n",
    "}\n",
    "\\quad\\text{and}\\quad\n",
    "\\Sigma := \n",
    "\\begin{pmatrix}\n",
    "\\sigma^2_1 & \\sigma_1 \\sigma_2 \\rho_{12} \\\\\n",
    "\\sigma_1 \\sigma_2 \\rho_{21} & \\sigma^2_2\n",
    "\\end{pmatrix},\n",
    "$$\n",
    "where $\\Sigma$ is the symmetric square **covariance matrix**.\n",
    "\n",
    "\n",
    "Now, in case of $N$ stocks, let again $\\Sigma = [c_{ij}]$ \n",
    "be the $N\\times N$ covariance matrix \n",
    "where each element $c_{ij} := \\sigma_i \\sigma_j \\rho_{ij}$, for $i,j=1,\\dots,N$, \n",
    "denotes the **covariance** between assets $i$ \n",
    "and asset $j$, \n",
    "and with $\\sigma_i$, $\\sigma_j$, and $\\rho_{ij}$ being the volatilities \n",
    "and the correlation coefficients of assets $i$ and $j$, respectively.\n",
    "Of course, when $i=j$, $c_{ii}=\\sigma_i^2$ is simply the variance of asset $i$ \n",
    "(these are the diagonal entries of the covariance matrix).\n",
    "\n",
    "The volatility of the portfolio is then given by:\n",
    "$$\n",
    "\\sigma_p = \\sqrt{ \\mathbf{w}^T \\Sigma \\mathbf{w} }.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e1324b",
   "metadata": {
    "papermill": {
     "duration": 0.027368,
     "end_time": "2024-05-31T16:06:55.599235",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.571867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Efficient frontiers of 2-assets portfolios \n",
    "In the following, we propose an artificial example in order to see the curve that is drawn by different portfolios which \n",
    "are constructed with only $2$ assets with different correlation $\\rho_{12}$. \n",
    "First of all, we assume to generate $500$ **daily returns** of $2$ assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9084f16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:55.656601Z",
     "iopub.status.busy": "2024-05-31T16:06:55.656135Z",
     "iopub.status.idle": "2024-05-31T16:06:55.696070Z",
     "shell.execute_reply": "2024-05-31T16:06:55.694945Z"
    },
    "papermill": {
     "duration": 0.07203,
     "end_time": "2024-05-31T16:06:55.698822",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.626792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nret             = 500\n",
    "periods_per_year = 252\n",
    "risk_free_rate   = 0.0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a0250a8",
   "metadata": {
    "papermill": {
     "duration": 0.02724,
     "end_time": "2024-05-31T16:06:55.754106",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.726866",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Then, we set up a value for the means and the volatility of our two artifical assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "569b93f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:55.870007Z",
     "iopub.status.busy": "2024-05-31T16:06:55.868967Z",
     "iopub.status.idle": "2024-05-31T16:06:55.909210Z",
     "shell.execute_reply": "2024-05-31T16:06:55.907918Z"
    },
    "papermill": {
     "duration": 0.071967,
     "end_time": "2024-05-31T16:06:55.912005",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.840038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mean_1 = 0.001019\n",
    "mean_2 = 0.001249\n",
    "vol_1  = 0.016317\n",
    "vol_2  = 0.019129"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cb6cd1e",
   "metadata": {
    "papermill": {
     "duration": 0.027222,
     "end_time": "2024-05-31T16:06:55.967153",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.939931",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "and we set up $6$ correlations of the two assets, and for every fixed correlation, \n",
    "we will generate $20$ portfolios by allocating $20$ pairs of weights:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8e66a078",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:56.024600Z",
     "iopub.status.busy": "2024-05-31T16:06:56.024125Z",
     "iopub.status.idle": "2024-05-31T16:06:56.069977Z",
     "shell.execute_reply": "2024-05-31T16:06:56.068603Z"
    },
    "papermill": {
     "duration": 0.078041,
     "end_time": "2024-05-31T16:06:56.072750",
     "exception": false,
     "start_time": "2024-05-31T16:06:55.994709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Correlation goes from 1 (completely correlated) to -1 (conversely correlated)\n",
    "rhos  = np.linspace(1,-1,num=6) \n",
    "ncorr = len(rhos)\n",
    "\n",
    "# Pairs of weights to be used to construct the portfolios for any given correlation\n",
    "nweig = 20\n",
    "w1 = np.linspace(0,1,num=nweig)\n",
    "w2 = 1 - np.linspace(0,1,num=nweig)\n",
    "ww = pd.DataFrame( [w1, w2] ).T  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4a350949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:56.133588Z",
     "iopub.status.busy": "2024-05-31T16:06:56.133112Z",
     "iopub.status.idle": "2024-05-31T16:06:57.501885Z",
     "shell.execute_reply": "2024-05-31T16:06:57.500640Z"
    },
    "papermill": {
     "duration": 1.401323,
     "end_time": "2024-05-31T16:06:57.504955",
     "exception": false,
     "start_time": "2024-05-31T16:06:56.103632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x400 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set seed\n",
    "np.random.seed(1)\n",
    "\n",
    "# Assuming these variables are defined elsewhere in your script\n",
    "# rhos, vol_1, vol_2, mean_1, mean_2, nret, ww, annualize_rets, portfolio_return,\n",
    "# portfolio_volatility, annualize_vol, sharpe_ratio, risk_free_rate, periods_per_year, w2\n",
    "\n",
    "# Open the figure\n",
    "fig, ax = plt.subplots(1, 6, figsize=(20, 4))\n",
    "ax = ax.flatten()\n",
    "\n",
    "for k_rho, rho in enumerate(rhos):\n",
    "    # Allocate an empty portfolio\n",
    "    portfolio = pd.DataFrame(columns=[\"return\", \"volatility\", \"sharpe ratio\"])\n",
    "\n",
    "    # Generate the assets' returns with the given correlation rho\n",
    "    cov_ij = rho * vol_1 * vol_2\n",
    "    cov_rets = pd.DataFrame([[vol_1 ** 2, cov_ij], [cov_ij, vol_2 ** 2]])\n",
    "    daily_rets = pd.DataFrame(np.random.multivariate_normal((mean_1, mean_2), cov_rets.values, nret))\n",
    "\n",
    "    for i in range(ww.shape[0]):\n",
    "        # Now, construct the portfolio of two asset with correlation rho and weights ww.loc[i]\n",
    "        weights = ww.loc[i]\n",
    "        # here, weights is a column vector (pd.Series)\n",
    "        \n",
    "        # annualized portfolio returns\n",
    "        ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "        portfolio_ret = erk.portfolio_return(weights, ann_rets)\n",
    "        \n",
    "        # annualized portfolio volatility\n",
    "        portfolio_vol = erk.portfolio_volatility(weights, cov_rets)\n",
    "        portfolio_vol = erk.annualize_vol(portfolio_vol, periods_per_year)\n",
    "        \n",
    "        # annualized portfolio sharpe ratio\n",
    "        portfolio_spr = erk.sharpe_ratio(portfolio_ret, risk_free_rate, periods_per_year, v=portfolio_vol)\n",
    "        \n",
    "        # dataframe containing the return, volatility, and the sharpe ratio of the portfolio constructed\n",
    "        new_row = pd.DataFrame({\"return\": [portfolio_ret], \"volatility\": [portfolio_vol], \"sharpe ratio\": [portfolio_spr]})\n",
    "        portfolio = pd.concat([portfolio, new_row], ignore_index=True)\n",
    "\n",
    "    # plot create scatter plot coloured by Sharpe Ratio\n",
    "    im = ax[k_rho].scatter(portfolio[\"volatility\"] * 100, portfolio[\"return\"] * 100, c=w2, cmap='RdYlBu')\n",
    "    ax[k_rho].grid()\n",
    "    ax[k_rho].set_title(\"Correlation: {}\".format(np.round(rho, 2)), y=0.9, loc='left')\n",
    "    ax[k_rho].set_xlabel(\"volatility (%)\")\n",
    "    if k_rho == 0:\n",
    "        ax[k_rho].set_ylabel(\"return (%)\")\n",
    "    ax[k_rho].set_xlim([0, 32])\n",
    "    ax[k_rho].set_ylim([0, 95])\n",
    "\n",
    "fig.colorbar(im, ax=ax.ravel().tolist())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e0195e4",
   "metadata": {
    "papermill": {
     "duration": 0.028234,
     "end_time": "2024-05-31T16:06:57.562747",
     "exception": false,
     "start_time": "2024-05-31T16:06:57.534513",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For any given correlation, each point represents the pair (return, volatility) of a portfolio constructed with some percentage allocation. \n",
    "This can be seen in the colorbar: **red corresponds to $\\mathbf{w} = (1,0)$**, i.e., allocation of money only to the first asset, whereas \n",
    "**blue corresponds to $\\mathbf{w} = (0,1)$**, i.e., allocation of money only ot the second asset.  \n",
    "\n",
    "We can see that **the lower the correlation between the assets, the better the trade-off between return and volatility**: in this example, \n",
    "when $\\rho=-1$, we could in principle construct a portfolio which guarantees about $30\\%$ of return with almost no volatility."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d27ea292",
   "metadata": {
    "papermill": {
     "duration": 0.028216,
     "end_time": "2024-05-31T16:06:57.620238",
     "exception": false,
     "start_time": "2024-05-31T16:06:57.592022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Example from the real world: US stocks\n",
    "Now we will get the timeseries of some US economy stocks and see how to construct a portfolio in an efficient way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ef38062a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:57.679645Z",
     "iopub.status.busy": "2024-05-31T16:06:57.678923Z",
     "iopub.status.idle": "2024-05-31T16:06:58.757908Z",
     "shell.execute_reply": "2024-05-31T16:06:58.756877Z"
    },
    "papermill": {
     "duration": 1.111546,
     "end_time": "2024-05-31T16:06:58.760156",
     "exception": false,
     "start_time": "2024-05-31T16:06:57.648610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n",
      "[*********************100%%**********************]  1 of 1 completed\n",
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "tickers = ['AMZN','KO', 'MSFT']\n",
    "n_assets = len(tickers)\n",
    "\n",
    "stocks = pd.DataFrame()\n",
    "start_date = datetime(2011, 1, 1)\n",
    "end_date = datetime(2019, 1, 1)\n",
    "\n",
    "for stock_name in tickers:\n",
    "    # daily data\n",
    "    data = yf.download(stock_name, start=start_date, end=end_date)\n",
    "    stocks[stock_name] = data[\"Adj Close\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "16f2df8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:58.820733Z",
     "iopub.status.busy": "2024-05-31T16:06:58.820312Z",
     "iopub.status.idle": "2024-05-31T16:06:58.873156Z",
     "shell.execute_reply": "2024-05-31T16:06:58.871867Z"
    },
    "papermill": {
     "duration": 0.086142,
     "end_time": "2024-05-31T16:06:58.875711",
     "exception": false,
     "start_time": "2024-05-31T16:06:58.789569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-24</th>\n",
       "      <td>67.197998</td>\n",
       "      <td>39.005569</td>\n",
       "      <td>89.059959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-26</th>\n",
       "      <td>73.544998</td>\n",
       "      <td>39.837276</td>\n",
       "      <td>95.143623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>73.082001</td>\n",
       "      <td>40.337997</td>\n",
       "      <td>95.730209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>73.901001</td>\n",
       "      <td>40.057934</td>\n",
       "      <td>94.982780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>75.098503</td>\n",
       "      <td>40.185238</td>\n",
       "      <td>96.099213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 AMZN         KO       MSFT\n",
       "Date                                       \n",
       "2018-12-24  67.197998  39.005569  89.059959\n",
       "2018-12-26  73.544998  39.837276  95.143623\n",
       "2018-12-27  73.082001  40.337997  95.730209\n",
       "2018-12-28  73.901001  40.057934  94.982780\n",
       "2018-12-31  75.098503  40.185238  96.099213"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stocks.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1cead260",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:58.937746Z",
     "iopub.status.busy": "2024-05-31T16:06:58.937306Z",
     "iopub.status.idle": "2024-05-31T16:06:58.987882Z",
     "shell.execute_reply": "2024-05-31T16:06:58.986551Z"
    },
    "papermill": {
     "duration": 0.084482,
     "end_time": "2024-05-31T16:06:58.990705",
     "exception": false,
     "start_time": "2024-05-31T16:06:58.906223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-24</th>\n",
       "      <td>-0.024313</td>\n",
       "      <td>-0.033845</td>\n",
       "      <td>-0.041739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-26</th>\n",
       "      <td>0.094452</td>\n",
       "      <td>0.021323</td>\n",
       "      <td>0.068310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>-0.006295</td>\n",
       "      <td>0.012569</td>\n",
       "      <td>0.006165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>0.011207</td>\n",
       "      <td>-0.006943</td>\n",
       "      <td>-0.007808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>0.016204</td>\n",
       "      <td>0.003178</td>\n",
       "      <td>0.011754</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                AMZN        KO      MSFT\n",
       "Date                                    \n",
       "2018-12-24 -0.024313 -0.033845 -0.041739\n",
       "2018-12-26  0.094452  0.021323  0.068310\n",
       "2018-12-27 -0.006295  0.012569  0.006165\n",
       "2018-12-28  0.011207 -0.006943 -0.007808\n",
       "2018-12-31  0.016204  0.003178  0.011754"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the daily returns \n",
    "daily_rets = erk.compute_returns(stocks)\n",
    "daily_rets.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11adf0c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:59.053077Z",
     "iopub.status.busy": "2024-05-31T16:06:59.052683Z",
     "iopub.status.idle": "2024-05-31T16:06:59.105896Z",
     "shell.execute_reply": "2024-05-31T16:06:59.104618Z"
    },
    "papermill": {
     "duration": 0.088949,
     "end_time": "2024-05-31T16:06:59.109879",
     "exception": false,
     "start_time": "2024-05-31T16:06:59.020930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AMZN</th>\n",
       "      <td>0.000397</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>0.000137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KO</th>\n",
       "      <td>0.000047</td>\n",
       "      <td>0.000082</td>\n",
       "      <td>0.000049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSFT</th>\n",
       "      <td>0.000137</td>\n",
       "      <td>0.000049</td>\n",
       "      <td>0.000213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          AMZN        KO      MSFT\n",
       "AMZN  0.000397  0.000047  0.000137\n",
       "KO    0.000047  0.000082  0.000049\n",
       "MSFT  0.000137  0.000049  0.000213"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the mean daily returns and the covariance of daily returns of the two assets\n",
    "mean_rets = daily_rets.mean()\n",
    "std_rets  = daily_rets.std()\n",
    "cov_rets  = daily_rets.cov()\n",
    "cov_rets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3e9a061",
   "metadata": {
    "papermill": {
     "duration": 0.029826,
     "end_time": "2024-05-31T16:06:59.170634",
     "exception": false,
     "start_time": "2024-05-31T16:06:59.140808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we simulate $4000$ portfolios with weights allocated to the stocks above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "535b469f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:59.232971Z",
     "iopub.status.busy": "2024-05-31T16:06:59.232583Z",
     "iopub.status.idle": "2024-05-31T16:06:59.274527Z",
     "shell.execute_reply": "2024-05-31T16:06:59.273419Z"
    },
    "papermill": {
     "duration": 0.076426,
     "end_time": "2024-05-31T16:06:59.277229",
     "exception": false,
     "start_time": "2024-05-31T16:06:59.200803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "periods_per_year = 252\n",
    "num_portfolios   = 4000\n",
    "portfolios       = pd.DataFrame(columns=[\"return\",\"volatility\",\"sharpe ratio\",\"w1\",\"w2\",\"w3\"])\n",
    "risk_free_rate   = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ff0b2702",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:06:59.341802Z",
     "iopub.status.busy": "2024-05-31T16:06:59.341410Z",
     "iopub.status.idle": "2024-05-31T16:07:06.250849Z",
     "shell.execute_reply": "2024-05-31T16:07:06.249449Z"
    },
    "papermill": {
     "duration": 6.946258,
     "end_time": "2024-05-31T16:07:06.253910",
     "exception": false,
     "start_time": "2024-05-31T16:06:59.307652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(num_portfolios):\n",
    "    # Select random weights\n",
    "    weights = np.random.random(n_assets)\n",
    "    # Rescale them to sum to 1\n",
    "    weights /= np.sum(weights)\n",
    "    \n",
    "    # Annualized portfolio returns\n",
    "    ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "    portfolio_ret = erk.portfolio_return(weights, ann_rets)\n",
    "    \n",
    "    # Annualized portfolio volatility\n",
    "    portfolio_vol = erk.portfolio_volatility(weights, cov_rets)\n",
    "    portfolio_vol = erk.annualize_vol(portfolio_vol, periods_per_year)\n",
    "    \n",
    "    # Annualized portfolio Sharpe ratio\n",
    "    portfolio_spr = erk.sharpe_ratio(portfolio_ret, risk_free_rate, periods_per_year, v=portfolio_vol)\n",
    "    \n",
    "    # Create a new DataFrame row\n",
    "    new_row = pd.DataFrame({\n",
    "        \"return\": [portfolio_ret], \n",
    "        \"volatility\": [portfolio_vol], \n",
    "        \"sharpe ratio\": [portfolio_spr],\n",
    "        \"w1\": [weights[0]], \n",
    "        \"w2\": [weights[1]], \n",
    "        \"w3\": [weights[2]]\n",
    "    })\n",
    "    \n",
    "    # Concatenate the new row to the portfolios DataFrame\n",
    "    portfolios = pd.concat([portfolios, new_row], ignore_index=True)\n",
    "\n",
    "# Ensure portfolios DataFrame is rounded to 2 decimal places\n",
    "portfolios = portfolios.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1d91ca8",
   "metadata": {
    "papermill": {
     "duration": 0.030211,
     "end_time": "2024-05-31T16:07:06.315299",
     "exception": false,
     "start_time": "2024-05-31T16:07:06.285088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we create a scatter plot coloured by sharpe ratios of the portfolios generated above and we also plot the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d9cf46b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:06.379656Z",
     "iopub.status.busy": "2024-05-31T16:07:06.379247Z",
     "iopub.status.idle": "2024-05-31T16:07:07.232659Z",
     "shell.execute_reply": "2024-05-31T16:07:07.231474Z"
    },
    "papermill": {
     "duration": 0.888574,
     "end_time": "2024-05-31T16:07:07.235600",
     "exception": false,
     "start_time": "2024-05-31T16:07:06.347026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1, figsize=(10,6)) \n",
    "\n",
    "im = ax.scatter(portfolios[\"volatility\"], portfolios[\"return\"], c=portfolios[\"sharpe ratio\"], s=20, edgecolor=None, cmap='RdYlBu')\n",
    "ax.set_title(\"Portfolios and efficient frontier\")\n",
    "ax.set_xlabel(\"volatility\")\n",
    "ax.set_ylabel(\"return\")\n",
    "ax.grid()\n",
    "\n",
    "# Draw the efficient frontier\n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.set_xlim([0.125,0.33])\n",
    "\n",
    "fig.colorbar(im, ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59d88d8a",
   "metadata": {
    "papermill": {
     "duration": 0.031451,
     "end_time": "2024-05-31T16:07:07.298288",
     "exception": false,
     "start_time": "2024-05-31T16:07:07.266837",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We will come back to the plot of the efficient frontier below**.\n",
    "\n",
    "We can see that if the investor is targeting **a return of $20\\%$** he could simply hold \n",
    "a portfolio **with volatility of about $17.5\\%$**, although there are many other portfolios that \n",
    "can guarantee the same return but with much higher volatilities such as $22.5\\%$. \n",
    "It is clear that one should carefully choose the weights of the portfolio. \n",
    "\n",
    "We can see, in particular, that there are **two important** portfolios:\n",
    "\n",
    "1. the **portfolio with the Global Minimum Volatility (GMV)**, i.e., the global minimum variance portfolio\n",
    "2. the **portfolio with the Maximum Sharpe Ratio (MSR)**.\n",
    "\n",
    "From the code above we can easily locate these two portfolios in our dataframe by looking at the lowest volatility and highest sharpe ratio \n",
    "and and recover the corresponding weights that have been stored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3fc45d92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:07.363663Z",
     "iopub.status.busy": "2024-05-31T16:07:07.363216Z",
     "iopub.status.idle": "2024-05-31T16:07:07.409343Z",
     "shell.execute_reply": "2024-05-31T16:07:07.408144Z"
    },
    "papermill": {
     "duration": 0.082361,
     "end_time": "2024-05-31T16:07:07.411903",
     "exception": false,
     "start_time": "2024-05-31T16:07:07.329542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Minimum Volatility portfolio:\n",
      "- return      : 13.00%\n",
      "- volatility  : 14.00%\n",
      "- sharpe ratio: 0.92\n",
      "Maximum Sharpe Ratio portfolio:\n",
      "- return      : 22.00%\n",
      "- volatility  : 20.00%\n",
      "- sharpe ratio: 1.09\n"
     ]
    }
   ],
   "source": [
    "# find the portfolio with lowest volatility \n",
    "low_vol_portfolio = portfolios.iloc[ portfolios['volatility'].idxmin() ]\n",
    "print(\"Global Minimum Volatility portfolio:\")\n",
    "print(\"- return      : {:.2f}%\".format(low_vol_portfolio[0]*100) )\n",
    "print(\"- volatility  : {:.2f}%\".format(low_vol_portfolio[1]*100) )\n",
    "print(\"- sharpe ratio: {:.2f}\".format(low_vol_portfolio[2]) )\n",
    "\n",
    "# find the portfolio with highest sharpe ratio\n",
    "high_sharpe_portfolio = portfolios.iloc[ portfolios['sharpe ratio'].idxmax() ]\n",
    "print(\"Maximum Sharpe Ratio portfolio:\")\n",
    "print(\"- return      : {:.2f}%\".format(high_sharpe_portfolio[0]*100) )\n",
    "print(\"- volatility  : {:.2f}%\".format(high_sharpe_portfolio[1]*100) )\n",
    "print(\"- sharpe ratio: {:.2f}\".format(high_sharpe_portfolio[2]) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aa5c0bc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:07.476374Z",
     "iopub.status.busy": "2024-05-31T16:07:07.475723Z",
     "iopub.status.idle": "2024-05-31T16:07:08.112642Z",
     "shell.execute_reply": "2024-05-31T16:07:08.110817Z"
    },
    "papermill": {
     "duration": 0.67288,
     "end_time": "2024-05-31T16:07:08.115695",
     "exception": false,
     "start_time": "2024-05-31T16:07:07.442815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1, figsize=(10,6)) \n",
    "\n",
    "im = ax.scatter(portfolios[\"volatility\"], portfolios[\"return\"], c=portfolios[\"sharpe ratio\"], s=20, edgecolor=None, label=None, cmap='RdYlBu')\n",
    "ax.set_title(\"Portfolios and efficient frontier\")\n",
    "ax.set_xlabel(\"volatility\")\n",
    "ax.set_ylabel(\"return\")\n",
    "ax.grid()\n",
    "\n",
    "# Draw the efficient frontier\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "\n",
    "ax.scatter(low_vol_portfolio[1],     low_vol_portfolio[0],     marker=\"X\", color='g', s=120, label=\"GMV portfolio\")\n",
    "ax.scatter(high_sharpe_portfolio[1], high_sharpe_portfolio[0], marker=\"X\", color='r', s=120, label=\"MSR portfolio\")\n",
    "\n",
    "ax.set_xlim([0.125,0.33])\n",
    "ax.legend()\n",
    "\n",
    "fig.colorbar(im, ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faf1f886",
   "metadata": {
    "papermill": {
     "duration": 0.033652,
     "end_time": "2024-05-31T16:07:08.193741",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.160089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us define the following function which we are going to use several time in what follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa46a14b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:08.265458Z",
     "iopub.status.busy": "2024-05-31T16:07:08.264997Z",
     "iopub.status.idle": "2024-05-31T16:07:08.310875Z",
     "shell.execute_reply": "2024-05-31T16:07:08.309516Z"
    },
    "papermill": {
     "duration": 0.083419,
     "end_time": "2024-05-31T16:07:08.314042",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.230623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_portfolio_features(weights, rets, covmat, risk_free_rate, periods_per_year):\n",
    "    # portfolio volatility\n",
    "    vol = erk.portfolio_volatility(weights, covmat)\n",
    "    vol = erk.annualize_vol(vol, periods_per_year)\n",
    "\n",
    "    # portfolio return\n",
    "    ret = erk.portfolio_return(weights, rets)\n",
    "\n",
    "    # portfolio sharpe ratio\n",
    "    shp = erk.sharpe_ratio(ret, risk_free_rate, periods_per_year, v=vol)\n",
    "\n",
    "    print(\"Portfolio return:       {:.2f}%\" .format(ret*100))\n",
    "    print(\"Portfolio volatility:   {:.2f}%\" .format(vol*100))\n",
    "    print(\"Portfolio sharpe ratio: {:.2f}\" .format(shp))\n",
    "    \n",
    "    return ret, vol, shp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa769be",
   "metadata": {
    "papermill": {
     "duration": 0.035983,
     "end_time": "2024-05-31T16:07:08.382734",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.346751",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Finding the optimal portfolios: minimizing the volatility \n",
    "\n",
    "In the experiments above, we found the optimal portfolios, i.e., the ones on the efficient frontier, by **simulating a high number of portfolios** and then plotting them. From the plot we could see what the efficient frontier looked like. \n",
    "However, we can find an optimal portfolio on the efficient frontier by **solving a minimization problem**, \n",
    "for example, by applying the **scipy optimize** method. \n",
    "\n",
    "\n",
    "For example, suppose we want to **find the portfolio (on the efficient frontier) which has the minimum volatility**. \n",
    "Then the minimization problem is:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "380d0da0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:08.450852Z",
     "iopub.status.busy": "2024-05-31T16:07:08.449985Z",
     "iopub.status.idle": "2024-05-31T16:07:08.498496Z",
     "shell.execute_reply": "2024-05-31T16:07:08.497234Z"
    },
    "papermill": {
     "duration": 0.085998,
     "end_time": "2024-05-31T16:07:08.501201",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.415203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AMZN    0.300595\n",
       "KO      0.080584\n",
       "MSFT    0.205678\n",
       "dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us see the total (annual) returns of single companies we are investing in\n",
    "ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "ann_rets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcea6e66",
   "metadata": {
    "papermill": {
     "duration": 0.035217,
     "end_time": "2024-05-31T16:07:08.574038",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.538821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we can call our minimizer which solves the minimization problem of finding the weights of the portfolio with minimum volatility. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "abfc9641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:08.651329Z",
     "iopub.status.busy": "2024-05-31T16:07:08.650137Z",
     "iopub.status.idle": "2024-05-31T16:07:08.702097Z",
     "shell.execute_reply": "2024-05-31T16:07:08.700850Z"
    },
    "papermill": {
     "duration": 0.088619,
     "end_time": "2024-05-31T16:07:08.704736",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.616117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 4.76%\n",
      "  KO:   81.77%\n",
      "  MSFT: 13.47%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a6db89",
   "metadata": {
    "papermill": {
     "duration": 0.032504,
     "end_time": "2024-05-31T16:07:08.770373",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.737869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us compute the volatility of the portfolio constructed with these weights and locate it on the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8f32525f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:08.836908Z",
     "iopub.status.busy": "2024-05-31T16:07:08.836470Z",
     "iopub.status.idle": "2024-05-31T16:07:09.452116Z",
     "shell.execute_reply": "2024-05-31T16:07:09.450929Z"
    },
    "papermill": {
     "duration": 0.651861,
     "end_time": "2024-05-31T16:07:09.454758",
     "exception": false,
     "start_time": "2024-05-31T16:07:08.802897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       10.79%\n",
      "Portfolio volatility:   13.84%\n",
      "Portfolio sharpe ratio: 0.78\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='g', s=120, label=\"GMV portfolio\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Minimum volatility portfolio\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac176d57",
   "metadata": {
    "papermill": {
     "duration": 0.034321,
     "end_time": "2024-05-31T16:07:09.522421",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.488100",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can also verify that the minimum volatility portfolio obtained by solving the minimization problem almost coincides \n",
    "with the one obtained from simulating a high number of portfolios as we have done before: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "398a865d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:09.591267Z",
     "iopub.status.busy": "2024-05-31T16:07:09.590843Z",
     "iopub.status.idle": "2024-05-31T16:07:09.635842Z",
     "shell.execute_reply": "2024-05-31T16:07:09.634484Z"
    },
    "papermill": {
     "duration": 0.08223,
     "end_time": "2024-05-31T16:07:09.638451",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.556221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GMV portfolio:\n",
      "\n",
      "- Monte carlo:\n",
      "  return:       13.00%\n",
      "  volatility:   14.00%\n",
      "  sharpe ratio: 0.92\n",
      "\n",
      "- Minimization problem:\n",
      "  return:       10.79%\n",
      "  volatility:   13.84%\n",
      "  sharpe ratio: 0.78\n"
     ]
    }
   ],
   "source": [
    "print(\"GMV portfolio:\\n\")\n",
    "print(\"- Monte carlo:\")\n",
    "print(\"  return:       {:.2f}%\" .format(low_vol_portfolio[0]*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(low_vol_portfolio[1]*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(low_vol_portfolio[2]))\n",
    "print(\"\\n- Minimization problem:\")\n",
    "print(\"  return:       {:.2f}%\" .format(ret*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(vol*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(shp))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d4df15e",
   "metadata": {
    "papermill": {
     "duration": 0.033477,
     "end_time": "2024-05-31T16:07:09.706583",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.673106",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Finding the optimal portfolios: minimizing the volatility given a fixed return\n",
    "\n",
    "What if we want to find the **portfolio (on the efficient frontier) with minimium volatility for a given a level of return**? \n",
    "In this case, we simply have to add a constrain in the minimization problem:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} = R_0, \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "where $R_0$ denotes a fixed level of expected return. For example, suppose we target the following total expected return $R_0=16\\%$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0ca642db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:09.775727Z",
     "iopub.status.busy": "2024-05-31T16:07:09.775276Z",
     "iopub.status.idle": "2024-05-31T16:07:09.815415Z",
     "shell.execute_reply": "2024-05-31T16:07:09.814190Z"
    },
    "papermill": {
     "duration": 0.078146,
     "end_time": "2024-05-31T16:07:09.818365",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.740219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "target_return = 0.16"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2fe2713",
   "metadata": {
    "papermill": {
     "duration": 0.035023,
     "end_time": "2024-05-31T16:07:09.886668",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.851645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we can call again the minimizer with the option of solving the problem with the constrain for the given target return:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2611c7ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:09.956959Z",
     "iopub.status.busy": "2024-05-31T16:07:09.956176Z",
     "iopub.status.idle": "2024-05-31T16:07:10.003422Z",
     "shell.execute_reply": "2024-05-31T16:07:10.001945Z"
    },
    "papermill": {
     "duration": 0.085406,
     "end_time": "2024-05-31T16:07:10.005907",
     "exception": false,
     "start_time": "2024-05-31T16:07:09.920501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 17.97%\n",
      "  KO:   50.15%\n",
      "  MSFT: 31.88%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets, target_return)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "045e62aa",
   "metadata": {
    "papermill": {
     "duration": 0.034663,
     "end_time": "2024-05-31T16:07:10.073975",
     "exception": false,
     "start_time": "2024-05-31T16:07:10.039312",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us compute the volatility of the portfolio constructed with these weights. \n",
    "Also, we double check that the corresponding return is the target return that we have chosen (i.e., $16\\%$) and \n",
    "locate the portfolio on the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "37f20191",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:10.149073Z",
     "iopub.status.busy": "2024-05-31T16:07:10.148585Z",
     "iopub.status.idle": "2024-05-31T16:07:10.897947Z",
     "shell.execute_reply": "2024-05-31T16:07:10.896461Z"
    },
    "papermill": {
     "duration": 0.790618,
     "end_time": "2024-05-31T16:07:10.901092",
     "exception": false,
     "start_time": "2024-05-31T16:07:10.110474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       16.00%\n",
      "Portfolio volatility:   15.47%\n",
      "Portfolio sharpe ratio: 1.03\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, target_return,  marker=\"X\", color='g', s=120, label=\"min. volatility port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Minimum Volatility portfolio for given return of $16\\%$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d95188fd",
   "metadata": {
    "papermill": {
     "duration": 0.034649,
     "end_time": "2024-05-31T16:07:10.970219",
     "exception": false,
     "start_time": "2024-05-31T16:07:10.935570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Recall that **the return of a portfolio will be some value between the minimum and the maximum return from the assets composing the portfolio**. That is, given the same three companies, we cannot achieve a return of, say $40\\%$ since the maximum return achievable is about $30\\%$ from Amazon. \n",
    "In fact, if we run the minimizer with a target return equal to $40\\%$ we will get zero weights to all assets but Amazon:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "97e0001f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:11.063201Z",
     "iopub.status.busy": "2024-05-31T16:07:11.062768Z",
     "iopub.status.idle": "2024-05-31T16:07:11.121852Z",
     "shell.execute_reply": "2024-05-31T16:07:11.120248Z"
    },
    "papermill": {
     "duration": 0.113338,
     "end_time": "2024-05-31T16:07:11.124938",
     "exception": false,
     "start_time": "2024-05-31T16:07:11.011600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 100.00%\n",
      "  KO:   0.00%\n",
      "  MSFT: 0.00%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets, 0.4)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "183852eb",
   "metadata": {
    "papermill": {
     "duration": 0.036261,
     "end_time": "2024-05-31T16:07:11.196215",
     "exception": false,
     "start_time": "2024-05-31T16:07:11.159954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Finding the optimal portfolios: maximizing the sharpe ratio \n",
    "\n",
    "Now, consider the case of finding **the portfolio (on the efficient frontier) with the highest sharpe ratio**. \n",
    "\n",
    "Note that scipy offers a **minimize** method, but no a **maximize** a method, and we may then conclude \n",
    "that we are not able to find such a portfolio by solving an optimization problem. \n",
    "However, **the maximization of the sharpe ratio is nothing but the minimization of the negative sharpe ratio**. \n",
    "That is, we have \n",
    "$$\n",
    "\\text{minimize} \\;\\; -  \\frac{R_p - r_f}{\\sigma_p} =: \\text{SR} \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "\n",
    "Let us use our minimizer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "85575ba1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:11.268326Z",
     "iopub.status.busy": "2024-05-31T16:07:11.267920Z",
     "iopub.status.idle": "2024-05-31T16:07:11.318629Z",
     "shell.execute_reply": "2024-05-31T16:07:11.316903Z"
    },
    "papermill": {
     "duration": 0.089548,
     "end_time": "2024-05-31T16:07:11.321590",
     "exception": false,
     "start_time": "2024-05-31T16:07:11.232042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 36.91%\n",
      "  KO:   24.76%\n",
      "  MSFT: 38.33%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "15381ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:11.396250Z",
     "iopub.status.busy": "2024-05-31T16:07:11.395833Z",
     "iopub.status.idle": "2024-05-31T16:07:12.038313Z",
     "shell.execute_reply": "2024-05-31T16:07:12.036933Z"
    },
    "papermill": {
     "duration": 0.682974,
     "end_time": "2024-05-31T16:07:12.041170",
     "exception": false,
     "start_time": "2024-05-31T16:07:11.358196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       20.97%\n",
      "Portfolio volatility:   19.25%\n",
      "Portfolio sharpe ratio: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='r', s=120, label=\"highest sharpe ratio port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio (SR={:.2f})\".format(shp))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81a743a9",
   "metadata": {
    "papermill": {
     "duration": 0.035621,
     "end_time": "2024-05-31T16:07:12.113635",
     "exception": false,
     "start_time": "2024-05-31T16:07:12.078014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "and let us see how these numbers differ from those obtained from the Monte Carlo simulation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9575ab1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:12.186992Z",
     "iopub.status.busy": "2024-05-31T16:07:12.186588Z",
     "iopub.status.idle": "2024-05-31T16:07:12.230634Z",
     "shell.execute_reply": "2024-05-31T16:07:12.229498Z"
    },
    "papermill": {
     "duration": 0.083226,
     "end_time": "2024-05-31T16:07:12.232944",
     "exception": false,
     "start_time": "2024-05-31T16:07:12.149718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSR portfolio:\n",
      "\n",
      "- Monte carlo:\n",
      "  return:       22.00%\n",
      "  volatility:   20.00%\n",
      "  sharpe ratio: 1.09\n",
      "\n",
      "- Minimization problem:\n",
      "  return:       20.97%\n",
      "  volatility:   19.25%\n",
      "  sharpe ratio: 1.09\n"
     ]
    }
   ],
   "source": [
    "print(\"MSR portfolio:\\n\")\n",
    "print(\"- Monte carlo:\")\n",
    "print(\"  return:       {:.2f}%\" .format(high_sharpe_portfolio[0]*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(high_sharpe_portfolio[1]*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(high_sharpe_portfolio[2]))\n",
    "print(\"\\n- Minimization problem:\")\n",
    "print(\"  return:       {:.2f}%\" .format(ret*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(vol*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(shp))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "664138e7",
   "metadata": {
    "papermill": {
     "duration": 0.034972,
     "end_time": "2024-05-31T16:07:12.302713",
     "exception": false,
     "start_time": "2024-05-31T16:07:12.267741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Finding the optimal portfolios: maximize the sharpe ratio given a fixed volatility \n",
    "\n",
    "Similarly to what we have done before, we can find the **portfolio (on the efficient frontier) with highest sharpe ratio \n",
    "for a given a level of volatility**. In this case, we simply add a constrain in the minimization problem:\n",
    "$$\n",
    "\\text{minimize} \\;\\; -  \\frac{R_p - r_f}{\\sigma_p} =: \\text{SR} \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} = \\sigma_0, \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "where $\\sigma_0$ denotes a fixed level of volatility. For example, suppose we target the following total volatility of $\\sigma_0=20\\%$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9e47c99f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:12.374755Z",
     "iopub.status.busy": "2024-05-31T16:07:12.374311Z",
     "iopub.status.idle": "2024-05-31T16:07:12.426169Z",
     "shell.execute_reply": "2024-05-31T16:07:12.424870Z"
    },
    "papermill": {
     "duration": 0.091014,
     "end_time": "2024-05-31T16:07:12.429052",
     "exception": false,
     "start_time": "2024-05-31T16:07:12.338038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 39.46%\n",
      "  KO:   20.30%\n",
      "  MSFT: 40.25%\n"
     ]
    }
   ],
   "source": [
    "target_volatility = 0.2\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year, target_volatility)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a00e4353",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:12.502567Z",
     "iopub.status.busy": "2024-05-31T16:07:12.502028Z",
     "iopub.status.idle": "2024-05-31T16:07:13.137289Z",
     "shell.execute_reply": "2024-05-31T16:07:13.136209Z"
    },
    "papermill": {
     "duration": 0.675289,
     "end_time": "2024-05-31T16:07:13.139978",
     "exception": false,
     "start_time": "2024-05-31T16:07:12.464689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       21.77%\n",
      "Portfolio volatility:   20.00%\n",
      "Portfolio sharpe ratio: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='r', s=120, label=\"highes sharpe ratio port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio for given volatility of $20\\%$ (SR={:.2f})\".format(shp))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ad29b1",
   "metadata": {
    "papermill": {
     "duration": 0.035739,
     "end_time": "2024-05-31T16:07:13.213833",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.178094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Observation on constraints\n",
    "\n",
    "It is worth mentioning that so far we have decided to invest all of our capital and, at the same time, our strategy has been **long-only**. That is, the weights that we allocate to the assets sum to $1$ \n",
    "and all of them are positive (because we **buy** the assets). \n",
    "In particular, these two conditions were imposed when solving the minimization problems. \n",
    "\n",
    "However, **we could in principle not invest all of our capital**, which means that we at do not necessarily \n",
    "get weights that sum to $1$, and also we may decide to not buy all the assets. We could **short selling** some of them (by short shelling we mean selling an asset that we do not have and that we borrow from someone else).\n",
    "\n",
    "#### Short selling and not normalized weigths: minimum volatility portofolio given a fixed return \n",
    "\n",
    "We can solve the minimization problem without imposing the constraint on positive weigths and the constraint that the weights sum to $1$, i.e., simply:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} = R_0, \n",
    "\\end{cases}\n",
    "$$\n",
    "in the case of finding the minimum volatility portfolio for a fixed return. \n",
    "In this case we are allowed to **short sell** the asset and in principle we do not have to invest all of our capital.\n",
    "\n",
    "For such a problem we can find the analytical solution to the problem by using the **Lagrange multipliers**. \n",
    "We define the **Lagrangian** of the problem:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} - \\lambda(  \\mathbf{w}^T \\mathbf{R} - R_0 ),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda  \\mathbf{R} = 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} + R_0 = 0.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation, we get:\n",
    "$$\n",
    "\\Sigma \\mathbf{w} - \\lambda  \\mathbf{R} = 0 \n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\mathbf{w} = \\lambda \\Sigma^{-1}\\mathbf{R},  \n",
    "$$\n",
    "and inserting in the second equation:\n",
    "$$\n",
    "- ( \\lambda \\Sigma^{-1}\\mathbf{R} )^T \\mathbf{R} + R_0 = 0 \n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\lambda \\mathbf{R}^T \\Sigma^{-1} \\mathbf{R} = R_0\n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\lambda = \\frac{R_0}{\\mathbf{R}^T \\Sigma^{-1} \\mathbf{R}}.\n",
    "$$\n",
    "Note that since $\\Sigma$ was symmetric, so is $\\Sigma^{-1}$, from which $(\\Sigma^{-1})^T = \\Sigma^{-1}$. \n",
    "We can then insert $\\lambda$ back into the first equation and obtain:\n",
    "$$\n",
    "\\mathbf{w}^* = R_0 \\frac{\\Sigma^{-1}\\mathbf{R}}{\\mathbf{R}^T \\Sigma^{-1} \\mathbf{R}},\n",
    "$$\n",
    "which is therefore the analytical expression for the weights. Notice that since we have not imposed the constraint \n",
    "on the normalisation, we are not guaranteed that such vector of weights sum to $1$. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ad2f34e",
   "metadata": {
    "papermill": {
     "duration": 0.035735,
     "end_time": "2024-05-31T16:07:13.286301",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.250566",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Short selling and normalized weigths: minimum volatility portofolio given a fixed return \n",
    "\n",
    "Analogously, we can also also fin the analytical expression of optimal weights in case we add the condition that the weigths sum to $1$, but without requiring that they have to be all positive, i.e.:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} &= R_0,  \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} &= 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "This is again the case in which we can **short sell** the asset but this time we invest all of the capital. \n",
    "\n",
    "We define the Lagrangian:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} \n",
    "- \\lambda( \\mathbf{w}^T \\mathbf{R} - R_0) - \\delta(\\mathbf{w}^T\\mathbf{1}-1),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda \\mathbf{R} - \\delta \\mathbf{1}= 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} + R_0 = 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{1} + R_0 = 0.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation we get:\n",
    "$$\n",
    "\\mathbf{w} = \\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}), \n",
    "$$\n",
    "and we can insert it in the second and the third equation, respectively:\n",
    "\\begin{cases}\n",
    "\\left(\\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}) \\right)^T\\mathbf{R} \n",
    "&= \\lambda \\mathbf{R}^T\\Sigma^{-1}\\mathbf{R} + \\delta\\mathbf{1}\\Sigma^{-1}\\mathbf{R} = R_0, \\\\\n",
    "\\left(\\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}) \\right)^T\\mathbf{1} \n",
    "&= \\lambda \\mathbf{R}^T\\Sigma^{-1}\\mathbf{1} + \\delta\\mathbf{1}\\Sigma^{-1}\\mathbf{1} = 1.\n",
    "\\end{cases}\n",
    "Let us define the following fixed numbers:\n",
    "$$\n",
    "\\begin{cases}\n",
    "A & := \\mathbf{R}^T \\Sigma^{-1} \\mathbf{R},  \\\\\n",
    "B & := \\mathbf{1}^T \\Sigma^{-1} \\mathbf{R} \\equiv \\mathbf{R}^T \\Sigma^{-1} \\mathbf{1}, \\\\\n",
    "C & := \\mathbf{1}^T \\Sigma^{-1} \\mathbf{1},\n",
    "\\end{cases}\n",
    "$$\n",
    "where notice that in B the second equation is true since $\\Sigma^{-1}$ is a symmetric matrix. Hence we have the following system to solve:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\lambda A + \\delta B &= R_0, \\\\\n",
    "\\lambda B + \\delta C &= 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the second equation we find $\\lambda$ and put it into the first equation:\n",
    "$$\n",
    "\\lambda = \\frac{1-\\delta C}{B}\n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\frac{1-\\delta C}{B} A + \\delta B = R_0\n",
    "\\quad\\text{from which we find}\\quad\n",
    "\\delta = \\frac{R_0B - A}{B^2-AC}.\n",
    "$$\n",
    "Now, we put $\\delta$ back into $\\lambda$:\n",
    "$$\n",
    "\\lambda = \\frac{1 - \\frac{R_0 B-A}{B^2-AC}C }{B} = \\frac{B - R_0 C}{B^2-AC}.\n",
    "$$\n",
    "Finally, we can put both $\\lambda$ and $\\delta$ we have just find back into $\\mathbf{w}$ and find the optimal weight:\n",
    "$$\n",
    "\\mathbf{w}^*  \n",
    "= \\lambda \\Sigma^{-1} \\mathbf{R} + \\delta \\Sigma^{-1} \\mathbf{1} \n",
    "= \\frac{B - R_0 C}{B^2-AC} \\Sigma^{-1} \\mathbf{R}  +  \\frac{R_0B - A}{B^2-AC}  \\Sigma^{-1}\\mathbf{1} \n",
    "= \\underbrace{ \\frac{1}{B^2-AC}\\left(B\\Sigma^{-1}\\mathbf{R} - A\\Sigma^{-1}\\mathbf{1} \\right) }_{:= \\mathbf{f} }\n",
    "+ R_0 \\Bigl( \\underbrace{ \\frac{1}{B^2-AC}\\left(B\\Sigma^{-1}\\mathbf{1} - C\\Sigma^{-1}\\mathbf{R} \\right) }_{:= \\mathbf{g} }  \\Bigr)\n",
    "= \\mathbf{f} + R_0 \\mathbf{g}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcdd7d86",
   "metadata": {
    "papermill": {
     "duration": 0.035795,
     "end_time": "2024-05-31T16:07:13.357943",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.322148",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Maximizing the sharpe ratio portfolio in presence of non null risk-free rate\n",
    "\n",
    "Recall that a **risk-free asset** is an (hypothetical) asset with a risk-free rate. For example, **short-term government securities (such as US treasury bills)** are used as a risk-free asset since **they pay a fixed interest rate and have exceptionally low default risk**. \n",
    "\n",
    "The risk-free asset has zero volatility. Furthermore, it is also uncorrelated with any other asset since, \n",
    "by definition, its volatility is zero. Therefore, when combined with any other asset in a portfolio, \n",
    "**the change in return is linearly related to the change in risk** as the proportions in the combination vary.\n",
    "\n",
    "#### The capital market line (CML)\n",
    "\n",
    "When a risk-free asset is introduced, there will be a line satisfying:\n",
    "\n",
    " 1. it is tangent to the curve at the risky portfolio with the highest Sharpe ratio; \n",
    " 2. its vertical intercept represents a portfolio with $100\\%$ of holdings in the risk-free asset; \n",
    " 3. the tangency with the curve represents the highest sharpe ratio portfolio with no risk-free holdings and $100%$ of risky assets; \n",
    " assets held in the portfolio occurring at the tangency point; \n",
    " 4. points on this line represent portfolios containing positive amounts of both the risky assets and the risk-free asset; \n",
    " \n",
    "This efficient line is called the **Capital Market Line (CML)**, and its given by:\n",
    "$$\n",
    "R_{CML} = R_{f} + \\sigma_{CML}\\frac{R_{p} - R_{f}}{\\sigma_{p}}, \n",
    "$$\n",
    "where $R_p$ and $\\sigma_p$ are the return and the volatility of the risky portfolio with no risk free asset, respectively, \n",
    "$R_f$ denotes the risk-free rate, and $R_{CML}$ and $\\sigma_{CML}$ denote the return and the volatility of the \n",
    "portfolio combining both risky assets and the risk-free asset, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c9b2ed75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:13.433855Z",
     "iopub.status.busy": "2024-05-31T16:07:13.432597Z",
     "iopub.status.idle": "2024-05-31T16:07:13.485368Z",
     "shell.execute_reply": "2024-05-31T16:07:13.483958Z"
    },
    "papermill": {
     "duration": 0.093275,
     "end_time": "2024-05-31T16:07:13.487909",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.394634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 55.58%\n",
      "  KO:   0.00%\n",
      "  MSFT: 44.42%\n"
     ]
    }
   ],
   "source": [
    "risk_free_rate = 0.06\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bb870d1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:13.562809Z",
     "iopub.status.busy": "2024-05-31T16:07:13.562403Z",
     "iopub.status.idle": "2024-05-31T16:07:13.605113Z",
     "shell.execute_reply": "2024-05-31T16:07:13.603669Z"
    },
    "papermill": {
     "duration": 0.08358,
     "end_time": "2024-05-31T16:07:13.607703",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.524123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       25.84%\n",
      "Portfolio volatility:   24.20%\n",
      "Portfolio sharpe ratio: 0.82\n"
     ]
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "698e1599",
   "metadata": {
    "papermill": {
     "duration": 0.03601,
     "end_time": "2024-05-31T16:07:13.680112",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.644102",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us plot the efficient frontier and the capital market line using the optional argument in our plot method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "22f175eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:13.754242Z",
     "iopub.status.busy": "2024-05-31T16:07:13.753805Z",
     "iopub.status.idle": "2024-05-31T16:07:14.311139Z",
     "shell.execute_reply": "2024-05-31T16:07:14.309790Z"
    },
    "papermill": {
     "duration": 0.597913,
     "end_time": "2024-05-31T16:07:14.313989",
     "exception": false,
     "start_time": "2024-05-31T16:07:13.716076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df, ax = erk.efficient_frontier(40, daily_rets, cov_rets, periods_per_year, risk_free_rate=risk_free_rate, \n",
    "                                iplot=True, cml=True)\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio {} for risk free rate {}%\".format(np.round(shp,2),risk_free_rate*100))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "448166a2",
   "metadata": {
    "papermill": {
     "duration": 0.03632,
     "end_time": "2024-05-31T16:07:14.387658",
     "exception": false,
     "start_time": "2024-05-31T16:07:14.351338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The introduction of the risk-free asset as a possible component of the portfolio has improved the range of volatility-return combinations available since **everywhere, except at the tangency portfolio, the CML provides a higher return than the (old) efficient frontier does \n",
    "at every possible volatility.** "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29934d5b",
   "metadata": {
    "papermill": {
     "duration": 0.036209,
     "end_time": "2024-05-31T16:07:14.461329",
     "exception": false,
     "start_time": "2024-05-31T16:07:14.425120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Note that the efficient frontier method has other optional parameter to plot the highest sharpe ratio, the minimum volatility, and the equally weigthed portfolio as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6e990de9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:14.536399Z",
     "iopub.status.busy": "2024-05-31T16:07:14.535980Z",
     "iopub.status.idle": "2024-05-31T16:07:15.445453Z",
     "shell.execute_reply": "2024-05-31T16:07:15.444109Z"
    },
    "papermill": {
     "duration": 0.95024,
     "end_time": "2024-05-31T16:07:15.448162",
     "exception": false,
     "start_time": "2024-05-31T16:07:14.497922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "risk_free_rate = 0.05\n",
    "df, ax = erk.efficient_frontier(90, daily_rets, cov_rets, periods_per_year, risk_free_rate=risk_free_rate, \n",
    "                                iplot=True, hsr=True, cml=True, mvp=True, ewp=True)\n",
    "ax.set_title(\"Maximum Sharpe ratio portfolio {} for risk free rate {}%\".format(np.round(shp,2),risk_free_rate*100))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "21d468f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:15.527618Z",
     "iopub.status.busy": "2024-05-31T16:07:15.527186Z",
     "iopub.status.idle": "2024-05-31T16:07:15.576902Z",
     "shell.execute_reply": "2024-05-31T16:07:15.575731Z"
    },
    "papermill": {
     "duration": 0.092292,
     "end_time": "2024-05-31T16:07:15.579407",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.487115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>0.311025</td>\n",
       "      <td>0.298123</td>\n",
       "      <td>0.797759</td>\n",
       "      <td>0.973956</td>\n",
       "      <td>1.110223e-16</td>\n",
       "      <td>2.604426e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>0.316378</td>\n",
       "      <td>0.300595</td>\n",
       "      <td>0.792075</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.551115e-17</td>\n",
       "      <td>1.284225e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>0.239873</td>\n",
       "      <td>0.256689</td>\n",
       "      <td>0.861661</td>\n",
       "      <td>0.537433</td>\n",
       "      <td>4.868068e-17</td>\n",
       "      <td>4.625672e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>0.138354</td>\n",
       "      <td>0.107907</td>\n",
       "      <td>0.418545</td>\n",
       "      <td>0.047597</td>\n",
       "      <td>8.176888e-01</td>\n",
       "      <td>1.347144e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>0.180093</td>\n",
       "      <td>0.195619</td>\n",
       "      <td>0.808578</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>3.333333e-01</td>\n",
       "      <td>3.333333e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3             4             5\n",
       "88  0.311025  0.298123  0.797759  0.973956  1.110223e-16  2.604426e-02\n",
       "89  0.316378  0.300595  0.792075  1.000000  5.551115e-17  1.284225e-08\n",
       "90  0.239873  0.256689  0.861661  0.537433  4.868068e-17  4.625672e-01\n",
       "91  0.138354  0.107907  0.418545  0.047597  8.176888e-01  1.347144e-01\n",
       "92  0.180093  0.195619  0.808578  0.333333  3.333333e-01  3.333333e-01"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36262cf6",
   "metadata": {
    "papermill": {
     "duration": 0.037462,
     "end_time": "2024-05-31T16:07:15.654463",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.617001",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Maximizing the sharpe ratio = Minimizing volatility when we invest also in a risk free asset\n",
    "\n",
    "Suppose that along with the set of risky assets there is also a risk-free asset with volatility zero and return equal to the risk-free rate $R_f$. In this case, we may want to minimize the volatility of the portfolio (i.e., the volatility of the part of the portfolio invested in the risky assets, since the the risk-free asset, by definition, is risk free) in which we have allocated some weights $\\mathbf{w}$ in the risky assets and the remaining part of our capital, i.e., $1-\\mathbf{w}^T\\mathbf{1}$, in the risk-free asset:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} + (1 - \\mathbf{w}^T\\mathbf{1})R_f &= R_0,  \\\\\n",
    "\\end{cases}\n",
    "$$\n",
    "Note that in this case we can **short sell** the assets and we invest all of the capital. \n",
    "We define the Lagrangian:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \n",
    "\\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} \n",
    "- \\lambda\\left( \\mathbf{w}^T \\mathbf{R} + (1-\\mathbf{w}^T\\mathbf{1})R_f - R_0\\right),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda \\mathbf{R} + \\lambda R_f \\mathbf{1}= 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} - (1-\\mathbf{w}\\mathbf{1})R_f + R_0 = 0, \\\\\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation we get:\n",
    "$$\n",
    "\\mathbf{w} = \\lambda \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}), \n",
    "$$\n",
    "and we can insert it in the second equation:\n",
    "$$\n",
    "\\left( \\lambda\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^T \\mathbf{R} + \\left( 1 - (\\lambda\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}))^T\\mathbf{1}   \\right) R_f = R_0\n",
    "\\quad \\Longrightarrow\\quad \n",
    "\\lambda = \\frac{R_0-R_f}{(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})}.\n",
    "$$\n",
    "We can now put $\\lambda$ back into the expression for the weigths:\n",
    "$$\n",
    "\\mathbf{w}^* \n",
    "= \\underbrace{ \\frac{R_0-R_f}{(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})} }_{:= r} \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1})\n",
    "= r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}).\n",
    "$$\n",
    "We found the otpimal weight allocations to the risky assets. The allocation to the risk-free rate would be then given by \n",
    "$1-\\mathbf{w^*}^T\\mathbf{1}$. \n",
    "\n",
    "#### Portfolio return and volatility\n",
    "Notice that a portfolio with these weigths should give, by definition, a return equal to the target return $R_0$. \n",
    "In fact:\n",
    "$$\n",
    "\\mu_p = \\mathbf{w^*}^T \\mathbf{R} + (1 - \\mathbf{w^*}^T\\mathbf{1})R_f \n",
    "= r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}\\mathbf{R} + R_f - r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1} R_f \\mathbf{1} \n",
    "= \\underbrace{ r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) }_{= R_0 - R_f}   + R_f  = R_0.\n",
    "$$\n",
    "Right. The volatility of the portfolio is given by:\n",
    "$$\n",
    "\\sigma_p^2 = \\mathbf{w^*}^T\\Sigma\\mathbf{w^*} \n",
    "= \\left( r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}) \\right)^T \\Sigma \\left( r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}) \\right) \n",
    "= r^2 (\\mathbf{R} - R_f\\mathbf{1})^T \\Sigma^{-1}\\underbrace{\\Sigma\\Sigma^{-1}}_{=Id} (\\mathbf{R} - R_f\\mathbf{1}) \n",
    "= \\frac{(R_0-R_f)^2}{ \\left( (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^2 } \n",
    "(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})\n",
    "$$\n",
    "that is:\n",
    "$$\n",
    "\\sigma_p = \\frac{(R_0-R_f)}{ \\sqrt{ (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})} }.\n",
    "$$\n",
    "\n",
    "#### Portoflio weigths when full allocation is done to the risky assets (MSR)\n",
    "\n",
    "If, even in case of risk-free asset, we decide to allocate all the capital to the risky assets we can easily find the weights by normalizing the efficient weights we have found before. In particular, notice that $\\mathbf{w}^*$ is proportional to the vector \n",
    "$\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})$ with the constant of proportionality equal to $r$. \n",
    "Hence we can define the weigths:\n",
    "$$\n",
    "\\mathbf{w}_M := \\frac{\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) },\n",
    "$$\n",
    "where notice that the denominator is simply the sum of the weigths in $\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})$, i.e., weights in $w_M$ sum to $1$, and correspond to a full allocation of money in the risky assets and zero to the risk-free rate asset. \n",
    "\n",
    "Note that the return of such portfolio is given by:\n",
    "$$\n",
    "\\mu_M = \\mathbf{w}_M^T\\mathbf{R} = \\frac{ (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}\\mathbf{R} }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})}, \n",
    "$$\n",
    "while the volatility is:\n",
    "$$\n",
    "\\sigma_M^2 = \\mathbf{w}_M^T \\Sigma \\mathbf{w}_M \n",
    "= \\frac{1}{ \\left( \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})  \\right)^2 } \n",
    "(\\mathbf{R}-R_f\\mathbf{1})^T\\underbrace{\\Sigma^{-1}\\Sigma}_{=Id}\\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1}) \n",
    "= \\frac{(\\mathbf{R}-R_f\\mathbf{1})^T \\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1})}{ \\left( \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^2 }\n",
    "\\quad \\Longrightarrow\\quad \n",
    "\\sigma_M = \n",
    "\\frac{ \\sqrt{(\\mathbf{R}-R_f\\mathbf{1})^T \\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1})}  }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})  }.\n",
    "$$\n",
    "\n",
    "The portoflio of only risky assets with weights given by $\\mathbf{w}_M$ is, by constuction, a portfolio with a minimum volatility lying on the efficient frontier. However, we can see that **it is also the portfolio with the highest Sharpe Ratio**. \n",
    "\n",
    "Consider the point on the $(\\sigma, \\mu)$ plane corresponding to the portfolio where we only allocate money to the risk-free asset, \n",
    "i.e. the portfolio with $(\\sigma,\\mu)=(0,R_f)$, and the portfolio where we only allocate money to the risky asset,\n",
    "i.e. the portfolio with $(\\sigma,\\mu)=(\\sigma_M,\\mu_M)$, where $\\sigma_M$ and $\\mu_M$ have been found above. \n",
    "The line connecting these two portfolio is:\n",
    "$$\n",
    "\\mu - \\mu_M = \\frac{\\mu_M - R_f}{\\sigma_M - 0} (\\sigma - \\sigma_M) \n",
    "\\quad\\text{and then}\\quad\n",
    "\\mu = R_f + \\frac{\\mu_M - R_f}{\\sigma_M} \\sigma,\n",
    "$$\n",
    "i.e., **this is the Capital Market Line**, and we see that **the slope of the CML is the Sharpe Ratio of the portfolio with return $\\mu_M$ and $\\sigma_M$**, that is, the minimum volatility portfolio on the efficient frontier with weights given by $\\mathbf{w}_M$. Furthermore, from the line we see that such portfolio is also the \n",
    "maximum Sharpe Ratio portfolio since:\n",
    "$$\n",
    "\\max \\frac{\\mu - R_f}{\\sigma} = \\frac{\\mu_M - R_f}{\\sigma_M}.\n",
    "$$\n",
    "\n",
    "Since the CML connects the portfolios composed of only the risk-free asset and only the risky assets, every point on the line corresponds to an investmentes in both the risk-free rate and the risky assets. In this case, the weights are given by the $\\mathbf{w}^*$ previously found. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a763ce79",
   "metadata": {
    "papermill": {
     "duration": 0.038658,
     "end_time": "2024-05-31T16:07:15.730761",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.692103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First of all, recall that with our method we can find the weigths of the portfolio with the maximum sharpe ratio:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "42f6e2f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:15.809081Z",
     "iopub.status.busy": "2024-05-31T16:07:15.808383Z",
     "iopub.status.idle": "2024-05-31T16:07:15.857423Z",
     "shell.execute_reply": "2024-05-31T16:07:15.856062Z"
    },
    "papermill": {
     "duration": 0.091158,
     "end_time": "2024-05-31T16:07:15.859989",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.768831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.55584489, 0.        , 0.44415511])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "risk_free_rate = 0.06\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "optimal_weights"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4febed2",
   "metadata": {
    "papermill": {
     "duration": 0.037514,
     "end_time": "2024-05-31T16:07:15.935621",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.898107",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ok. Let us verify our formulas for $\\mathbf{w}_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "11a3f210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.014647Z",
     "iopub.status.busy": "2024-05-31T16:07:16.013844Z",
     "iopub.status.idle": "2024-05-31T16:07:16.059522Z",
     "shell.execute_reply": "2024-05-31T16:07:16.057850Z"
    },
    "papermill": {
     "duration": 0.088938,
     "end_time": "2024-05-31T16:07:16.062428",
     "exception": false,
     "start_time": "2024-05-31T16:07:15.973490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "invcov = erk.inverse_df(cov_rets)\n",
    "ones   = np.repeat(1,3) \n",
    "r_rf   = ann_rets - risk_free_rate*ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6c25da2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.201715Z",
     "iopub.status.busy": "2024-05-31T16:07:16.200566Z",
     "iopub.status.idle": "2024-05-31T16:07:16.245747Z",
     "shell.execute_reply": "2024-05-31T16:07:16.244485Z"
    },
    "papermill": {
     "duration": 0.103008,
     "end_time": "2024-05-31T16:07:16.248424",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.145416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.77006501, -0.45767773,  0.68761272])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w_M = np.dot( invcov, r_rf ) / np.dot( ones, np.dot(invcov, r_rf) )\n",
    "w_M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e492513",
   "metadata": {
    "papermill": {
     "duration": 0.037945,
     "end_time": "2024-05-31T16:07:16.324924",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.286979",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Yes, they coincide. We implemented these weights in the following method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9af0e64f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.406647Z",
     "iopub.status.busy": "2024-05-31T16:07:16.405698Z",
     "iopub.status.idle": "2024-05-31T16:07:16.454827Z",
     "shell.execute_reply": "2024-05-31T16:07:16.453123Z"
    },
    "papermill": {
     "duration": 0.093647,
     "end_time": "2024-05-31T16:07:16.459306",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.365659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.77006501, -0.45767773,  0.68761272])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "erk.weigths_max_sharpe_ratio(cov_rets, r_rf).values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a0bfd5f",
   "metadata": {
    "papermill": {
     "duration": 0.052494,
     "end_time": "2024-05-31T16:07:16.593218",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.540724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, let us verify that the portfolio with these weigths has a return and a volatility as in formulas $\\mu_M$ and $\\sigma_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5eea4dc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.672766Z",
     "iopub.status.busy": "2024-05-31T16:07:16.672348Z",
     "iopub.status.idle": "2024-05-31T16:07:16.715401Z",
     "shell.execute_reply": "2024-05-31T16:07:16.714351Z"
    },
    "papermill": {
     "duration": 0.086368,
     "end_time": "2024-05-31T16:07:16.718371",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.632003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33602311037425353"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return: using the portfolio return method\n",
    "mu_M = erk.portfolio_return(w_M, ann_rets)\n",
    "mu_M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1bd3e3de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.797438Z",
     "iopub.status.busy": "2024-05-31T16:07:16.797012Z",
     "iopub.status.idle": "2024-05-31T16:07:16.840598Z",
     "shell.execute_reply": "2024-05-31T16:07:16.839692Z"
    },
    "papermill": {
     "duration": 0.086133,
     "end_time": "2024-05-31T16:07:16.842983",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.756850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3360231103742535"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return: using the formula we found\n",
    "mu_M = np.dot( r_rf, np.dot(invcov, ann_rets) ) / np.dot(ones, np.dot(invcov,r_rf) )\n",
    "mu_M "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "768310bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:16.923889Z",
     "iopub.status.busy": "2024-05-31T16:07:16.923124Z",
     "iopub.status.idle": "2024-05-31T16:07:16.965727Z",
     "shell.execute_reply": "2024-05-31T16:07:16.964499Z"
    },
    "papermill": {
     "duration": 0.084865,
     "end_time": "2024-05-31T16:07:16.968179",
     "exception": false,
     "start_time": "2024-05-31T16:07:16.883314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3308160722463045"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# volatility: using the portfolio vol method\n",
    "sigma_M = erk.annualize_vol( erk.portfolio_volatility(w_M, cov_rets), periods_per_year)\n",
    "sigma_M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4c3251fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.047720Z",
     "iopub.status.busy": "2024-05-31T16:07:17.047047Z",
     "iopub.status.idle": "2024-05-31T16:07:17.091621Z",
     "shell.execute_reply": "2024-05-31T16:07:17.090468Z"
    },
    "papermill": {
     "duration": 0.087651,
     "end_time": "2024-05-31T16:07:17.094320",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.006669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33081607224630444"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# volatility: using the formula\n",
    "sigma_M = np.sqrt( np.dot(r_rf, np.dot(invcov,r_rf)) ) / np.dot(ones, np.dot(invcov,r_rf))\n",
    "sigma_M = erk.annualize_vol(sigma_M , periods_per_year)\n",
    "sigma_M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96d7fb1e",
   "metadata": {
    "papermill": {
     "duration": 0.040592,
     "end_time": "2024-05-31T16:07:17.174890",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.134298",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Perfect. Let us now define the $\\mathbf{w}^*$ weigths of a portfolio which invest in both the risk-free asset and risky assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5e274579",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.257416Z",
     "iopub.status.busy": "2024-05-31T16:07:17.256654Z",
     "iopub.status.idle": "2024-05-31T16:07:17.299886Z",
     "shell.execute_reply": "2024-05-31T16:07:17.298903Z"
    },
    "papermill": {
     "duration": 0.08728,
     "end_time": "2024-05-31T16:07:17.302374",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.215094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.19528999, -0.11606797,  0.17437993])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_ret = 0.13\n",
    "wstar = (target_ret - risk_free_rate) / np.dot(r_rf, np.dot(invcov,r_rf)) * np.dot(invcov,r_rf)             \n",
    "wstar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "993bde34",
   "metadata": {
    "papermill": {
     "duration": 0.039311,
     "end_time": "2024-05-31T16:07:17.381922",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.342611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To these weigths we have to add the weigth in the risk-free asset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ee15eca3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.462784Z",
     "iopub.status.busy": "2024-05-31T16:07:17.462109Z",
     "iopub.status.idle": "2024-05-31T16:07:17.505519Z",
     "shell.execute_reply": "2024-05-31T16:07:17.504304Z"
    },
    "papermill": {
     "duration": 0.086206,
     "end_time": "2024-05-31T16:07:17.508023",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.421817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.19528999, -0.11606797,  0.17437993,  0.74639805])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights = np.concatenate([wstar, [1 - wstar.sum()]])\n",
    "weights"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2a3e152",
   "metadata": {
    "papermill": {
     "duration": 0.038449,
     "end_time": "2024-05-31T16:07:17.585270",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.546821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The last weight is the one in the risk-free asset. \n",
    "The return of such a portfolio is, by definition, equal to the target return:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ae7aa64c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.665088Z",
     "iopub.status.busy": "2024-05-31T16:07:17.664663Z",
     "iopub.status.idle": "2024-05-31T16:07:17.708655Z",
     "shell.execute_reply": "2024-05-31T16:07:17.707227Z"
    },
    "papermill": {
     "duration": 0.087307,
     "end_time": "2024-05-31T16:07:17.711486",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.624179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.13"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ann_rets_with_rf = pd.concat([ann_rets, pd.Series([risk_free_rate])], ignore_index=True)\n",
    "\n",
    "# Calculate the portfolio return\n",
    "mu_p = erk.portfolio_return(weights, ann_rets_with_rf)\n",
    "mu_p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df56006d",
   "metadata": {
    "papermill": {
     "duration": 0.039069,
     "end_time": "2024-05-31T16:07:17.790128",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.751059",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us see the volatility of such a portfolio:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8b690842",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.871455Z",
     "iopub.status.busy": "2024-05-31T16:07:17.870591Z",
     "iopub.status.idle": "2024-05-31T16:07:17.915311Z",
     "shell.execute_reply": "2024-05-31T16:07:17.913819Z"
    },
    "papermill": {
     "duration": 0.088757,
     "end_time": "2024-05-31T16:07:17.918302",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.829545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08389560216839485"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using the portfolio_volatility method\n",
    "erk.annualize_vol( erk.portfolio_volatility(wstar, cov_rets), periods_per_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2c90b7a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:17.999827Z",
     "iopub.status.busy": "2024-05-31T16:07:17.999351Z",
     "iopub.status.idle": "2024-05-31T16:07:18.043237Z",
     "shell.execute_reply": "2024-05-31T16:07:18.042019Z"
    },
    "papermill": {
     "duration": 0.087713,
     "end_time": "2024-05-31T16:07:18.045936",
     "exception": false,
     "start_time": "2024-05-31T16:07:17.958223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08389560216839484"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using the formula\n",
    "sigma_p = erk.annualize_vol( (target_ret - risk_free_rate) / np.sqrt(np.dot(r_rf, np.dot(invcov,r_rf))), periods_per_year )\n",
    "sigma_p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069d655f",
   "metadata": {
    "papermill": {
     "duration": 0.040541,
     "end_time": "2024-05-31T16:07:18.127010",
     "exception": false,
     "start_time": "2024-05-31T16:07:18.086469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Finally, let us verify that all portfolio that are constructed using the weigths $\\mathbf{w}^*$ and $1-\\mathbf{w}^T\\mathbf{1}$ lie on the Capital Market Line. We define a set of target returns, from the original target return of $0.06$ up to the maximum sharpe ratio return $\\mu_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a4b248c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:18.210200Z",
     "iopub.status.busy": "2024-05-31T16:07:18.209375Z",
     "iopub.status.idle": "2024-05-31T16:07:18.262701Z",
     "shell.execute_reply": "2024-05-31T16:07:18.261451Z"
    },
    "papermill": {
     "duration": 0.098457,
     "end_time": "2024-05-31T16:07:18.265422",
     "exception": false,
     "start_time": "2024-05-31T16:07:18.166965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([ 0.19528999, -0.11606797,  0.17437993,  0.74639805]),\n",
       " array([ 0.22554131, -0.13404743,  0.20139218,  0.70711394]),\n",
       " array([ 0.25579262, -0.15202689,  0.22840443,  0.66782983]),\n",
       " array([ 0.28604394, -0.17000635,  0.25541669,  0.62854572]),\n",
       " array([ 0.31629526, -0.18798581,  0.28242894,  0.58926162]),\n",
       " array([ 0.34654657, -0.20596527,  0.30944119,  0.54997751]),\n",
       " array([ 0.37679789, -0.22394473,  0.33645344,  0.5106934 ]),\n",
       " array([ 0.40704921, -0.24192419,  0.3634657 ,  0.47140929]),\n",
       " array([ 0.43730052, -0.25990366,  0.39047795,  0.43212518]),\n",
       " array([ 0.46755184, -0.27788312,  0.4174902 ,  0.39284108]),\n",
       " array([ 0.49780316, -0.29586258,  0.44450245,  0.35355697]),\n",
       " array([ 0.52805447, -0.31384204,  0.4715147 ,  0.31427286]),\n",
       " array([ 0.55830579, -0.3318215 ,  0.49852696,  0.27498875]),\n",
       " array([ 0.58855711, -0.34980096,  0.52553921,  0.23570465]),\n",
       " array([ 0.61880842, -0.36778042,  0.55255146,  0.19642054]),\n",
       " array([ 0.64905974, -0.38575988,  0.57956371,  0.15713643]),\n",
       " array([ 0.67931106, -0.40373935,  0.60657597,  0.11785232]),\n",
       " array([ 0.70956237, -0.42171881,  0.63358822,  0.07856822]),\n",
       " array([ 0.73981369, -0.43969827,  0.66060047,  0.03928411]),\n",
       " array([ 7.70065006e-01, -4.57677729e-01,  6.87612723e-01,  1.11022302e-16])]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_ret_vec = np.linspace(target_ret,mu_M,20)\n",
    "wstar = [ (tr - risk_free_rate) / np.dot(r_rf, np.dot(invcov,r_rf)) * np.dot(invcov,r_rf) for tr in target_ret_vec ]         \n",
    "wstar = [ np.append(wstar[i], 1-wstar[i].sum()) for i in range(len(wstar)) ]\n",
    "wstar "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ee2a712d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:18.347803Z",
     "iopub.status.busy": "2024-05-31T16:07:18.347400Z",
     "iopub.status.idle": "2024-05-31T16:07:18.397296Z",
     "shell.execute_reply": "2024-05-31T16:07:18.396190Z"
    },
    "papermill": {
     "duration": 0.094634,
     "end_time": "2024-05-31T16:07:18.400142",
     "exception": false,
     "start_time": "2024-05-31T16:07:18.305508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0.13,\n",
       "  0.14084332159864493,\n",
       "  0.15168664319728983,\n",
       "  0.16252996479593476,\n",
       "  0.1733732863945797,\n",
       "  0.1842166079932246,\n",
       "  0.19505992959186952,\n",
       "  0.2059032511905145,\n",
       "  0.2167465727891594,\n",
       "  0.22758989438780425,\n",
       "  0.23843321598644918,\n",
       "  0.2492765375850941,\n",
       "  0.26011985918373903,\n",
       "  0.27096318078238396,\n",
       "  0.2818065023810289,\n",
       "  0.29264982397967376,\n",
       "  0.30349314557831875,\n",
       "  0.3143364671769636,\n",
       "  0.32517978877560855,\n",
       "  0.3360231103742535],\n",
       " [0.08389560216839484,\n",
       "  0.09689141638302168,\n",
       "  0.10988723059764847,\n",
       "  0.1228830448122753,\n",
       "  0.1358788590269021,\n",
       "  0.14887467324152892,\n",
       "  0.16187048745615576,\n",
       "  0.1748663016707826,\n",
       "  0.1878621158854094,\n",
       "  0.20085793010003622,\n",
       "  0.21385374431466306,\n",
       "  0.22684955852928984,\n",
       "  0.23984537274391668,\n",
       "  0.25284118695854346,\n",
       "  0.26583700117317033,\n",
       "  0.2788328153877971,\n",
       "  0.291828629602424,\n",
       "  0.30482444381705076,\n",
       "  0.3178202580316776,\n",
       "  0.3308160722463044])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ann_rets_with_rf = pd.concat([ann_rets, pd.Series([risk_free_rate])], ignore_index=True)\n",
    "\n",
    "# Calculate portfolio returns using the concatenated returns\n",
    "mus = [erk.portfolio_return(wstar[i], ann_rets_with_rf) for i in range(len(wstar))]\n",
    "\n",
    "# Calculate annualized volatilities\n",
    "sigmas = [\n",
    "    erk.annualize_vol((tr - risk_free_rate) / np.sqrt(np.dot(r_rf, np.dot(invcov, r_rf))), periods_per_year) \n",
    "    for tr in target_ret_vec\n",
    "]\n",
    "\n",
    "mus, sigmas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b82e6a43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T16:07:18.483777Z",
     "iopub.status.busy": "2024-05-31T16:07:18.483328Z",
     "iopub.status.idle": "2024-05-31T16:07:18.756991Z",
     "shell.execute_reply": "2024-05-31T16:07:18.755622Z"
    },
    "papermill": {
     "duration": 0.318526,
     "end_time": "2024-05-31T16:07:18.759728",
     "exception": false,
     "start_time": "2024-05-31T16:07:18.441202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "CML = pd.concat([pd.DataFrame(sigmas),pd.DataFrame(mus)], axis=1) \n",
    "CML.columns = [\"sigma\",\"mu\"]\n",
    "CML.plot.line(x=\"sigma\", y=\"mu\", grid=True, legend=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22017fac",
   "metadata": {
    "papermill": {
     "duration": 0.040128,
     "end_time": "2024-05-31T16:07:18.841249",
     "exception": false,
     "start_time": "2024-05-31T16:07:18.801121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5000375,
     "sourceId": 8527557,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 75.669567,
   "end_time": "2024-05-31T16:07:19.704152",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-31T16:06:04.034585",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
