{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c2f3be00",
   "metadata": {
    "papermill": {
     "duration": 0.026647,
     "end_time": "2024-05-31T19:59:31.141210",
     "exception": false,
     "start_time": "2024-05-31T19:59:31.114563",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "\n",
    "Modern portfolio theory (MPT), or mean-variance analysis, is a mathematical framework for assembling a portfolio of assets such that the expected return is maximized for a given level of risk. It is a formalization and extension of diversification in investing, the idea that owning different kinds of financial assets is less risky than owning only one type. Its key insight is that an asset's risk and return should not be assessed by itself, but by how it contributes to a portfolio's overall risk and return. The variance of return (or its transformation, the standard deviation) is used as a measure of risk, because it is tractable when assets are combined into portfolios. Often, the historical variance and covariance of returns is used as a proxy for the forward-looking versions of these quantities, but other, more sophisticated methods are available.\n",
    "\n",
    "\n",
    "Economist Harry Markowitz introduced MPT in a 1952 essay, for which he was later awarded a Nobel Memorial Prize in Economic Sciences; see Markowitz model.\n",
    "\n",
    "In 1940, Bruno de Finetti published the mean-variance analysis method, in the context of proportional reinsurance, under a stronger assumption. The paper was obscure and only became known to economists of the English-speaking world in 2006.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b99ffe7a",
   "metadata": {
    "papermill": {
     "duration": 0.02724,
     "end_time": "2024-05-31T19:59:31.195542",
     "exception": false,
     "start_time": "2024-05-31T19:59:31.168302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Table of Contnets\n",
    "\n",
    "* [The limits of Portfolio diversification](#The-limits-of-Portfolio-diversification)\n",
    "* [Rolling returns](#Rolling-returns)\n",
    "    - [Rolling correlations: multi-indices and groupby](#Rolling-correlations)\n",
    "* [Risk insurance strategies](#Risk-insurance-strategies)\n",
    "    - [Constant Proportion Portfolio Insurance (CPPI)](#Constant-Proportion-Portfolio-Insurance (CPPI))\n",
    "    - [Implementing CPPI with Drawdown constraint](#Implementing-CPPI-with-Drawdown-constraint)\n",
    "    - [Implementing the drawdown constraint](#Implementing-the-drawdown-constraint)\n",
    "    - [Random walk generation - Geometric Brownian Motion](#Random-walk-generation)\n",
    "        - [Geometric Brownian Motion](#Geometric-Brownian-Motion)\n",
    "        - [Interactive random walk simulation](#Interactive-random-walk-simulation)\n",
    "        - [Interactive CPPI simulation - Monte Carlo](#Interactive-CPPI-simulation)\n",
    "* [Conclusion](#Conclusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9aa0eef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T19:59:31.253221Z",
     "iopub.status.busy": "2024-05-31T19:59:31.252785Z",
     "iopub.status.idle": "2024-05-31T20:00:17.809510Z",
     "shell.execute_reply": "2024-05-31T20:00:17.807981Z"
    },
    "papermill": {
     "duration": 46.588066,
     "end_time": "2024-05-31T20:00:17.812446",
     "exception": false,
     "start_time": "2024-05-31T19:59:31.224380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance\r\n",
      "  Downloading yfinance-0.2.40-py2.py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: pandas>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.2.2)\r\n",
      "Requirement already satisfied: numpy>=1.16.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.26.4)\r\n",
      "Requirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.31.0)\r\n",
      "Collecting multitasking>=0.0.7 (from yfinance)\r\n",
      "  Downloading multitasking-0.0.11-py3-none-any.whl.metadata (5.5 kB)\r\n",
      "Requirement already satisfied: lxml>=4.9.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (5.2.1)\r\n",
      "Requirement already satisfied: platformdirs>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from yfinance) (4.2.0)\r\n",
      "Requirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2023.3.post1)\r\n",
      "Requirement already satisfied: frozendict>=2.3.4 in /opt/conda/lib/python3.10/site-packages (from yfinance) (2.4.2)\r\n",
      "Collecting peewee>=3.16.2 (from yfinance)\r\n",
      "  Downloading peewee-3.17.5.tar.gz (3.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m43.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \bdone\r\n",
      "\u001b[?25h  Getting requirements to build wheel ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (4.12.2)\r\n",
      "Requirement already satisfied: html5lib>=1.1 in /opt/conda/lib/python3.10/site-packages (from yfinance) (1.1)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\r\n",
      "Requirement already satisfied: six>=1.9 in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\r\n",
      "Requirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2023.4)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.31->yfinance) (2024.2.2)\r\n",
      "Downloading yfinance-0.2.40-py2.py3-none-any.whl (73 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.5/73.5 kB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading multitasking-0.0.11-py3-none-any.whl (8.5 kB)\r\n",
      "Building wheels for collected packages: peewee\r\n",
      "  Building wheel for peewee (pyproject.toml) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \bdone\r\n",
      "\u001b[?25h  Created wheel for peewee: filename=peewee-3.17.5-cp310-cp310-linux_x86_64.whl size=293378 sha256=ce6aabb855007643a29a80fa76b8726c18a5680e7c870071891b4630ea51e7b0\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/06/80/9b/98db0d58349a2f5c09f8406789ade4270762f97b7d26f2fa22\r\n",
      "Successfully built peewee\r\n",
      "Installing collected packages: peewee, multitasking, yfinance\r\n",
      "Successfully installed multitasking-0.0.11 peewee-3.17.5 yfinance-0.2.40\r\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8f11dd2",
   "metadata": {
    "papermill": {
     "duration": 0.030409,
     "end_time": "2024-05-31T20:00:17.874187",
     "exception": false,
     "start_time": "2024-05-31T20:00:17.843778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Load Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eb3233ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:17.938841Z",
     "iopub.status.busy": "2024-05-31T20:00:17.938382Z",
     "iopub.status.idle": "2024-05-31T20:00:21.118945Z",
     "shell.execute_reply": "2024-05-31T20:00:21.117665Z"
    },
    "papermill": {
     "duration": 3.217089,
     "end_time": "2024-05-31T20:00:21.121992",
     "exception": false,
     "start_time": "2024-05-31T20:00:17.904903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats \n",
    "from pandas_datareader import data \n",
    "from datetime import datetime\n",
    "from scipy.optimize import minimize\n",
    "import yfinance as yf\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66960779",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:21.191609Z",
     "iopub.status.busy": "2024-05-31T20:00:21.191015Z",
     "iopub.status.idle": "2024-05-31T20:00:21.244916Z",
     "shell.execute_reply": "2024-05-31T20:00:21.243018Z"
    },
    "papermill": {
     "duration": 0.094111,
     "end_time": "2024-05-31T20:00:21.248480",
     "exception": false,
     "start_time": "2024-05-31T20:00:21.154369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "18c316b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:21.318370Z",
     "iopub.status.busy": "2024-05-31T20:00:21.317941Z",
     "iopub.status.idle": "2024-05-31T20:00:23.529274Z",
     "shell.execute_reply": "2024-05-31T20:00:23.527860Z"
    },
    "papermill": {
     "duration": 2.249659,
     "end_time": "2024-05-31T20:00:23.532255",
     "exception": false,
     "start_time": "2024-05-31T20:00:21.282596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(1, '/kaggle/input/edhec-investment-management-datasets')\n",
    "import edhec_risk_kit as erk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d83e9f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:23.600070Z",
     "iopub.status.busy": "2024-05-31T20:00:23.599370Z",
     "iopub.status.idle": "2024-05-31T20:00:23.651902Z",
     "shell.execute_reply": "2024-05-31T20:00:23.649769Z"
    },
    "papermill": {
     "duration": 0.092559,
     "end_time": "2024-05-31T20:00:23.655463",
     "exception": false,
     "start_time": "2024-05-31T20:00:23.562904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# using seaborn style (type plt.style.available to see available styles)\n",
    "plt.style.use(\"seaborn-dark\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e00be568",
   "metadata": {
    "papermill": {
     "duration": 0.033057,
     "end_time": "2024-05-31T20:00:23.723039",
     "exception": false,
     "start_time": "2024-05-31T20:00:23.689982",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Modern portfolio theory (MPT)\n",
    "\n",
    "The **Modern portfolio theory (MPT)** is a mathematical framework **for assembling a portfolio of assets such that the expected return is maximized for a given level of volatility**. It is a formalization of **diversification in investing**, i.e., the idea that owning different kinds of financial assets is less risky than owning one signgle asset. \n",
    "\n",
    "### 2.1 Efficient Frontiers \n",
    "\n",
    "In the MPT, the **efficient frontier** is a curve denoting the **efficient** part of the **volatility-return plane**. \n",
    "Formally, it is the set of portfolios that can be constructed with the given input assets \n",
    "that have the maximum expected returns for a fixed level of volatility and, in turn, \n",
    "the lowest volatilities for a fixed level of expected return. The efficient frontier was first formulated by **Harry Markowitz** (1952).\n",
    "\n",
    "We have to construct a portfolio of several assets and **we want to find the optimal percentages of investment to be allocated in these assets** so that, for example, the total (expected) return of such a portfolio is maximixed for a given level of volatility. \n",
    "\n",
    "Suppose **we have $N > 1$ stocks** and we decide to invest our capital in them. \n",
    "Let $\\mathbf{w}:=(w_1,\\dots,w_N)^T$, with $w_i\\in (0,1)$ for all $i=1,\\dots,N$, \n",
    "where each $w_i$ represents the proportion of the investiment \n",
    "(a percentage of the capital invested) in asset $i$. \n",
    "These quantities $w_i$ are the **weights**.\n",
    "\n",
    "Since we invest all of our capital, there holds $\\sum_{i=1}^N w_i = 1$ (this is a **long-only** strategy).\n",
    "\n",
    "Let $R_i$ and $R_p$ be the return of asset $i$ and the total return of the portfolio, respectively. \n",
    "Likewise, let $\\sigma_i$ and $\\sigma_p$ be the volatility of asset $i$ and the volatility of the portfolio, respectively. \n",
    "\n",
    "\n",
    "### 2.2 Return of a portfolio\n",
    "The **total return of the porfolio** is going to be a simple weigthed average of the (total) returns of single assets, i.e.,\n",
    "$$\n",
    "R_p = \\sum_{i=1}^N w_i R_i = \\mathbf{w}^T \\mathbf{R},\n",
    "$$\n",
    "where $\\mathbf{R} := (R_1,\\dots,R_N)^T$. \n",
    "Note that if we have a dataset of **past returns**, the total return $R_p$ is computed as above using the returns of the past data. On the other hand, if we are going to invest now, we do not have a series of true (past) return, but we instead would have **expected returns**. Hence, in this case we would have the maean value $\\mathbb{E}$ in the formula above. \n",
    "\n",
    "\n",
    "### 2.3 Volatility of a portfolio\n",
    "The **volatility of the porfolio** is computed as the (square root of the) variance of the weigthed sum of the returns of single assets. \n",
    "\n",
    "Let us consider an example with only two assets. \n",
    "We have $w_1$ and $w_2$ and two assets whose returns are $R_1$ and $R_2$. We have:\n",
    "$$\n",
    "\\sigma_p^2 =   \\text{Var}(w_1 R_1 + w_2 R_2) = \n",
    "w_1^2 \\text{Var}(R_1) + w_2^2\\text{Var}(R_2) + 2w_1 w_2\\text{Cov}(R_1,R_2) =\n",
    "w_1^2 \\sigma_1^2 + w_2^2\\sigma_2^2 + 2w_1 w_2\\text{Cov}(R_1,R_2), \n",
    "$$\n",
    "where \n",
    "$$\n",
    "\\text{Cov}(R_1,R_2) := \\mathbb{E}[(R_1-\\mu_1)(R_2 - \\mu_2)], \n",
    "$$\n",
    "is the **covariance** between the two assets and $\\mu_i$ and $\\mu_j$ denote \n",
    "their mean returns, respectively. In particular, if we let \n",
    "$$\n",
    "\\rho_{1,2} := \\frac{\\text{Cov}(R_1,R_2)}{\\sigma_1 \\sigma_2}, \n",
    "$$\n",
    "denote the **correlation coefficient** between the assets, \n",
    "then the volatility of a $2$ assets portfolio becomes:\n",
    "$$\n",
    "\\sigma_p = \n",
    "\\sqrt{ w_1^2 \\sigma_1^2 + w_2^2 \\sigma_2^2 + 2w_1 w_2 \\sigma_1 \\sigma_2 \\rho_{1,2} }. \n",
    "$$\n",
    "Note that, using matrix notation, we can write in compact form such a volatility. That is:\n",
    "$$\n",
    "\\sigma_p = \n",
    "\\sqrt{\n",
    "(w_1, w_2)\\, \n",
    "\\begin{pmatrix}\n",
    "\\sigma^2_1 & \\sigma_1 \\sigma_2 \\rho_{12} \\\\\n",
    "\\sigma_1 \\sigma_2 \\rho_{21} & \\sigma^2_2\n",
    "\\end{pmatrix}\n",
    "\\begin{pmatrix}\n",
    "w_1 \\\\\n",
    "w_2 \n",
    "\\end{pmatrix}\n",
    "}\n",
    "=\n",
    "\\sqrt{\n",
    "\\mathbf{w}^T \\Sigma \\mathbf{w}\n",
    "}\n",
    "\\quad\\text{and}\\quad\n",
    "\\Sigma := \n",
    "\\begin{pmatrix}\n",
    "\\sigma^2_1 & \\sigma_1 \\sigma_2 \\rho_{12} \\\\\n",
    "\\sigma_1 \\sigma_2 \\rho_{21} & \\sigma^2_2\n",
    "\\end{pmatrix},\n",
    "$$\n",
    "where $\\Sigma$ is the symmetric square **covariance matrix**.\n",
    "\n",
    "\n",
    "Now, in case of $N$ stocks, let again $\\Sigma = [c_{ij}]$ \n",
    "be the $N\\times N$ covariance matrix \n",
    "where each element $c_{ij} := \\sigma_i \\sigma_j \\rho_{ij}$, for $i,j=1,\\dots,N$, \n",
    "denotes the **covariance** between assets $i$ \n",
    "and asset $j$, \n",
    "and with $\\sigma_i$, $\\sigma_j$, and $\\rho_{ij}$ being the volatilities \n",
    "and the correlation coefficients of assets $i$ and $j$, respectively.\n",
    "Of course, when $i=j$, $c_{ii}=\\sigma_i^2$ is simply the variance of asset $i$ \n",
    "(these are the diagonal entries of the covariance matrix).\n",
    "\n",
    "The volatility of the portfolio is then given by:\n",
    "$$\n",
    "\\sigma_p = \\sqrt{ \\mathbf{w}^T \\Sigma \\mathbf{w} }.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7d13eee",
   "metadata": {
    "papermill": {
     "duration": 0.033067,
     "end_time": "2024-05-31T20:00:23.788019",
     "exception": false,
     "start_time": "2024-05-31T20:00:23.754952",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Efficient frontiers of 2-assets portfolios \n",
    "In the following, we propose an artificial example in order to see the curve that is drawn by different portfolios which \n",
    "are constructed with only $2$ assets with different correlation $\\rho_{12}$. \n",
    "First of all, we assume to generate $500$ **daily returns** of $2$ assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "181bb4bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:23.940012Z",
     "iopub.status.busy": "2024-05-31T20:00:23.939555Z",
     "iopub.status.idle": "2024-05-31T20:00:23.984020Z",
     "shell.execute_reply": "2024-05-31T20:00:23.982804Z"
    },
    "papermill": {
     "duration": 0.080192,
     "end_time": "2024-05-31T20:00:23.987035",
     "exception": false,
     "start_time": "2024-05-31T20:00:23.906843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nret             = 500\n",
    "periods_per_year = 252\n",
    "risk_free_rate   = 0.0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0462824e",
   "metadata": {
    "papermill": {
     "duration": 0.028536,
     "end_time": "2024-05-31T20:00:24.044888",
     "exception": false,
     "start_time": "2024-05-31T20:00:24.016352",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Then, we set up a value for the means and the volatility of our two artifical assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d622b860",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:24.106439Z",
     "iopub.status.busy": "2024-05-31T20:00:24.106017Z",
     "iopub.status.idle": "2024-05-31T20:00:24.150075Z",
     "shell.execute_reply": "2024-05-31T20:00:24.148784Z"
    },
    "papermill": {
     "duration": 0.079742,
     "end_time": "2024-05-31T20:00:24.154270",
     "exception": false,
     "start_time": "2024-05-31T20:00:24.074528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mean_1 = 0.001019\n",
    "mean_2 = 0.001249\n",
    "vol_1  = 0.016317\n",
    "vol_2  = 0.019129"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c4ea86f",
   "metadata": {
    "papermill": {
     "duration": 0.030041,
     "end_time": "2024-05-31T20:00:24.218322",
     "exception": false,
     "start_time": "2024-05-31T20:00:24.188281",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "and we set up $6$ correlations of the two assets, and for every fixed correlation, \n",
    "we will generate $20$ portfolios by allocating $20$ pairs of weights:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "458b3c87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:24.282160Z",
     "iopub.status.busy": "2024-05-31T20:00:24.281644Z",
     "iopub.status.idle": "2024-05-31T20:00:24.343615Z",
     "shell.execute_reply": "2024-05-31T20:00:24.342331Z"
    },
    "papermill": {
     "duration": 0.095883,
     "end_time": "2024-05-31T20:00:24.346578",
     "exception": false,
     "start_time": "2024-05-31T20:00:24.250695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Correlation goes from 1 (completely correlated) to -1 (conversely correlated)\n",
    "rhos  = np.linspace(1,-1,num=6) \n",
    "ncorr = len(rhos)\n",
    "\n",
    "# Pairs of weights to be used to construct the portfolios for any given correlation\n",
    "nweig = 20\n",
    "w1 = np.linspace(0,1,num=nweig)\n",
    "w2 = 1 - np.linspace(0,1,num=nweig)\n",
    "ww = pd.DataFrame( [w1, w2] ).T  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "709e4e33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:24.414703Z",
     "iopub.status.busy": "2024-05-31T20:00:24.414250Z",
     "iopub.status.idle": "2024-05-31T20:00:25.946602Z",
     "shell.execute_reply": "2024-05-31T20:00:25.944531Z"
    },
    "papermill": {
     "duration": 1.568263,
     "end_time": "2024-05-31T20:00:25.950661",
     "exception": false,
     "start_time": "2024-05-31T20:00:24.382398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABY0AAAFzCAYAAABy5iY6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAChvUlEQVR4nOzdd5xU1fnH8c+507aywO7SQQWVItLsiF1ji73lp8ZEjS2xJGpsiRpiwViikmjsRtFojDUqauyJih0Lioj0zha270675/fHwMKyfZndnbn7fec1r7h3zr1zDneeKc+c+xxjrbWIiIiIiIiIiIiIiABOd3dARERERERERERERFKHksYiIiIiIiIiIiIiUk9JYxERERERERERERGpp6SxiIiIiIiIiIiIiNRT0lhERERERERERERE6ilpLCIiIiIiIiIiIiL1lDQWERERERERERERkXpKGouIiIiIiIiIiIhIPSWNRURERERERERERKSeksYiIiIiIiIiIiIiUk9JYxEREREREREREZEU9Mknn3DuuecyZcoURo4cyRtvvNHqPh999BHHHHMMY8eO5aCDDuLZZ59t9+MqaSwiIiIiIiIiIiKSgmpqahg5ciTXXnttm9ovW7aMc845h912240XXniBn/3sZ/z+97/nf//7X7se19+RzoqIiIiIiIiIiIhI59pnn33YZ5992tz+ySefZMiQIVxxxRUAjBgxgs8++4y///3v7LXXXm0+jmYai4iIiIiIiIiIiHjAF198wR577NFg25QpU/jiiy/adRzPzTSOx11KS6u7uxudom/fbM+ODbw9vvaMrbAwt5N70z6KqfTk5bFB+saUl+MJvP2809gSUimewNsxpedc+krXmPJyPIG3n3caW0IqxRN4O6a8/JwDb48vnWMqXUza7e4O7/v5R79MSh+Ki4spKChosK2goICqqirq6urIyMho03E8lzT2+RyMAWu7uyfJZYx3xwbeHl+6jy2d+96SdD8vLfHy2CC9x5eu/W6LdD4vrdHYUlc6970l6X5eWuLlsUF6jy9d+90W6XxeWqOxpa507ntL0v28tMbL4/Py2FKJcUx3dyFpPJc0FhEREREREREREelqxtf9SeOCggKKi4sbbCsuLiYnJ6fNs4xBSWMRERERERERERGRLed0//JxEyZM4L///W+DbR988AETJkxo13G6fyQiIiIiIiIiIiIiac74TIdvzamurmbu3LnMnTsXgOXLlzN37lxWrlwJwG233cZll11W3/4nP/kJy5Yt4+abb2bBggU8/vjjvPLKK/z85z9v11g001hEREREREREREQkBc2ZM4fTTjut/u9p06YBcMwxx3DTTTdRVFTEqlWr6u8fOnQo9957L9OmTePRRx9lwIABXH/99ey1117telwljUVERERERERERES2UGcshLfbbrsxb968Zu+/6aabmtzn+eef36LHVdJYREREREREREREZAulwkJ4yaKksYiIiIiIiIiIiMiWSoGF8JLFOyNJczNnvsiUKTuzatXKpB1z1aqVTJmyMzNnvpi0Y4qkC8WUSPIonkSSSzElkjyKJ5HkUkyJbJnOWAivu3h6pvGKFct5/PFH+OSTjykpKcLvDzBixAj22+8gjjrqGEKhjO7uYlL85z+vUlZWyoknntzdXWnVxx9/yJtv/odvv53DkiWL6devP08/3b43jvfee5eHHrqPxYsX0bt3Hw4//Eh+9rMz8fs9/XROCYqp1PT1119y993T+f7778jOzmH//Q/kqqsub/P+paUlPPDAPXzwwXtUVJTTt28+O+20C1deeU0n9loUT6mpqXg655xfAbkt7rdmzWpefvnfzJr1HsuWLcPnc9hmmxH87Gdnsssuu3VN53s4xVR6+d//OvZ5bsmSxbz88gt8/PFHrFixnKysTLbffhRnnnkOo0aN6aLee5/iKb28+eab3HHHnR3+frRixXLuv/9vfPrpx9TU1NCvXz/222/D+58kg2Iqfbzxxn/49NNZzJ79BcuXL2PChEn89a/3tesYL730PE888RirVq2kX7/+HH/8SRx//E86qceSajqjpnF38WyW7YMP3uPqqy8nEAhyyCGHM3z4CKLRKF999QV3330nixYt5PLLf9fd3UyKN954lYULFzR6YR4wYCBvvvl+SiVTX3/9Vd5883VGjhxJQUFhu/efNet9rrzyUiZO3Ilf//q3LFz4A4888iDr1pVy6aVXdkKPZQPFVGrG1Pz587jool+y9dZbc8EFv2Ht2rU8+eRjrFmzkptuur3V/desWc15550JwNFHH0dBQSHFxUXMnftNZ3e9R1M8pVc8LV++jEceebjFfd97710ef/wR9tprXw455MfE43FeffVlfvObX3Hllddw+OFHdtEoeibFVGrGVHPefffdDn+ee/HF53nppRfYd9/9OeaY46muruKFF57lnHNO59Zbp+tHmiRQPKVXPM2a9T6//e2vO/z9aP78eVxwwTkUFPTjJz85hby83qxZs5q1a9d0Qe9bZq3lq69X8+zz31BWXke/wmx+dOAIthrWu7u71i6KqfSKqeeff5p5875j1KgxlJeXd2D/Z7j11mnsu+/+nHTSKXz55WzuuONW6urqOPXUnye/wyKdKPUjtgNWrlzBtddexYABA7nzznsoKCiov++4405k+fJlfPDBe1v8ONZaIpFwk78KhsNhAoEATjfWMjHGEAqFuu3xm3LOOb/i8st/j9/v57LLfs3ChQvatf9dd93JiBHb8ec//7X+DScrK5sZMx7mhBP+j6222roTei2KqYRUjKl7772L3Nxc/vKXe8nOzgFg4MBB/OlP1/PRRx+y6667t7j/LbfciM/n54EHHiEvr3cX9FgUTwnpFk/vvfceo0aNb3bfiRN35plnXqZ37971244++jhOP/1kHnzwXiWNO5FiKiEVY6o5N998c4c/zx144MGcccbZZGVl1W87/PAjOeWUE3joofuUNN5CiqeEdIqnv/71TkaOHMntt/8Vn6998eS6Ltdddw3Dhm3NX/5yT0rNdo1E4tx483+Z9eFyfD6D61ocx/D0s99y1BEjOfesXXDSYDafYiohnWLq6qv/yOjRIygtrebUU09s177hcB333383kydP4frrbwbgyCOPwVrLI488yJFHHkuvXr06o9uSQlKxzERHebKm8eOPP0ptbQ1XXHF1gxflDYYMGcqJJ/5f/d+xWIy///0BTjzxKPbbbw+OP/4I7r33LiKRSIP9jj/+CC677Nd89NEszjzzpxxwwJ688MKzfP75p0yZsjNvvPEa9913N0cffSgHHjiF6upqAL75Zg4XX3wBBx+8DwccsCfnn382X331Ravj+N//3uG3v72Io446hH333YMDDzyQhx9+gHg8Xt/m/PPP5oMP3mP16lVMmbIzU6bszPHHHwE0Xzfos88+4Ze//AUHHjiFQw7ZlyuuuJjFixc1aPPgg/cyZcrOLF++jBtu+AOHHLIvBx+8DzfeOJW6uroGbcvKyliyZHGj7U0pKCjs8K+LixYtZPHihRx55DENjnHssSdgreXtt9/o0HGldYqp1Iyp6uoqPvnkIw4++ND6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rrjiCowxXHnllW16TO/MmRYRERERERHxiHDc5b+rKqiKukCizMSGesVlkTj/XVVBzPXYSl0iImnOcUyHby15+OGHOfHEEznuuOPYdtttmTp1KhkZGTzzzDNNtp89ezaTJk3iiCOOYMiQIUyZMoUf//jHfPXVV20fS7tGLiIiIiIiIiKdbmFFmLBrm1zYzgLVMZelVeGu7paIiLSgM5LGkUiEb775hsmTJ2/yOA6TJ09m9uzZTe4zceJEvvnmm/ok8bJly3j33XfZZ5992jwWlacQERERERERSTFtSQgvrYqwaxf0RURE2qa1GcMdsW7dOuLxeKMyFPn5+SxcuLDJfY444gjWrVvHySefjLWWWCzGT37yE84999w2P65mGouIiIiIiIikmGgbSk9E4ipPISKSShxjOnxLpo8++oh7772Xa6+9lmeffZa//vWvvPvuu9x1111tPoZmGouIiIiIiIikmJyAj3A41uz9BsgNah6YiIjX9enTB5/PR0lJSYPtJSUlFBQUNLnPnXfeyZFHHskJJ5wAwMiRI6mpqeGaa67hvPPOw3Faf//QO4yIiIiIiIhIihneK9Ti/RYYnpvRNZ0REZE26YyaxsFgkB122IFZs2bVb3Ndl1mzZjFx4sQm96mrq2uUGPb5fABY27arVDTTWERERERERCTFDMkOsqQyzNq6pmcbD80O0i9TX+lFRFKJrxNqGgOcfvrpXH755YwdO5Zx48bxyCOPUFtby7HHHgvAZZddRv/+/bnkkksA2G+//Xj44YcZM2YM48aNY+nSpdx5553st99+9cnj1ugdRkRERERERKQbuNbiAj7AbFbP0jGGyQNy+W5dLQsqw/U1jkOOYbu8DLbPy2i0j4iIdK/OWAgP4LDDDqO0tJTp06dTVFTE6NGjeeCBB+rLU6xatarBzOLzzjsPYwx33HEHa9asoW/fvuy333785je/afNjKmksIiIiIiIi0oWq4y4rInFKYy6QSBr3C/gYHPLh3yQR7DOGHfpmMapPJlXROAC5AV/SF0wSEZHk6MzX51NPPZVTTz21yftmzJjR4G+/38/555/P+eef3+HHU9JYREREREREpIuUx1y+q42yaUXJOLAqGqc0FmdsVpDAZjPVfMaQF9TXdxGRVNdZM427gxbCExEREREREekCrrXMr2uYMN5U2MLScNM1jEVERLqSfqoUERERERER6QJlMZdYK4vWF8dctrK2QZkKERFJD16aaayksYiIiIiIiEgXqHEtBpqdacz6+8Kuxe/zTuJBRKSncDxU00FJYxEREREREZEu4JiWE8b17Tq9JyIi0hl8HrpKREljERERERERkS7Qx++wNBxvsU2GgQwPXd4sItKTqDyFiIiIiIiIiLRLpuPQ1+9QGnObbTM45Md4aKaaiEhP4qWksa56EREREREREekiIzL85K2vV7x5amFY0EdhwNf1nRIREdmMZhqLiIiIiIiIJIkL1AKR9X+HgEw2Joh9xjAqM0CVaymJusStJeQYCgM+Qh6aoSYi0hM5HrpSREljERERERERkSQIAyU0XOyuxhjKraUACKzfZowh12fI9eniXxERL/FSeQoljUVERERERES2UIxNEsabzTRzgWKgP6oRKSLiZUoai4iIiIiIiEi9appOGLN+m2st1UBu13ZLRES6kE9JYxERERERERHZoBaaThhv1kZJYxER7/JSTWNdGSMiIiIiIiKyhWxrDYxpvY2IiEiK0ExjERERERERkS0UAMLWNj/b2Nr6hfBERMSbVNNYREREREREROplA+GWLks2hhyrucYiIl6mpLGIiIiIiIiI1MsAsqylxhjYdMbx+v/OtZZgt/ZQREQ6m5LGIiIiIiIiIj2UxYIBjAXXkPgf9AaC1lIFxNa3DQC51pLZTX0VEZGu46WF8JQ0FhEREREREWkj1+/iBuIbl5W3YGIGJ+LDYMgmUarCtTaRV+6+roqISBfz0kxjp/UmIiIiIiIiIuIG4riheMNMsAHrt8QzY4kZyOs5KGEsIiLpSzONRURERERERFphjcUNuIk/Ns8Gr//bDbj4or4u7ZeIiKQOn4dmGitpLCIiIiIiItIK1++23MCADbjYqLO+wrGIiPQ0qmksIiIiIiIi0pM4tvU23skViIhIB3ipprGSxiIiIiIiIiKtsQZoJXHchryyiIh4l+Oh1eOUNBYRERERERFphRMzxAMtNLBg4kalKUREejAvlafwUP5bREREREREpJO4BmKm6dnE67c5ES2CJyIi3qCZxiIiIiIiIiKtMBh8YR9uKI71243J4/VVK3xhH8Z6Z4aZiIi0n4dKGitpLCIiIiIiItKYxeevIxAqx/FFsa6PaCSHWDgHGzFYn5tIGLtGZSlERATwVnkKJY1FRERERERE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IiLSrQKRZQQjy+sTxZsyWLAxsio/7YaeiYhIKjPG7fCtJaeffjpPPfUUzz33HAsWLOAPf/gDtbW1HHvssQBcdtll3HbbbfXt/+///o+ysjJuuOEGFi1axDvvvMO9997LKaec0uaxtLk8BcDrr7/OQQcdVP/3+++/z6uvvlo/1XnKlCmcdNJJ7TmkiIiIiIiISEoJ1c7D4jRbm9JgCdV9R5U9EFpY8V5ERHqWzqppfNhhh1FaWsr06dMpKipi9OjRPPDAA/XlKVatWoXjbJwbPHDgQB588EGmTZvGkUceSf/+/TnttNM466yz2vyY7UoaP/PMMzz33HNce+219O/fnzFjxnDttdfyox/9iFgsxlNPPcWOO+7YnkOKiIiIiIiIpBTj1kErX/yNja1v42uxnYiISDKceuqpnHrqqU3eN2PGjEbbJk6cyFNPPdXhx2tX0viee+5h5syZnHbaaZx66qlcd9113H333dxxxx3E43EmTZrEBRdc0OHOiIiIiIiIiHS3uC8PMNBEeYoNXCcbjBLGIiKyUWcshNdd2pU0hsR06ClTpnDLLbdw5plnMnXqVK644orO6JuIiIiIiIhIlwtnjyWr+rNm77cYarN1la2IiDTU0oJ26abdSWOAXr16cd111/HJJ59w+eWXM2XKFH79618TCoWS3T8RERERERGRLhX396UmZxeyqj7BkphzvIHFEPf3oS57Und1T0REUpSXZho7rTfZaOXKlVx00UUcccQRXHLJJWy11VY888wzZGZmcuSRR/Luu+92Vj9FREREREREukxN7p5U5e2P6+TUb7P4CGfuQHnBSVgnBG40cRMRESGxEF5Hb6mmXTONL7/8cgoKCvjtb3/Le++9xzXXXMM999zDhRdeyOGHH84111zDs88+y5133tlZ/RURERERERHpfMZQlz2euqxx+GIlGBsj7u+DNUGC674ic9U7+GuWAxDLHEjtgL2J5O8ExrRyYBER8SovzTRuV9J4zpw5vPDCCwwbNoy99tqLAw44oP6+ESNG8Pjjj/PPf/4z6Z0UERERERER6RbGEA8U1P+ZufwVsla9hd2kaIWvdjW5i/5JbfVyaoYdpcSxiIikvXYljXfYYQfuvPNOjjnmGD744AO23377Rm1OOumkpHVOREREREREJFX4KxeTteotAAy2fvuG/85c+z7R3qOJ5o3slv6J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",
      "text/plain": [
       "<Figure size 2000x400 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set seed\n",
    "np.random.seed(1)\n",
    "\n",
    "# Assuming these variables are defined elsewhere in your script\n",
    "# rhos, vol_1, vol_2, mean_1, mean_2, nret, ww, annualize_rets, portfolio_return,\n",
    "# portfolio_volatility, annualize_vol, sharpe_ratio, risk_free_rate, periods_per_year, w2\n",
    "\n",
    "# Open the figure\n",
    "fig, ax = plt.subplots(1, 6, figsize=(20, 4))\n",
    "ax = ax.flatten()\n",
    "\n",
    "for k_rho, rho in enumerate(rhos):\n",
    "    # Allocate an empty portfolio\n",
    "    portfolio = pd.DataFrame(columns=[\"return\", \"volatility\", \"sharpe ratio\"])\n",
    "\n",
    "    # Generate the assets' returns with the given correlation rho\n",
    "    cov_ij = rho * vol_1 * vol_2\n",
    "    cov_rets = pd.DataFrame([[vol_1 ** 2, cov_ij], [cov_ij, vol_2 ** 2]])\n",
    "    daily_rets = pd.DataFrame(np.random.multivariate_normal((mean_1, mean_2), cov_rets.values, nret))\n",
    "\n",
    "    for i in range(ww.shape[0]):\n",
    "        # Now, construct the portfolio of two asset with correlation rho and weights ww.loc[i]\n",
    "        weights = ww.loc[i]\n",
    "        # here, weights is a column vector (pd.Series)\n",
    "        \n",
    "        # annualized portfolio returns\n",
    "        ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "        portfolio_ret = erk.portfolio_return(weights, ann_rets)\n",
    "        \n",
    "        # annualized portfolio volatility\n",
    "        portfolio_vol = erk.portfolio_volatility(weights, cov_rets)\n",
    "        portfolio_vol = erk.annualize_vol(portfolio_vol, periods_per_year)\n",
    "        \n",
    "        # annualized portfolio sharpe ratio\n",
    "        portfolio_spr = erk.sharpe_ratio(portfolio_ret, risk_free_rate, periods_per_year, v=portfolio_vol)\n",
    "        \n",
    "        # dataframe containing the return, volatility, and the sharpe ratio of the portfolio constructed\n",
    "        new_row = pd.DataFrame({\"return\": [portfolio_ret], \"volatility\": [portfolio_vol], \"sharpe ratio\": [portfolio_spr]})\n",
    "        portfolio = pd.concat([portfolio, new_row], ignore_index=True)\n",
    "\n",
    "    # plot create scatter plot coloured by Sharpe Ratio\n",
    "    im = ax[k_rho].scatter(portfolio[\"volatility\"] * 100, portfolio[\"return\"] * 100, c=w2, cmap='RdYlBu')\n",
    "    ax[k_rho].grid()\n",
    "    ax[k_rho].set_title(\"Correlation: {}\".format(np.round(rho, 2)), y=0.9, loc='left')\n",
    "    ax[k_rho].set_xlabel(\"volatility (%)\")\n",
    "    if k_rho == 0:\n",
    "        ax[k_rho].set_ylabel(\"return (%)\")\n",
    "    ax[k_rho].set_xlim([0, 32])\n",
    "    ax[k_rho].set_ylim([0, 95])\n",
    "\n",
    "fig.colorbar(im, ax=ax.ravel().tolist())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5384417d",
   "metadata": {
    "papermill": {
     "duration": 0.031157,
     "end_time": "2024-05-31T20:00:26.013566",
     "exception": false,
     "start_time": "2024-05-31T20:00:25.982409",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For any given correlation, each point represents the pair (return, volatility) of a portfolio constructed with some percentage allocation. \n",
    "This can be seen in the colorbar: **red corresponds to $\\mathbf{w} = (1,0)$**, i.e., allocation of money only to the first asset, whereas \n",
    "**blue corresponds to $\\mathbf{w} = (0,1)$**, i.e., allocation of money only ot the second asset.  \n",
    "\n",
    "We can see that **the lower the correlation between the assets, the better the trade-off between return and volatility**: in this example, \n",
    "when $\\rho=-1$, we could in principle construct a portfolio which guarantees about $30\\%$ of return with almost no volatility."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2442838",
   "metadata": {
    "papermill": {
     "duration": 0.029833,
     "end_time": "2024-05-31T20:00:26.075278",
     "exception": false,
     "start_time": "2024-05-31T20:00:26.045445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 4. Example from the real world: US stocks\n",
    "Now we will get the timeseries of some US economy stocks and see how to construct a portfolio in an efficient way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dce4f6f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:26.143078Z",
     "iopub.status.busy": "2024-05-31T20:00:26.142552Z",
     "iopub.status.idle": "2024-05-31T20:00:27.296715Z",
     "shell.execute_reply": "2024-05-31T20:00:27.294830Z"
    },
    "papermill": {
     "duration": 1.193757,
     "end_time": "2024-05-31T20:00:27.299604",
     "exception": false,
     "start_time": "2024-05-31T20:00:26.105847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n",
      "[*********************100%%**********************]  1 of 1 completed\n",
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "tickers = ['AMZN','KO', 'MSFT']\n",
    "n_assets = len(tickers)\n",
    "\n",
    "stocks = pd.DataFrame()\n",
    "start_date = datetime(2011, 1, 1)\n",
    "end_date = datetime(2019, 1, 1)\n",
    "\n",
    "for stock_name in tickers:\n",
    "    # daily data\n",
    "    data = yf.download(stock_name, start=start_date, end=end_date)\n",
    "    stocks[stock_name] = data[\"Adj Close\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "62ddfef7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:27.371840Z",
     "iopub.status.busy": "2024-05-31T20:00:27.371401Z",
     "iopub.status.idle": "2024-05-31T20:00:27.428701Z",
     "shell.execute_reply": "2024-05-31T20:00:27.427485Z"
    },
    "papermill": {
     "duration": 0.097182,
     "end_time": "2024-05-31T20:00:27.431408",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.334226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-24</th>\n",
       "      <td>67.197998</td>\n",
       "      <td>39.005569</td>\n",
       "      <td>89.059944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-26</th>\n",
       "      <td>73.544998</td>\n",
       "      <td>39.837273</td>\n",
       "      <td>95.143623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>73.082001</td>\n",
       "      <td>40.338005</td>\n",
       "      <td>95.730225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>73.901001</td>\n",
       "      <td>40.057926</td>\n",
       "      <td>94.982773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>75.098503</td>\n",
       "      <td>40.185234</td>\n",
       "      <td>96.099213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 AMZN         KO       MSFT\n",
       "Date                                       \n",
       "2018-12-24  67.197998  39.005569  89.059944\n",
       "2018-12-26  73.544998  39.837273  95.143623\n",
       "2018-12-27  73.082001  40.338005  95.730225\n",
       "2018-12-28  73.901001  40.057926  94.982773\n",
       "2018-12-31  75.098503  40.185234  96.099213"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stocks.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "678f31a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:27.501941Z",
     "iopub.status.busy": "2024-05-31T20:00:27.501530Z",
     "iopub.status.idle": "2024-05-31T20:00:27.555159Z",
     "shell.execute_reply": "2024-05-31T20:00:27.554037Z"
    },
    "papermill": {
     "duration": 0.092762,
     "end_time": "2024-05-31T20:00:27.557647",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.464885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-12-24</th>\n",
       "      <td>-0.024313</td>\n",
       "      <td>-0.033845</td>\n",
       "      <td>-0.041739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-26</th>\n",
       "      <td>0.094452</td>\n",
       "      <td>0.021323</td>\n",
       "      <td>0.068310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>-0.006295</td>\n",
       "      <td>0.012569</td>\n",
       "      <td>0.006165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>0.011207</td>\n",
       "      <td>-0.006943</td>\n",
       "      <td>-0.007808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>0.016204</td>\n",
       "      <td>0.003178</td>\n",
       "      <td>0.011754</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                AMZN        KO      MSFT\n",
       "Date                                    \n",
       "2018-12-24 -0.024313 -0.033845 -0.041739\n",
       "2018-12-26  0.094452  0.021323  0.068310\n",
       "2018-12-27 -0.006295  0.012569  0.006165\n",
       "2018-12-28  0.011207 -0.006943 -0.007808\n",
       "2018-12-31  0.016204  0.003178  0.011754"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the daily returns \n",
    "daily_rets = erk.compute_returns(stocks)\n",
    "daily_rets.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "668a2264",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:27.628696Z",
     "iopub.status.busy": "2024-05-31T20:00:27.628251Z",
     "iopub.status.idle": "2024-05-31T20:00:27.682945Z",
     "shell.execute_reply": "2024-05-31T20:00:27.681611Z"
    },
    "papermill": {
     "duration": 0.092251,
     "end_time": "2024-05-31T20:00:27.685556",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.593305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AMZN</th>\n",
       "      <th>KO</th>\n",
       "      <th>MSFT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AMZN</th>\n",
       "      <td>0.000397</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>0.000137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KO</th>\n",
       "      <td>0.000047</td>\n",
       "      <td>0.000082</td>\n",
       "      <td>0.000049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSFT</th>\n",
       "      <td>0.000137</td>\n",
       "      <td>0.000049</td>\n",
       "      <td>0.000213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          AMZN        KO      MSFT\n",
       "AMZN  0.000397  0.000047  0.000137\n",
       "KO    0.000047  0.000082  0.000049\n",
       "MSFT  0.000137  0.000049  0.000213"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the mean daily returns and the covariance of daily returns of the two assets\n",
    "mean_rets = daily_rets.mean()\n",
    "std_rets  = daily_rets.std()\n",
    "cov_rets  = daily_rets.cov()\n",
    "cov_rets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd0ac493",
   "metadata": {
    "papermill": {
     "duration": 0.033092,
     "end_time": "2024-05-31T20:00:27.754054",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.720962",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we simulate $4000$ portfolios with weights allocated to the stocks above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "225aaf96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:27.822417Z",
     "iopub.status.busy": "2024-05-31T20:00:27.822010Z",
     "iopub.status.idle": "2024-05-31T20:00:27.870305Z",
     "shell.execute_reply": "2024-05-31T20:00:27.869142Z"
    },
    "papermill": {
     "duration": 0.085162,
     "end_time": "2024-05-31T20:00:27.873097",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.787935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "periods_per_year = 252\n",
    "num_portfolios   = 4000\n",
    "portfolios       = pd.DataFrame(columns=[\"return\",\"volatility\",\"sharpe ratio\",\"w1\",\"w2\",\"w3\"])\n",
    "risk_free_rate   = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5d3acd99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:27.944673Z",
     "iopub.status.busy": "2024-05-31T20:00:27.944227Z",
     "iopub.status.idle": "2024-05-31T20:00:35.856809Z",
     "shell.execute_reply": "2024-05-31T20:00:35.854991Z"
    },
    "papermill": {
     "duration": 7.952108,
     "end_time": "2024-05-31T20:00:35.859785",
     "exception": false,
     "start_time": "2024-05-31T20:00:27.907677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(num_portfolios):\n",
    "    # Select random weights\n",
    "    weights = np.random.random(n_assets)\n",
    "    # Rescale them to sum to 1\n",
    "    weights /= np.sum(weights)\n",
    "    \n",
    "    # Annualized portfolio returns\n",
    "    ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "    portfolio_ret = erk.portfolio_return(weights, ann_rets)\n",
    "    \n",
    "    # Annualized portfolio volatility\n",
    "    portfolio_vol = erk.portfolio_volatility(weights, cov_rets)\n",
    "    portfolio_vol = erk.annualize_vol(portfolio_vol, periods_per_year)\n",
    "    \n",
    "    # Annualized portfolio Sharpe ratio\n",
    "    portfolio_spr = erk.sharpe_ratio(portfolio_ret, risk_free_rate, periods_per_year, v=portfolio_vol)\n",
    "    \n",
    "    # Create a new DataFrame row\n",
    "    new_row = pd.DataFrame({\n",
    "        \"return\": [portfolio_ret], \n",
    "        \"volatility\": [portfolio_vol], \n",
    "        \"sharpe ratio\": [portfolio_spr],\n",
    "        \"w1\": [weights[0]], \n",
    "        \"w2\": [weights[1]], \n",
    "        \"w3\": [weights[2]]\n",
    "    })\n",
    "    \n",
    "    # Concatenate the new row to the portfolios DataFrame\n",
    "    portfolios = pd.concat([portfolios, new_row], ignore_index=True)\n",
    "\n",
    "# Ensure portfolios DataFrame is rounded to 2 decimal places\n",
    "portfolios = portfolios.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19e1abb2",
   "metadata": {
    "papermill": {
     "duration": 0.037216,
     "end_time": "2024-05-31T20:00:35.934873",
     "exception": false,
     "start_time": "2024-05-31T20:00:35.897657",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we create a scatter plot coloured by sharpe ratios of the portfolios generated above and we also plot the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5f592b09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:36.011758Z",
     "iopub.status.busy": "2024-05-31T20:00:36.011109Z",
     "iopub.status.idle": "2024-05-31T20:00:37.039112Z",
     "shell.execute_reply": "2024-05-31T20:00:37.037435Z"
    },
    "papermill": {
     "duration": 1.068601,
     "end_time": "2024-05-31T20:00:37.042047",
     "exception": false,
     "start_time": "2024-05-31T20:00:35.973446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1, figsize=(10,6)) \n",
    "\n",
    "im = ax.scatter(portfolios[\"volatility\"], portfolios[\"return\"], c=portfolios[\"sharpe ratio\"], s=20, edgecolor=None, cmap='RdYlBu')\n",
    "ax.set_title(\"Portfolios and efficient frontier\")\n",
    "ax.set_xlabel(\"volatility\")\n",
    "ax.set_ylabel(\"return\")\n",
    "ax.grid()\n",
    "\n",
    "# Draw the efficient frontier\n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.set_xlim([0.125,0.33])\n",
    "\n",
    "fig.colorbar(im, ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66480e75",
   "metadata": {
    "papermill": {
     "duration": 0.034096,
     "end_time": "2024-05-31T20:00:37.109318",
     "exception": false,
     "start_time": "2024-05-31T20:00:37.075222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**We will come back to the plot of the efficient frontier below**.\n",
    "\n",
    "We can see that if the investor is targeting **a return of $20\\%$** he could simply hold \n",
    "a portfolio **with volatility of about $17.5\\%$**, although there are many other portfolios that \n",
    "can guarantee the same return but with much higher volatilities such as $22.5\\%$. \n",
    "It is clear that one should carefully choose the weights of the portfolio. \n",
    "\n",
    "We can see, in particular, that there are **two important** portfolios:\n",
    "\n",
    "1. the **portfolio with the Global Minimum Volatility (GMV)**, i.e., the global minimum variance portfolio\n",
    "2. the **portfolio with the Maximum Sharpe Ratio (MSR)**.\n",
    "\n",
    "From the code above we can easily locate these two portfolios in our dataframe by looking at the lowest volatility and highest sharpe ratio \n",
    "and and recover the corresponding weights that have been stored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3b5cd3f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:37.177140Z",
     "iopub.status.busy": "2024-05-31T20:00:37.176712Z",
     "iopub.status.idle": "2024-05-31T20:00:37.226771Z",
     "shell.execute_reply": "2024-05-31T20:00:37.225486Z"
    },
    "papermill": {
     "duration": 0.087569,
     "end_time": "2024-05-31T20:00:37.229593",
     "exception": false,
     "start_time": "2024-05-31T20:00:37.142024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Global Minimum Volatility portfolio:\n",
      "- return      : 13.00%\n",
      "- volatility  : 14.00%\n",
      "- sharpe ratio: 0.92\n",
      "Maximum Sharpe Ratio portfolio:\n",
      "- return      : 22.00%\n",
      "- volatility  : 20.00%\n",
      "- sharpe ratio: 1.09\n"
     ]
    }
   ],
   "source": [
    "# find the portfolio with lowest volatility \n",
    "low_vol_portfolio = portfolios.iloc[ portfolios['volatility'].idxmin() ]\n",
    "print(\"Global Minimum Volatility portfolio:\")\n",
    "print(\"- return      : {:.2f}%\".format(low_vol_portfolio[0]*100) )\n",
    "print(\"- volatility  : {:.2f}%\".format(low_vol_portfolio[1]*100) )\n",
    "print(\"- sharpe ratio: {:.2f}\".format(low_vol_portfolio[2]) )\n",
    "\n",
    "# find the portfolio with highest sharpe ratio\n",
    "high_sharpe_portfolio = portfolios.iloc[ portfolios['sharpe ratio'].idxmax() ]\n",
    "print(\"Maximum Sharpe Ratio portfolio:\")\n",
    "print(\"- return      : {:.2f}%\".format(high_sharpe_portfolio[0]*100) )\n",
    "print(\"- volatility  : {:.2f}%\".format(high_sharpe_portfolio[1]*100) )\n",
    "print(\"- sharpe ratio: {:.2f}\".format(high_sharpe_portfolio[2]) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cabce6f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:37.304635Z",
     "iopub.status.busy": "2024-05-31T20:00:37.304211Z",
     "iopub.status.idle": "2024-05-31T20:00:37.942296Z",
     "shell.execute_reply": "2024-05-31T20:00:37.941007Z"
    },
    "papermill": {
     "duration": 0.680575,
     "end_time": "2024-05-31T20:00:37.945482",
     "exception": false,
     "start_time": "2024-05-31T20:00:37.264907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1, figsize=(10,6)) \n",
    "\n",
    "im = ax.scatter(portfolios[\"volatility\"], portfolios[\"return\"], c=portfolios[\"sharpe ratio\"], s=20, edgecolor=None, label=None, cmap='RdYlBu')\n",
    "ax.set_title(\"Portfolios and efficient frontier\")\n",
    "ax.set_xlabel(\"volatility\")\n",
    "ax.set_ylabel(\"return\")\n",
    "ax.grid()\n",
    "\n",
    "# Draw the efficient frontier\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "\n",
    "ax.scatter(low_vol_portfolio[1],     low_vol_portfolio[0],     marker=\"X\", color='g', s=120, label=\"GMV portfolio\")\n",
    "ax.scatter(high_sharpe_portfolio[1], high_sharpe_portfolio[0], marker=\"X\", color='r', s=120, label=\"MSR portfolio\")\n",
    "\n",
    "ax.set_xlim([0.125,0.33])\n",
    "ax.legend()\n",
    "\n",
    "fig.colorbar(im, ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67aead1f",
   "metadata": {
    "papermill": {
     "duration": 0.039435,
     "end_time": "2024-05-31T20:00:38.020271",
     "exception": false,
     "start_time": "2024-05-31T20:00:37.980836",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us define the following function which we are going to use several time in what follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "688eda83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:38.097005Z",
     "iopub.status.busy": "2024-05-31T20:00:38.096554Z",
     "iopub.status.idle": "2024-05-31T20:00:38.148482Z",
     "shell.execute_reply": "2024-05-31T20:00:38.146461Z"
    },
    "papermill": {
     "duration": 0.092601,
     "end_time": "2024-05-31T20:00:38.151510",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.058909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_portfolio_features(weights, rets, covmat, risk_free_rate, periods_per_year):\n",
    "    # portfolio volatility\n",
    "    vol = erk.portfolio_volatility(weights, covmat)\n",
    "    vol = erk.annualize_vol(vol, periods_per_year)\n",
    "\n",
    "    # portfolio return\n",
    "    ret = erk.portfolio_return(weights, rets)\n",
    "\n",
    "    # portfolio sharpe ratio\n",
    "    shp = erk.sharpe_ratio(ret, risk_free_rate, periods_per_year, v=vol)\n",
    "\n",
    "    print(\"Portfolio return:       {:.2f}%\" .format(ret*100))\n",
    "    print(\"Portfolio volatility:   {:.2f}%\" .format(vol*100))\n",
    "    print(\"Portfolio sharpe ratio: {:.2f}\" .format(shp))\n",
    "    \n",
    "    return ret, vol, shp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b162b911",
   "metadata": {
    "papermill": {
     "duration": 0.036768,
     "end_time": "2024-05-31T20:00:38.225623",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.188855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 5. Finding the optimal portfolios: minimizing the volatility \n",
    "\n",
    "In the experiments above, we found the optimal portfolios, i.e., the ones on the efficient frontier, by **simulating a high number of portfolios** and then plotting them. From the plot we could see what the efficient frontier looked like. \n",
    "However, we can find an optimal portfolio on the efficient frontier by **solving a minimization problem**, \n",
    "for example, by applying the **scipy optimize** method. \n",
    "\n",
    "\n",
    "For example, suppose we want to **find the portfolio (on the efficient frontier) which has the minimum volatility**. \n",
    "Then the minimization problem is:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6796ada4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:38.301254Z",
     "iopub.status.busy": "2024-05-31T20:00:38.300159Z",
     "iopub.status.idle": "2024-05-31T20:00:38.351712Z",
     "shell.execute_reply": "2024-05-31T20:00:38.350283Z"
    },
    "papermill": {
     "duration": 0.093292,
     "end_time": "2024-05-31T20:00:38.354497",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.261205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AMZN    0.300595\n",
       "KO      0.080584\n",
       "MSFT    0.205678\n",
       "dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us see the total (annual) returns of single companies we are investing in\n",
    "ann_rets = erk.annualize_rets(daily_rets, periods_per_year)\n",
    "ann_rets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "535efffd",
   "metadata": {
    "papermill": {
     "duration": 0.035708,
     "end_time": "2024-05-31T20:00:38.425372",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.389664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we can call our minimizer which solves the minimization problem of finding the weights of the portfolio with minimum volatility. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b59912d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:38.498812Z",
     "iopub.status.busy": "2024-05-31T20:00:38.497953Z",
     "iopub.status.idle": "2024-05-31T20:00:38.553584Z",
     "shell.execute_reply": "2024-05-31T20:00:38.551899Z"
    },
    "papermill": {
     "duration": 0.094236,
     "end_time": "2024-05-31T20:00:38.556306",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.462070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 4.76%\n",
      "  KO:   81.77%\n",
      "  MSFT: 13.47%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "957fe92a",
   "metadata": {
    "papermill": {
     "duration": 0.035833,
     "end_time": "2024-05-31T20:00:38.626381",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.590548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us compute the volatility of the portfolio constructed with these weights and locate it on the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bbd8958f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:38.701369Z",
     "iopub.status.busy": "2024-05-31T20:00:38.700893Z",
     "iopub.status.idle": "2024-05-31T20:00:39.359670Z",
     "shell.execute_reply": "2024-05-31T20:00:39.357979Z"
    },
    "papermill": {
     "duration": 0.70008,
     "end_time": "2024-05-31T20:00:39.362662",
     "exception": false,
     "start_time": "2024-05-31T20:00:38.662582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       10.79%\n",
      "Portfolio volatility:   13.84%\n",
      "Portfolio sharpe ratio: 0.78\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='g', s=120, label=\"GMV portfolio\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Minimum volatility portfolio\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b76d785",
   "metadata": {
    "papermill": {
     "duration": 0.037056,
     "end_time": "2024-05-31T20:00:39.435323",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.398267",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can also verify that the minimum volatility portfolio obtained by solving the minimization problem almost coincides \n",
    "with the one obtained from simulating a high number of portfolios as we have done before: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aa444dd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:39.507586Z",
     "iopub.status.busy": "2024-05-31T20:00:39.507117Z",
     "iopub.status.idle": "2024-05-31T20:00:39.556244Z",
     "shell.execute_reply": "2024-05-31T20:00:39.554304Z"
    },
    "papermill": {
     "duration": 0.088536,
     "end_time": "2024-05-31T20:00:39.558893",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.470357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GMV portfolio:\n",
      "\n",
      "- Monte carlo:\n",
      "  return:       13.00%\n",
      "  volatility:   14.00%\n",
      "  sharpe ratio: 0.92\n",
      "\n",
      "- Minimization problem:\n",
      "  return:       10.79%\n",
      "  volatility:   13.84%\n",
      "  sharpe ratio: 0.78\n"
     ]
    }
   ],
   "source": [
    "print(\"GMV portfolio:\\n\")\n",
    "print(\"- Monte carlo:\")\n",
    "print(\"  return:       {:.2f}%\" .format(low_vol_portfolio[0]*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(low_vol_portfolio[1]*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(low_vol_portfolio[2]))\n",
    "print(\"\\n- Minimization problem:\")\n",
    "print(\"  return:       {:.2f}%\" .format(ret*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(vol*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(shp))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7efd30b",
   "metadata": {
    "papermill": {
     "duration": 0.035791,
     "end_time": "2024-05-31T20:00:39.632948",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.597157",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Finding the optimal portfolios: minimizing the volatility given a fixed return\n",
    "\n",
    "What if we want to find the **portfolio (on the efficient frontier) with minimium volatility for a given a level of return**? \n",
    "In this case, we simply have to add a constrain in the minimization problem:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} = R_0, \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "where $R_0$ denotes a fixed level of expected return. For example, suppose we target the following total expected return $R_0=16\\%$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ad28dc6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:39.708010Z",
     "iopub.status.busy": "2024-05-31T20:00:39.707522Z",
     "iopub.status.idle": "2024-05-31T20:00:39.754260Z",
     "shell.execute_reply": "2024-05-31T20:00:39.753119Z"
    },
    "papermill": {
     "duration": 0.089041,
     "end_time": "2024-05-31T20:00:39.757154",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.668113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "target_return = 0.16"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "424e7d21",
   "metadata": {
    "papermill": {
     "duration": 0.035432,
     "end_time": "2024-05-31T20:00:39.828968",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.793536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we can call again the minimizer with the option of solving the problem with the constrain for the given target return:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "989f694a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:39.910062Z",
     "iopub.status.busy": "2024-05-31T20:00:39.909540Z",
     "iopub.status.idle": "2024-05-31T20:00:39.968657Z",
     "shell.execute_reply": "2024-05-31T20:00:39.966305Z"
    },
    "papermill": {
     "duration": 0.105058,
     "end_time": "2024-05-31T20:00:39.972666",
     "exception": false,
     "start_time": "2024-05-31T20:00:39.867608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 17.97%\n",
      "  KO:   50.15%\n",
      "  MSFT: 31.88%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets, target_return)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1270fbb2",
   "metadata": {
    "papermill": {
     "duration": 0.039229,
     "end_time": "2024-05-31T20:00:40.052805",
     "exception": false,
     "start_time": "2024-05-31T20:00:40.013576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us compute the volatility of the portfolio constructed with these weights. \n",
    "Also, we double check that the corresponding return is the target return that we have chosen (i.e., $16\\%$) and \n",
    "locate the portfolio on the efficient frontier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9a2d5f76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:40.130153Z",
     "iopub.status.busy": "2024-05-31T20:00:40.129678Z",
     "iopub.status.idle": "2024-05-31T20:00:40.852635Z",
     "shell.execute_reply": "2024-05-31T20:00:40.851070Z"
    },
    "papermill": {
     "duration": 0.764322,
     "end_time": "2024-05-31T20:00:40.855483",
     "exception": false,
     "start_time": "2024-05-31T20:00:40.091161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       16.00%\n",
      "Portfolio volatility:   15.47%\n",
      "Portfolio sharpe ratio: 1.03\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, target_return,  marker=\"X\", color='g', s=120, label=\"min. volatility port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Minimum Volatility portfolio for given return of $16\\%$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cd7068d",
   "metadata": {
    "papermill": {
     "duration": 0.038366,
     "end_time": "2024-05-31T20:00:40.930952",
     "exception": false,
     "start_time": "2024-05-31T20:00:40.892586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Recall that **the return of a portfolio will be some value between the minimum and the maximum return from the assets composing the portfolio**. That is, given the same three companies, we cannot achieve a return of, say $40\\%$ since the maximum return achievable is about $30\\%$ from Amazon. \n",
    "In fact, if we run the minimizer with a target return equal to $40\\%$ we will get zero weights to all assets but Amazon:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "af7f369f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:41.012159Z",
     "iopub.status.busy": "2024-05-31T20:00:41.011701Z",
     "iopub.status.idle": "2024-05-31T20:00:41.342039Z",
     "shell.execute_reply": "2024-05-31T20:00:41.340331Z"
    },
    "papermill": {
     "duration": 0.372163,
     "end_time": "2024-05-31T20:00:41.345002",
     "exception": false,
     "start_time": "2024-05-31T20:00:40.972839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 100.00%\n",
      "  KO:   0.00%\n",
      "  MSFT: 0.00%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.minimize_volatility(ann_rets, cov_rets, 0.4)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e70bc4a6",
   "metadata": {
    "papermill": {
     "duration": 0.036791,
     "end_time": "2024-05-31T20:00:41.418658",
     "exception": false,
     "start_time": "2024-05-31T20:00:41.381867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Finding the optimal portfolios: maximizing the sharpe ratio \n",
    "\n",
    "Now, consider the case of finding **the portfolio (on the efficient frontier) with the highest sharpe ratio**. \n",
    "\n",
    "Note that scipy offers a **minimize** method, but no a **maximize** a method, and we may then conclude \n",
    "that we are not able to find such a portfolio by solving an optimization problem. \n",
    "However, **the maximization of the sharpe ratio is nothing but the minimization of the negative sharpe ratio**. \n",
    "That is, we have \n",
    "$$\n",
    "\\text{minimize} \\;\\; -  \\frac{R_p - r_f}{\\sigma_p} =: \\text{SR} \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "\n",
    "Let us use our minimizer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "26db1976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:41.495080Z",
     "iopub.status.busy": "2024-05-31T20:00:41.494632Z",
     "iopub.status.idle": "2024-05-31T20:00:41.548915Z",
     "shell.execute_reply": "2024-05-31T20:00:41.547573Z"
    },
    "papermill": {
     "duration": 0.09582,
     "end_time": "2024-05-31T20:00:41.551957",
     "exception": false,
     "start_time": "2024-05-31T20:00:41.456137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 36.91%\n",
      "  KO:   24.76%\n",
      "  MSFT: 38.33%\n"
     ]
    }
   ],
   "source": [
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "abee876b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:41.628691Z",
     "iopub.status.busy": "2024-05-31T20:00:41.628281Z",
     "iopub.status.idle": "2024-05-31T20:00:42.291752Z",
     "shell.execute_reply": "2024-05-31T20:00:42.290364Z"
    },
    "papermill": {
     "duration": 0.707269,
     "end_time": "2024-05-31T20:00:42.295626",
     "exception": false,
     "start_time": "2024-05-31T20:00:41.588357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       20.97%\n",
      "Portfolio volatility:   19.25%\n",
      "Portfolio sharpe ratio: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='r', s=120, label=\"highest sharpe ratio port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio (SR={:.2f})\".format(shp))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e83cae8",
   "metadata": {
    "papermill": {
     "duration": 0.037157,
     "end_time": "2024-05-31T20:00:42.369881",
     "exception": false,
     "start_time": "2024-05-31T20:00:42.332724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "and let us see how these numbers differ from those obtained from the Monte Carlo simulation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7e344b34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:42.448247Z",
     "iopub.status.busy": "2024-05-31T20:00:42.447807Z",
     "iopub.status.idle": "2024-05-31T20:00:42.496821Z",
     "shell.execute_reply": "2024-05-31T20:00:42.495089Z"
    },
    "papermill": {
     "duration": 0.092147,
     "end_time": "2024-05-31T20:00:42.499565",
     "exception": false,
     "start_time": "2024-05-31T20:00:42.407418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSR portfolio:\n",
      "\n",
      "- Monte carlo:\n",
      "  return:       22.00%\n",
      "  volatility:   20.00%\n",
      "  sharpe ratio: 1.09\n",
      "\n",
      "- Minimization problem:\n",
      "  return:       20.97%\n",
      "  volatility:   19.25%\n",
      "  sharpe ratio: 1.09\n"
     ]
    }
   ],
   "source": [
    "print(\"MSR portfolio:\\n\")\n",
    "print(\"- Monte carlo:\")\n",
    "print(\"  return:       {:.2f}%\" .format(high_sharpe_portfolio[0]*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(high_sharpe_portfolio[1]*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(high_sharpe_portfolio[2]))\n",
    "print(\"\\n- Minimization problem:\")\n",
    "print(\"  return:       {:.2f}%\" .format(ret*100))\n",
    "print(\"  volatility:   {:.2f}%\" .format(vol*100))\n",
    "print(\"  sharpe ratio: {:.2f}\" .format(shp))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaa466f8",
   "metadata": {
    "papermill": {
     "duration": 0.039456,
     "end_time": "2024-05-31T20:00:42.579417",
     "exception": false,
     "start_time": "2024-05-31T20:00:42.539961",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 6. Finding the optimal portfolios: maximize the sharpe ratio given a fixed volatility \n",
    "\n",
    "Similarly to what we have done before, we can find the **portfolio (on the efficient frontier) with highest sharpe ratio \n",
    "for a given a level of volatility**. In this case, we simply add a constrain in the minimization problem:\n",
    "$$\n",
    "\\text{minimize} \\;\\; -  \\frac{R_p - r_f}{\\sigma_p} =: \\text{SR} \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} = \\sigma_0, \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} = 1, \\\\\n",
    "0 \\leq \\mathbf{w} \\leq 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "where $\\sigma_0$ denotes a fixed level of volatility. For example, suppose we target the following total volatility of $\\sigma_0=20\\%$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7e33e22d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:42.659533Z",
     "iopub.status.busy": "2024-05-31T20:00:42.659093Z",
     "iopub.status.idle": "2024-05-31T20:00:42.715826Z",
     "shell.execute_reply": "2024-05-31T20:00:42.714101Z"
    },
    "papermill": {
     "duration": 0.101747,
     "end_time": "2024-05-31T20:00:42.718611",
     "exception": false,
     "start_time": "2024-05-31T20:00:42.616864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 39.46%\n",
      "  KO:   20.30%\n",
      "  MSFT: 40.25%\n"
     ]
    }
   ],
   "source": [
    "target_volatility = 0.2\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year, target_volatility)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3ed8c4d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:42.797435Z",
     "iopub.status.busy": "2024-05-31T20:00:42.796977Z",
     "iopub.status.idle": "2024-05-31T20:00:43.506271Z",
     "shell.execute_reply": "2024-05-31T20:00:43.505024Z"
    },
    "papermill": {
     "duration": 0.750469,
     "end_time": "2024-05-31T20:00:43.509226",
     "exception": false,
     "start_time": "2024-05-31T20:00:42.758757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       21.77%\n",
      "Portfolio volatility:   20.00%\n",
      "Portfolio sharpe ratio: 1.09\n"
     ]
    },
    {
     "data": {
      "image/png": "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m790doD82q70ej0mTZqEc+fOYcmSJdnOFtC5c2fo9XqzUz40Gg127NiBWrVqZVkc3759G5s3b8bs2bNNhbuXl5fZVFW3bt166Xmb6bH9+++/Zu158ZmT2ftzQZxzqlarcevWLbPXlrV5Trd//35cvHgRr7/+eoYjG5cvX0bdunWtijW/cM/pS2R1GOt5rVu3xs8//wwnJydUrVoV586dw4kTJ+Dm5mbW7+uvv8aVK1ewYcMGODk5ITAwEG+//TYWL16Mzp07m6atyg9du3bFokWLMG7cOAwdOhSpqanYunUr/Pz8cnwxT2589NFHUKvV6NChAypXrgytVouzZ8/iwIEDKFeuHHr37m3xmDnNe07cv38fb7zxBlq0aIFz585h9+7d6N69u+mb+JQpU3Dq1Cn0798f/fr1Q9WqVfH06VNcunQJoaGhmc7NmFOjRo3CxIkTsWPHDgwcONCi9apRowYA4Msvv0TXrl2hUCjQpk2bTJczadIknDhxAoMGDcKgQYMgk8nw/fffQ6PRZDvFz/Nelqe8Wo4l65VXy8zP8fJrTMB4keXx48cxcOBADBw4EAaDAZs3b0a1atVydO90hUKBDh06YN++fVCr1Zg+fXqGPvm5/VsTT25ymdPXV1bboLU3Q8jJeL169cKECRMAGKcSy4n82K4WLFiA3377DW3atEF8fDx+/vlns8d79uxp+rlWrVro3LkzvvjiC8TGxqJixYrYuXMnHjx4gI8//jjLZcyfPx9du3Y1TYUEGA/jv/XWW6bDz7///ju++eabbGMtX748/P39ERoaanbBbl595rz4/pybc043b96MhIQE017b33//HY8ePQIADB061HQE9cKFCxg2bBjGjRuH8ePHA7Asz6dPn8aKFSvQrFkzuLm54fz589ixYwdatGiRYa/vv//+i/j4eLRr186qdcovLE7zQPqkwXv27EFaWhrq1q2L9evX43//+5+pz6VLl7By5UoMGTLE7PyZMWPG4Ndff8V7772Hffv2ZXlea265u7tj+fLlWLBgAT777DPTHIR37twpkOJ02rRpOHjwIP744w98//330Gq1KFu2LAYNGoQ333zTqvXOSd5zavHixViyZAk+//xzyOVyDBkyBNOmTTM97uXlhR9++AErVqzAkSNHsHXrVri5uaFq1aqYOnWqxct7XseOHVGhQgWsW7cO/fv3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lWwdEhEREVGRweI0j8mS4wAAyU36QVO5no2jISIiIipaeLV+Hktu8ho0FWpBWzbA1qEQERERFTksTvOCEACEaWJ9bblA28ZDREREVETxsH4esLvyJ1x//hTSpDhbh0JERERUpLE4zSVZfCScjm2C8sEVqG6esnU4REREREUai9Pc0OvgfPhrSHQaaMpVh7pWJ1tHRERERFSksTjNBYeze6GIjoBB5YjE9mNM55wSERERkXVYTVlJmhgDh7N7AQBJLYfB4ORh44iIiIiIij4Wp1ZyPLHNeDi/bADSqjW2dThERERExQKLUytINGrIY+5CSCRIajEUkEhsHRIRERFRscB5Tq0glPZ4MuATKB5ehd6rgq3DISIiIio2uOfUWjI5tOWDbR0FERERUbHC4tQSOg1U104Aep2tIyEiIiIqllicWsDueihcfvkGbrs+sXUoRERERMUSi9OcEgbYnzsAAEir0sDGwRAREREVTyxOc0h55wLkTx7CoLRHavXWtg6HiIiIqFhicZpD6XtNU2u0gVDa2zgaIiIiouKJxWkOyB/fhvLBFQipDOqQjrYOh4iIiKjYYnGaA6rrJwAYzzXlbUqJiIiI8g+L0xyQJcYAANKqNrJxJERERETFG+8QlQMJXSZCmhADg4OLrUMhIiIiKtZYnOaQwcXL1iEQERERFXs8rP8ymlRbR0BERERUYrA4zYYsPhJea9+Cy4ElgBC2DoeIiIio2GNxmg151G1IDDpIUxIAicTW4RAREREVeyxOsyGPvQsA0HlVsHEkRERERCUDi9NsyGNYnBIREREVJBan2ZDH3AMA6DxZnBIREREVBBanWZCkPIVU/RQCEug8fW0dDhEREVGJwOI0C/InDwEABhdvQKGycTREREREJQMn4c+CkCuhqRACvbOnrUMhIiIiKjFYnGZBV6oKnvaYauswiIiIiEoUHtYnIiIiokKDxSkRERERFRosTrPgcHoXPFeNgeOJbbYOhYiIiKjEYHGaFYkUUm0qZE8ibR0JERERUYnB4jQLaZVqAwCUdy9CkpZs22CIiIiISggWp1nQe5aHzr0cJAYdlOH/2DocIiIiohKBxWlWJBKk+TcGANjdOGnjYIiIiIhKBhan2UitaixOFfcvQZLy1MbREBERERV/LE6zYXArBa1PZUiEgOrWaVuHQ0RERFTsWVWcbtmyBW3btkXN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",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "\n",
    "# Draw the efficient frontier\n",
    "fig, ax = plt.subplots(1,1, figsize=(8,4)) \n",
    "df = erk.efficient_frontier(50, daily_rets, cov_rets, periods_per_year)\n",
    "df.plot.line(x=\"volatility\", y=\"return\", style=\"--\", color=\"coral\", ax=ax, grid=True, label=\"Efficient frontier\")\n",
    "ax.scatter(vol, ret,  marker=\"X\", color='r', s=120, label=\"highes sharpe ratio port.\")\n",
    "ax.set_xlim([0.13,0.33])\n",
    "ax.legend()\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio for given volatility of $20\\%$ (SR={:.2f})\".format(shp))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c383776f",
   "metadata": {
    "papermill": {
     "duration": 0.038373,
     "end_time": "2024-05-31T20:00:43.587481",
     "exception": false,
     "start_time": "2024-05-31T20:00:43.549108",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 7. Observation on constraints\n",
    "\n",
    "It is worth mentioning that so far we have decided to invest all of our capital and, at the same time, our strategy has been **long-only**. That is, the weights that we allocate to the assets sum to $1$ \n",
    "and all of them are positive (because we **buy** the assets). \n",
    "In particular, these two conditions were imposed when solving the minimization problems. \n",
    "\n",
    "However, **we could in principle not invest all of our capital**, which means that we at do not necessarily \n",
    "get weights that sum to $1$, and also we may decide to not buy all the assets. We could **short selling** some of them (by short shelling we mean selling an asset that we do not have and that we borrow from someone else).\n",
    "\n",
    "#### Short selling and not normalized weigths: minimum volatility portofolio given a fixed return \n",
    "\n",
    "We can solve the minimization problem without imposing the constraint on positive weigths and the constraint that the weights sum to $1$, i.e., simply:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} = R_0, \n",
    "\\end{cases}\n",
    "$$\n",
    "in the case of finding the minimum volatility portfolio for a fixed return. \n",
    "In this case we are allowed to **short sell** the asset and in principle we do not have to invest all of our capital.\n",
    "\n",
    "For such a problem we can find the analytical solution to the problem by using the **Lagrange multipliers**. \n",
    "We define the **Lagrangian** of the problem:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} - \\lambda(  \\mathbf{w}^T \\mathbf{R} - R_0 ),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda  \\mathbf{R} = 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} + R_0 = 0.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation, we get:\n",
    "$$\n",
    "\\Sigma \\mathbf{w} - \\lambda  \\mathbf{R} = 0 \n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\mathbf{w} = \\lambda \\Sigma^{-1}\\mathbf{R},  \n",
    "$$\n",
    "and inserting in the second equation:\n",
    "$$\n",
    "- ( \\lambda \\Sigma^{-1}\\mathbf{R} )^T \\mathbf{R} + R_0 = 0 \n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\lambda \\mathbf{R}^T \\Sigma^{-1} \\mathbf{R} = R_0\n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\lambda = \\frac{R_0}{\\mathbf{R}^T \\Sigma^{-1} \\mathbf{R}}.\n",
    "$$\n",
    "Note that since $\\Sigma$ was symmetric, so is $\\Sigma^{-1}$, from which $(\\Sigma^{-1})^T = \\Sigma^{-1}$. \n",
    "We can then insert $\\lambda$ back into the first equation and obtain:\n",
    "$$\n",
    "\\mathbf{w}^* = R_0 \\frac{\\Sigma^{-1}\\mathbf{R}}{\\mathbf{R}^T \\Sigma^{-1} \\mathbf{R}},\n",
    "$$\n",
    "which is therefore the analytical expression for the weights. Notice that since we have not imposed the constraint \n",
    "on the normalisation, we are not guaranteed that such vector of weights sum to $1$. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c557b885",
   "metadata": {
    "papermill": {
     "duration": 0.039738,
     "end_time": "2024-05-31T20:00:43.667851",
     "exception": false,
     "start_time": "2024-05-31T20:00:43.628113",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 7.1 Short selling and normalized weigths: minimum volatility portofolio given a fixed return \n",
    "\n",
    "Analogously, we can also also fin the analytical expression of optimal weights in case we add the condition that the weigths sum to $1$, but without requiring that they have to be all positive, i.e.:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} &= R_0,  \\\\\n",
    "\\mathbf{w}^T \\mathbf{1} &= 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "This is again the case in which we can **short sell** the asset but this time we invest all of the capital. \n",
    "\n",
    "We define the Lagrangian:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} \n",
    "- \\lambda( \\mathbf{w}^T \\mathbf{R} - R_0) - \\delta(\\mathbf{w}^T\\mathbf{1}-1),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda \\mathbf{R} - \\delta \\mathbf{1}= 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} + R_0 = 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{1} + R_0 = 0.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation we get:\n",
    "$$\n",
    "\\mathbf{w} = \\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}), \n",
    "$$\n",
    "and we can insert it in the second and the third equation, respectively:\n",
    "\\begin{cases}\n",
    "\\left(\\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}) \\right)^T\\mathbf{R} \n",
    "&= \\lambda \\mathbf{R}^T\\Sigma^{-1}\\mathbf{R} + \\delta\\mathbf{1}\\Sigma^{-1}\\mathbf{R} = R_0, \\\\\n",
    "\\left(\\Sigma^{-1}(\\lambda \\mathbf{R} + \\delta\\mathbf{1}) \\right)^T\\mathbf{1} \n",
    "&= \\lambda \\mathbf{R}^T\\Sigma^{-1}\\mathbf{1} + \\delta\\mathbf{1}\\Sigma^{-1}\\mathbf{1} = 1.\n",
    "\\end{cases}\n",
    "Let us define the following fixed numbers:\n",
    "$$\n",
    "\\begin{cases}\n",
    "A & := \\mathbf{R}^T \\Sigma^{-1} \\mathbf{R},  \\\\\n",
    "B & := \\mathbf{1}^T \\Sigma^{-1} \\mathbf{R} \\equiv \\mathbf{R}^T \\Sigma^{-1} \\mathbf{1}, \\\\\n",
    "C & := \\mathbf{1}^T \\Sigma^{-1} \\mathbf{1},\n",
    "\\end{cases}\n",
    "$$\n",
    "where notice that in B the second equation is true since $\\Sigma^{-1}$ is a symmetric matrix. Hence we have the following system to solve:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\lambda A + \\delta B &= R_0, \\\\\n",
    "\\lambda B + \\delta C &= 1.\n",
    "\\end{cases}\n",
    "$$\n",
    "From the second equation we find $\\lambda$ and put it into the first equation:\n",
    "$$\n",
    "\\lambda = \\frac{1-\\delta C}{B}\n",
    "\\quad\\Longrightarrow\\quad \n",
    "\\frac{1-\\delta C}{B} A + \\delta B = R_0\n",
    "\\quad\\text{from which we find}\\quad\n",
    "\\delta = \\frac{R_0B - A}{B^2-AC}.\n",
    "$$\n",
    "Now, we put $\\delta$ back into $\\lambda$:\n",
    "$$\n",
    "\\lambda = \\frac{1 - \\frac{R_0 B-A}{B^2-AC}C }{B} = \\frac{B - R_0 C}{B^2-AC}.\n",
    "$$\n",
    "Finally, we can put both $\\lambda$ and $\\delta$ we have just find back into $\\mathbf{w}$ and find the optimal weight:\n",
    "$$\n",
    "\\mathbf{w}^*  \n",
    "= \\lambda \\Sigma^{-1} \\mathbf{R} + \\delta \\Sigma^{-1} \\mathbf{1} \n",
    "= \\frac{B - R_0 C}{B^2-AC} \\Sigma^{-1} \\mathbf{R}  +  \\frac{R_0B - A}{B^2-AC}  \\Sigma^{-1}\\mathbf{1} \n",
    "= \\underbrace{ \\frac{1}{B^2-AC}\\left(B\\Sigma^{-1}\\mathbf{R} - A\\Sigma^{-1}\\mathbf{1} \\right) }_{:= \\mathbf{f} }\n",
    "+ R_0 \\Bigl( \\underbrace{ \\frac{1}{B^2-AC}\\left(B\\Sigma^{-1}\\mathbf{1} - C\\Sigma^{-1}\\mathbf{R} \\right) }_{:= \\mathbf{g} }  \\Bigr)\n",
    "= \\mathbf{f} + R_0 \\mathbf{g}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a65c76f",
   "metadata": {
    "papermill": {
     "duration": 0.041378,
     "end_time": "2024-05-31T20:00:43.750444",
     "exception": false,
     "start_time": "2024-05-31T20:00:43.709066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 8. Maximizing the sharpe ratio portfolio in presence of non null risk-free rate\n",
    "\n",
    "Recall that a **risk-free asset** is an (hypothetical) asset with a risk-free rate. For example, **short-term government securities (such as US treasury bills)** are used as a risk-free asset since **they pay a fixed interest rate and have exceptionally low default risk**. \n",
    "\n",
    "The risk-free asset has zero volatility. Furthermore, it is also uncorrelated with any other asset since, \n",
    "by definition, its volatility is zero. Therefore, when combined with any other asset in a portfolio, \n",
    "**the change in return is linearly related to the change in risk** as the proportions in the combination vary.\n",
    "\n",
    "#### 8.1 The capital market line (CML)\n",
    "\n",
    "When a risk-free asset is introduced, there will be a line satisfying:\n",
    "\n",
    " 1. it is tangent to the curve at the risky portfolio with the highest Sharpe ratio; \n",
    " 2. its vertical intercept represents a portfolio with $100\\%$ of holdings in the risk-free asset; \n",
    " 3. the tangency with the curve represents the highest sharpe ratio portfolio with no risk-free holdings and $100%$ of risky assets; \n",
    " assets held in the portfolio occurring at the tangency point; \n",
    " 4. points on this line represent portfolios containing positive amounts of both the risky assets and the risk-free asset; \n",
    " \n",
    "This efficient line is called the **Capital Market Line (CML)**, and its given by:\n",
    "$$\n",
    "R_{CML} = R_{f} + \\sigma_{CML}\\frac{R_{p} - R_{f}}{\\sigma_{p}}, \n",
    "$$\n",
    "where $R_p$ and $\\sigma_p$ are the return and the volatility of the risky portfolio with no risk free asset, respectively, \n",
    "$R_f$ denotes the risk-free rate, and $R_{CML}$ and $\\sigma_{CML}$ denote the return and the volatility of the \n",
    "portfolio combining both risky assets and the risk-free asset, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "61a610d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:43.834214Z",
     "iopub.status.busy": "2024-05-31T20:00:43.833770Z",
     "iopub.status.idle": "2024-05-31T20:00:43.888837Z",
     "shell.execute_reply": "2024-05-31T20:00:43.887372Z"
    },
    "papermill": {
     "duration": 0.099771,
     "end_time": "2024-05-31T20:00:43.891880",
     "exception": false,
     "start_time": "2024-05-31T20:00:43.792109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal weights:\n",
      "  AMZN: 55.58%\n",
      "  KO:   0.00%\n",
      "  MSFT: 44.42%\n"
     ]
    }
   ],
   "source": [
    "risk_free_rate = 0.06\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "print(\"optimal weights:\")\n",
    "print(\"  AMZN: {:.2f}%\".format(optimal_weights[0]*100))\n",
    "print(\"  KO:   {:.2f}%\".format(optimal_weights[1]*100))\n",
    "print(\"  MSFT: {:.2f}%\".format(optimal_weights[2]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "08c28d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:43.975136Z",
     "iopub.status.busy": "2024-05-31T20:00:43.974513Z",
     "iopub.status.idle": "2024-05-31T20:00:44.022111Z",
     "shell.execute_reply": "2024-05-31T20:00:44.020559Z"
    },
    "papermill": {
     "duration": 0.091315,
     "end_time": "2024-05-31T20:00:44.024752",
     "exception": false,
     "start_time": "2024-05-31T20:00:43.933437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio return:       25.84%\n",
      "Portfolio volatility:   24.20%\n",
      "Portfolio sharpe ratio: 0.82\n"
     ]
    }
   ],
   "source": [
    "ret, vol, shp = get_portfolio_features(optimal_weights, ann_rets, cov_rets, risk_free_rate, periods_per_year)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8537926",
   "metadata": {
    "papermill": {
     "duration": 0.044657,
     "end_time": "2024-05-31T20:00:44.112449",
     "exception": false,
     "start_time": "2024-05-31T20:00:44.067792",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us plot the efficient frontier and the capital market line using the optional argument in our plot method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b423ef70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:44.199476Z",
     "iopub.status.busy": "2024-05-31T20:00:44.199042Z",
     "iopub.status.idle": "2024-05-31T20:00:44.843717Z",
     "shell.execute_reply": "2024-05-31T20:00:44.841776Z"
    },
    "papermill": {
     "duration": 0.69603,
     "end_time": "2024-05-31T20:00:44.847915",
     "exception": false,
     "start_time": "2024-05-31T20:00:44.151885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df, ax = erk.efficient_frontier(40, daily_rets, cov_rets, periods_per_year, risk_free_rate=risk_free_rate, \n",
    "                                iplot=True, cml=True)\n",
    "ax.set_title(\"Maximum Sharpe Ratio portfolio {} for risk free rate {}%\".format(np.round(shp,2),risk_free_rate*100))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75378b38",
   "metadata": {
    "papermill": {
     "duration": 0.041543,
     "end_time": "2024-05-31T20:00:44.931991",
     "exception": false,
     "start_time": "2024-05-31T20:00:44.890448",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The introduction of the risk-free asset as a possible component of the portfolio has improved the range of volatility-return combinations available since **everywhere, except at the tangency portfolio, the CML provides a higher return than the (old) efficient frontier does \n",
    "at every possible volatility.** "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50a32770",
   "metadata": {
    "papermill": {
     "duration": 0.039188,
     "end_time": "2024-05-31T20:00:45.014093",
     "exception": false,
     "start_time": "2024-05-31T20:00:44.974905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Note that the efficient frontier method has other optional parameter to plot the highest sharpe ratio, the minimum volatility, and the equally weigthed portfolio as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d6841551",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:45.099514Z",
     "iopub.status.busy": "2024-05-31T20:00:45.099068Z",
     "iopub.status.idle": "2024-05-31T20:00:46.126831Z",
     "shell.execute_reply": "2024-05-31T20:00:46.125670Z"
    },
    "papermill": {
     "duration": 1.074453,
     "end_time": "2024-05-31T20:00:46.130075",
     "exception": false,
     "start_time": "2024-05-31T20:00:45.055622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "risk_free_rate = 0.05\n",
    "df, ax = erk.efficient_frontier(90, daily_rets, cov_rets, periods_per_year, risk_free_rate=risk_free_rate, \n",
    "                                iplot=True, hsr=True, cml=True, mvp=True, ewp=True)\n",
    "ax.set_title(\"Maximum Sharpe ratio portfolio {} for risk free rate {}%\".format(np.round(shp,2),risk_free_rate*100))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "aa0b2a99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:46.217515Z",
     "iopub.status.busy": "2024-05-31T20:00:46.217084Z",
     "iopub.status.idle": "2024-05-31T20:00:46.272840Z",
     "shell.execute_reply": "2024-05-31T20:00:46.271656Z"
    },
    "papermill": {
     "duration": 0.104089,
     "end_time": "2024-05-31T20:00:46.275611",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.171522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>0.311025</td>\n",
       "      <td>0.298123</td>\n",
       "      <td>0.797759</td>\n",
       "      <td>0.973956</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.604424e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>0.316378</td>\n",
       "      <td>0.300595</td>\n",
       "      <td>0.792075</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.049319e-20</td>\n",
       "      <td>3.918563e-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>0.239873</td>\n",
       "      <td>0.256689</td>\n",
       "      <td>0.861662</td>\n",
       "      <td>0.537433</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>4.625673e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>0.138354</td>\n",
       "      <td>0.107908</td>\n",
       "      <td>0.418545</td>\n",
       "      <td>0.047597</td>\n",
       "      <td>8.176887e-01</td>\n",
       "      <td>1.347143e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>0.180093</td>\n",
       "      <td>0.195619</td>\n",
       "      <td>0.808578</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>3.333333e-01</td>\n",
       "      <td>3.333333e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0         1         2         3             4             5\n",
       "88  0.311025  0.298123  0.797759  0.973956  0.000000e+00  2.604424e-02\n",
       "89  0.316378  0.300595  0.792075  1.000000  3.049319e-20  3.918563e-12\n",
       "90  0.239873  0.256689  0.861662  0.537433  0.000000e+00  4.625673e-01\n",
       "91  0.138354  0.107908  0.418545  0.047597  8.176887e-01  1.347143e-01\n",
       "92  0.180093  0.195619  0.808578  0.333333  3.333333e-01  3.333333e-01"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b4741d2",
   "metadata": {
    "papermill": {
     "duration": 0.042181,
     "end_time": "2024-05-31T20:00:46.359170",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.316989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 9. Maximizing the sharpe ratio = Minimizing volatility when we invest also in a risk free asset\n",
    "\n",
    "Suppose that along with the set of risky assets there is also a risk-free asset with volatility zero and return equal to the risk-free rate $R_f$. In this case, we may want to minimize the volatility of the portfolio (i.e., the volatility of the part of the portfolio invested in the risky assets, since the the risk-free asset, by definition, is risk free) in which we have allocated some weights $\\mathbf{w}$ in the risky assets and the remaining part of our capital, i.e., $1-\\mathbf{w}^T\\mathbf{1}$, in the risk-free asset:\n",
    "$$\n",
    "\\text{minimize} \\;\\; \\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w}, \n",
    "$$\n",
    "subject to \n",
    "$$\n",
    "\\begin{cases}\n",
    "\\mathbf{w}^T \\mathbf{R} + (1 - \\mathbf{w}^T\\mathbf{1})R_f &= R_0,  \\\\\n",
    "\\end{cases}\n",
    "$$\n",
    "Note that in this case we can **short sell** the assets and we invest all of the capital. \n",
    "We define the Lagrangian:\n",
    "$$\n",
    "\\mathcal{L}(\\mathbf{w}, \\lambda) := \n",
    "\\frac{1}{2} \\mathbf{w}^T\\Sigma\\mathbf{w} \n",
    "- \\lambda\\left( \\mathbf{w}^T \\mathbf{R} + (1-\\mathbf{w}^T\\mathbf{1})R_f - R_0\\right),\n",
    "$$\n",
    "and put the partial derivatives to zero:\n",
    "$$\n",
    "\\begin{cases}\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\mathbf{w}} &= \\frac{1}{2} (2\\Sigma \\mathbf{w}) - \\lambda \\mathbf{R} + \\lambda R_f \\mathbf{1}= 0, \\\\\n",
    "\\frac{\\partial\\mathcal{L}}{\\partial \\lambda} &=  - \\mathbf{w}^T \\mathbf{R} - (1-\\mathbf{w}\\mathbf{1})R_f + R_0 = 0, \\\\\n",
    "\\end{cases}\n",
    "$$\n",
    "From the first equation we get:\n",
    "$$\n",
    "\\mathbf{w} = \\lambda \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}), \n",
    "$$\n",
    "and we can insert it in the second equation:\n",
    "$$\n",
    "\\left( \\lambda\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^T \\mathbf{R} + \\left( 1 - (\\lambda\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}))^T\\mathbf{1}   \\right) R_f = R_0\n",
    "\\quad \\Longrightarrow\\quad \n",
    "\\lambda = \\frac{R_0-R_f}{(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})}.\n",
    "$$\n",
    "We can now put $\\lambda$ back into the expression for the weigths:\n",
    "$$\n",
    "\\mathbf{w}^* \n",
    "= \\underbrace{ \\frac{R_0-R_f}{(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})} }_{:= r} \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1})\n",
    "= r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}).\n",
    "$$\n",
    "We found the otpimal weight allocations to the risky assets. The allocation to the risk-free rate would be then given by \n",
    "$1-\\mathbf{w^*}^T\\mathbf{1}$. \n",
    "\n",
    "#### 9.1 Portfolio return and volatility\n",
    "Notice that a portfolio with these weigths should give, by definition, a return equal to the target return $R_0$. \n",
    "In fact:\n",
    "$$\n",
    "\\mu_p = \\mathbf{w^*}^T \\mathbf{R} + (1 - \\mathbf{w^*}^T\\mathbf{1})R_f \n",
    "= r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}\\mathbf{R} + R_f - r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1} R_f \\mathbf{1} \n",
    "= \\underbrace{ r(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) }_{= R_0 - R_f}   + R_f  = R_0.\n",
    "$$\n",
    "Right. The volatility of the portfolio is given by:\n",
    "$$\n",
    "\\sigma_p^2 = \\mathbf{w^*}^T\\Sigma\\mathbf{w^*} \n",
    "= \\left( r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}) \\right)^T \\Sigma \\left( r \\Sigma^{-1}(\\mathbf{R} - R_f\\mathbf{1}) \\right) \n",
    "= r^2 (\\mathbf{R} - R_f\\mathbf{1})^T \\Sigma^{-1}\\underbrace{\\Sigma\\Sigma^{-1}}_{=Id} (\\mathbf{R} - R_f\\mathbf{1}) \n",
    "= \\frac{(R_0-R_f)^2}{ \\left( (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^2 } \n",
    "(\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})\n",
    "$$\n",
    "that is:\n",
    "$$\n",
    "\\sigma_p = \\frac{(R_0-R_f)}{ \\sqrt{ (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})} }.\n",
    "$$\n",
    "\n",
    "#### Portoflio weigths when full allocation is done to the risky assets (MSR)\n",
    "\n",
    "If, even in case of risk-free asset, we decide to allocate all the capital to the risky assets we can easily find the weights by normalizing the efficient weights we have found before. In particular, notice that $\\mathbf{w}^*$ is proportional to the vector \n",
    "$\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})$ with the constant of proportionality equal to $r$. \n",
    "Hence we can define the weigths:\n",
    "$$\n",
    "\\mathbf{w}_M := \\frac{\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) },\n",
    "$$\n",
    "where notice that the denominator is simply the sum of the weigths in $\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})$, i.e., weights in $w_M$ sum to $1$, and correspond to a full allocation of money in the risky assets and zero to the risk-free rate asset. \n",
    "\n",
    "Note that the return of such portfolio is given by:\n",
    "$$\n",
    "\\mu_M = \\mathbf{w}_M^T\\mathbf{R} = \\frac{ (\\mathbf{R}-R_f\\mathbf{1})^T\\Sigma^{-1}\\mathbf{R} }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})}, \n",
    "$$\n",
    "while the volatility is:\n",
    "$$\n",
    "\\sigma_M^2 = \\mathbf{w}_M^T \\Sigma \\mathbf{w}_M \n",
    "= \\frac{1}{ \\left( \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})  \\right)^2 } \n",
    "(\\mathbf{R}-R_f\\mathbf{1})^T\\underbrace{\\Sigma^{-1}\\Sigma}_{=Id}\\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1}) \n",
    "= \\frac{(\\mathbf{R}-R_f\\mathbf{1})^T \\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1})}{ \\left( \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1}) \\right)^2 }\n",
    "\\quad \\Longrightarrow\\quad \n",
    "\\sigma_M = \n",
    "\\frac{ \\sqrt{(\\mathbf{R}-R_f\\mathbf{1})^T \\Sigma^{-1} (\\mathbf{R}-R_f\\mathbf{1})}  }{ \\mathbf{1}^T\\Sigma^{-1}(\\mathbf{R}-R_f\\mathbf{1})  }.\n",
    "$$\n",
    "\n",
    "The portoflio of only risky assets with weights given by $\\mathbf{w}_M$ is, by constuction, a portfolio with a minimum volatility lying on the efficient frontier. However, we can see that **it is also the portfolio with the highest Sharpe Ratio**. \n",
    "\n",
    "Consider the point on the $(\\sigma, \\mu)$ plane corresponding to the portfolio where we only allocate money to the risk-free asset, \n",
    "i.e. the portfolio with $(\\sigma,\\mu)=(0,R_f)$, and the portfolio where we only allocate money to the risky asset,\n",
    "i.e. the portfolio with $(\\sigma,\\mu)=(\\sigma_M,\\mu_M)$, where $\\sigma_M$ and $\\mu_M$ have been found above. \n",
    "The line connecting these two portfolio is:\n",
    "$$\n",
    "\\mu - \\mu_M = \\frac{\\mu_M - R_f}{\\sigma_M - 0} (\\sigma - \\sigma_M) \n",
    "\\quad\\text{and then}\\quad\n",
    "\\mu = R_f + \\frac{\\mu_M - R_f}{\\sigma_M} \\sigma,\n",
    "$$\n",
    "i.e., **this is the Capital Market Line**, and we see that **the slope of the CML is the Sharpe Ratio of the portfolio with return $\\mu_M$ and $\\sigma_M$**, that is, the minimum volatility portfolio on the efficient frontier with weights given by $\\mathbf{w}_M$. Furthermore, from the line we see that such portfolio is also the \n",
    "maximum Sharpe Ratio portfolio since:\n",
    "$$\n",
    "\\max \\frac{\\mu - R_f}{\\sigma} = \\frac{\\mu_M - R_f}{\\sigma_M}.\n",
    "$$\n",
    "\n",
    "Since the CML connects the portfolios composed of only the risk-free asset and only the risky assets, every point on the line corresponds to an investmentes in both the risk-free rate and the risky assets. In this case, the weights are given by the $\\mathbf{w}^*$ previously found. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7778c7cc",
   "metadata": {
    "papermill": {
     "duration": 0.04053,
     "end_time": "2024-05-31T20:00:46.443898",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.403368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First of all, recall that with our method we can find the weigths of the portfolio with the maximum sharpe ratio:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "aebbd7c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:46.533982Z",
     "iopub.status.busy": "2024-05-31T20:00:46.533521Z",
     "iopub.status.idle": "2024-05-31T20:00:46.588458Z",
     "shell.execute_reply": "2024-05-31T20:00:46.587149Z"
    },
    "papermill": {
     "duration": 0.104441,
     "end_time": "2024-05-31T20:00:46.592296",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.487855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.55584483, 0.        , 0.44415517])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "risk_free_rate = 0.06\n",
    "optimal_weights = erk.maximize_shape_ratio(ann_rets, cov_rets, risk_free_rate, periods_per_year)\n",
    "optimal_weights"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1973974e",
   "metadata": {
    "papermill": {
     "duration": 0.044276,
     "end_time": "2024-05-31T20:00:46.683788",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.639512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Ok. Let us verify our formulas for $\\mathbf{w}_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f2864348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:46.776819Z",
     "iopub.status.busy": "2024-05-31T20:00:46.776150Z",
     "iopub.status.idle": "2024-05-31T20:00:46.824971Z",
     "shell.execute_reply": "2024-05-31T20:00:46.822442Z"
    },
    "papermill": {
     "duration": 0.101534,
     "end_time": "2024-05-31T20:00:46.829393",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.727859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "invcov = erk.inverse_df(cov_rets)\n",
    "ones   = np.repeat(1,3) \n",
    "r_rf   = ann_rets - risk_free_rate*ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f4b05b8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:46.977218Z",
     "iopub.status.busy": "2024-05-31T20:00:46.976760Z",
     "iopub.status.idle": "2024-05-31T20:00:47.025165Z",
     "shell.execute_reply": "2024-05-31T20:00:47.024021Z"
    },
    "papermill": {
     "duration": 0.105652,
     "end_time": "2024-05-31T20:00:47.028085",
     "exception": false,
     "start_time": "2024-05-31T20:00:46.922433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.77006365, -0.45767468,  0.68761103])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w_M = np.dot( invcov, r_rf ) / np.dot( ones, np.dot(invcov, r_rf) )\n",
    "w_M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c3bbd0",
   "metadata": {
    "papermill": {
     "duration": 0.044304,
     "end_time": "2024-05-31T20:00:47.116058",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.071754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Yes, they coincide. We implemented these weights in the following method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7c07cc5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:47.201429Z",
     "iopub.status.busy": "2024-05-31T20:00:47.201008Z",
     "iopub.status.idle": "2024-05-31T20:00:47.253196Z",
     "shell.execute_reply": "2024-05-31T20:00:47.251820Z"
    },
    "papermill": {
     "duration": 0.098412,
     "end_time": "2024-05-31T20:00:47.256164",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.157752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.77006365, -0.45767468,  0.68761103])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "erk.weigths_max_sharpe_ratio(cov_rets, r_rf).values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "682e3434",
   "metadata": {
    "papermill": {
     "duration": 0.052401,
     "end_time": "2024-05-31T20:00:47.396762",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.344361",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, let us verify that the portfolio with these weigths has a return and a volatility as in formulas $\\mu_M$ and $\\sigma_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "dfb98ac0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:47.488273Z",
     "iopub.status.busy": "2024-05-31T20:00:47.487110Z",
     "iopub.status.idle": "2024-05-31T20:00:47.536592Z",
     "shell.execute_reply": "2024-05-31T20:00:47.535481Z"
    },
    "papermill": {
     "duration": 0.097829,
     "end_time": "2024-05-31T20:00:47.539291",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.441462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3360225975905984"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return: using the portfolio return method\n",
    "mu_M = erk.portfolio_return(w_M, ann_rets)\n",
    "mu_M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "88ad578d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:47.628073Z",
     "iopub.status.busy": "2024-05-31T20:00:47.627603Z",
     "iopub.status.idle": "2024-05-31T20:00:47.674985Z",
     "shell.execute_reply": "2024-05-31T20:00:47.673768Z"
    },
    "papermill": {
     "duration": 0.094501,
     "end_time": "2024-05-31T20:00:47.677718",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.583217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3360225975905984"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return: using the formula we found\n",
    "mu_M = np.dot( r_rf, np.dot(invcov, ann_rets) ) / np.dot(ones, np.dot(invcov,r_rf) )\n",
    "mu_M "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d77e1073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:47.770141Z",
     "iopub.status.busy": "2024-05-31T20:00:47.769716Z",
     "iopub.status.idle": "2024-05-31T20:00:47.816283Z",
     "shell.execute_reply": "2024-05-31T20:00:47.815019Z"
    },
    "papermill": {
     "duration": 0.095098,
     "end_time": "2024-05-31T20:00:47.819104",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.724006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33081545377271215"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# volatility: using the portfolio vol method\n",
    "sigma_M = erk.annualize_vol( erk.portfolio_volatility(w_M, cov_rets), periods_per_year)\n",
    "sigma_M"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3c921175",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:47.911346Z",
     "iopub.status.busy": "2024-05-31T20:00:47.910937Z",
     "iopub.status.idle": "2024-05-31T20:00:47.961350Z",
     "shell.execute_reply": "2024-05-31T20:00:47.959886Z"
    },
    "papermill": {
     "duration": 0.100597,
     "end_time": "2024-05-31T20:00:47.963968",
     "exception": false,
     "start_time": "2024-05-31T20:00:47.863371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3308154537727122"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# volatility: using the formula\n",
    "sigma_M = np.sqrt( np.dot(r_rf, np.dot(invcov,r_rf)) ) / np.dot(ones, np.dot(invcov,r_rf))\n",
    "sigma_M = erk.annualize_vol(sigma_M , periods_per_year)\n",
    "sigma_M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3180b047",
   "metadata": {
    "papermill": {
     "duration": 0.042194,
     "end_time": "2024-05-31T20:00:48.049772",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.007578",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Perfect. Let us now define the $\\mathbf{w}^*$ weigths of a portfolio which invest in both the risk-free asset and risky assets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b7d203c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:48.140391Z",
     "iopub.status.busy": "2024-05-31T20:00:48.139973Z",
     "iopub.status.idle": "2024-05-31T20:00:48.191299Z",
     "shell.execute_reply": "2024-05-31T20:00:48.189465Z"
    },
    "papermill": {
     "duration": 0.1018,
     "end_time": "2024-05-31T20:00:48.194127",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.092327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.19529001, -0.11606741,  0.17437983])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_ret = 0.13\n",
    "wstar = (target_ret - risk_free_rate) / np.dot(r_rf, np.dot(invcov,r_rf)) * np.dot(invcov,r_rf)             \n",
    "wstar"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c37a7d3b",
   "metadata": {
    "papermill": {
     "duration": 0.042367,
     "end_time": "2024-05-31T20:00:48.279842",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.237475",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To these weigths we have to add the weigth in the risk-free asset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1b35f511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:48.368988Z",
     "iopub.status.busy": "2024-05-31T20:00:48.368227Z",
     "iopub.status.idle": "2024-05-31T20:00:48.417591Z",
     "shell.execute_reply": "2024-05-31T20:00:48.416349Z"
    },
    "papermill": {
     "duration": 0.097084,
     "end_time": "2024-05-31T20:00:48.420655",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.323571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.19529001, -0.11606741,  0.17437983,  0.74639758])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights = np.concatenate([wstar, [1 - wstar.sum()]])\n",
    "weights"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0bc3cbb",
   "metadata": {
    "papermill": {
     "duration": 0.045263,
     "end_time": "2024-05-31T20:00:48.510060",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.464797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The last weight is the one in the risk-free asset. \n",
    "The return of such a portfolio is, by definition, equal to the target return:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "0558ec0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:48.603874Z",
     "iopub.status.busy": "2024-05-31T20:00:48.603432Z",
     "iopub.status.idle": "2024-05-31T20:00:48.650833Z",
     "shell.execute_reply": "2024-05-31T20:00:48.649151Z"
    },
    "papermill": {
     "duration": 0.098984,
     "end_time": "2024-05-31T20:00:48.654343",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.555359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.13"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ann_rets_with_rf = pd.concat([ann_rets, pd.Series([risk_free_rate])], ignore_index=True)\n",
    "\n",
    "# Calculate the portfolio return\n",
    "mu_p = erk.portfolio_return(weights, ann_rets_with_rf)\n",
    "mu_p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e29b5f4",
   "metadata": {
    "papermill": {
     "duration": 0.043587,
     "end_time": "2024-05-31T20:00:48.740066",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.696479",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us see the volatility of such a portfolio:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "c7aa2ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:48.828894Z",
     "iopub.status.busy": "2024-05-31T20:00:48.827744Z",
     "iopub.status.idle": "2024-05-31T20:00:48.874587Z",
     "shell.execute_reply": "2024-05-31T20:00:48.873275Z"
    },
    "papermill": {
     "duration": 0.093929,
     "end_time": "2024-05-31T20:00:48.877613",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.783684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08389560117986009"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using the portfolio_volatility method\n",
    "erk.annualize_vol( erk.portfolio_volatility(wstar, cov_rets), periods_per_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a45cda07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:48.973188Z",
     "iopub.status.busy": "2024-05-31T20:00:48.972655Z",
     "iopub.status.idle": "2024-05-31T20:00:49.023981Z",
     "shell.execute_reply": "2024-05-31T20:00:49.022160Z"
    },
    "papermill": {
     "duration": 0.104199,
     "end_time": "2024-05-31T20:00:49.026756",
     "exception": false,
     "start_time": "2024-05-31T20:00:48.922557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0838956011798601"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using the formula\n",
    "sigma_p = erk.annualize_vol( (target_ret - risk_free_rate) / np.sqrt(np.dot(r_rf, np.dot(invcov,r_rf))), periods_per_year )\n",
    "sigma_p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f822c263",
   "metadata": {
    "papermill": {
     "duration": 0.044897,
     "end_time": "2024-05-31T20:00:49.114092",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.069195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Finally, let us verify that all portfolio that are constructed using the weigths $\\mathbf{w}^*$ and $1-\\mathbf{w}^T\\mathbf{1}$ lie on the Capital Market Line. We define a set of target returns, from the original target return of $0.06$ up to the maximum sharpe ratio return $\\mu_M$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fbe256ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:49.207253Z",
     "iopub.status.busy": "2024-05-31T20:00:49.206805Z",
     "iopub.status.idle": "2024-05-31T20:00:49.265123Z",
     "shell.execute_reply": "2024-05-31T20:00:49.263485Z"
    },
    "papermill": {
     "duration": 0.108797,
     "end_time": "2024-05-31T20:00:49.268518",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.159721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([ 0.19529001, -0.11606741,  0.17437983,  0.74639758]),\n",
       " array([ 0.22554125, -0.13404674,  0.20139199,  0.70711349]),\n",
       " array([ 0.2557925 , -0.15202607,  0.22840416,  0.66782941]),\n",
       " array([ 0.28604374, -0.1700054 ,  0.25541633,  0.62854533]),\n",
       " array([ 0.31629499, -0.18798473,  0.2824285 ,  0.58926124]),\n",
       " array([ 0.34654623, -0.20596406,  0.30944067,  0.54997716]),\n",
       " array([ 0.37679747, -0.22394339,  0.33645284,  0.51069308]),\n",
       " array([ 0.40704872, -0.24192272,  0.36346501,  0.47140899]),\n",
       " array([ 0.43729996, -0.25990205,  0.39047718,  0.43212491]),\n",
       " array([ 0.46755121, -0.27788138,  0.41748934,  0.39284083]),\n",
       " array([ 0.49780245, -0.29586071,  0.44450151,  0.35355675]),\n",
       " array([ 0.5280537 , -0.31384004,  0.47151368,  0.31427266]),\n",
       " array([ 0.55830494, -0.33181937,  0.49852585,  0.27498858]),\n",
       " array([ 0.58855618, -0.3497987 ,  0.52553802,  0.2357045 ]),\n",
       " array([ 0.61880743, -0.36777803,  0.55255019,  0.19642041]),\n",
       " array([ 0.64905867, -0.38575736,  0.57956236,  0.15713633]),\n",
       " array([ 0.67930992, -0.40373669,  0.60657453,  0.11785225]),\n",
       " array([ 0.70956116, -0.42171602,  0.6335867 ,  0.07856817]),\n",
       " array([ 0.73981241, -0.43969535,  0.66059886,  0.03928408]),\n",
       " array([ 0.77006365, -0.45767468,  0.68761103,  0.        ])]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_ret_vec = np.linspace(target_ret,mu_M,20)\n",
    "wstar = [ (tr - risk_free_rate) / np.dot(r_rf, np.dot(invcov,r_rf)) * np.dot(invcov,r_rf) for tr in target_ret_vec ]         \n",
    "wstar = [ np.append(wstar[i], 1-wstar[i].sum()) for i in range(len(wstar)) ]\n",
    "wstar "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5ccd566e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:49.359500Z",
     "iopub.status.busy": "2024-05-31T20:00:49.359078Z",
     "iopub.status.idle": "2024-05-31T20:00:49.414442Z",
     "shell.execute_reply": "2024-05-31T20:00:49.413222Z"
    },
    "papermill": {
     "duration": 0.10333,
     "end_time": "2024-05-31T20:00:49.417277",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.313947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0.13,\n",
       "  0.1408432946100315,\n",
       "  0.151686589220063,\n",
       "  0.16252988383009448,\n",
       "  0.173373178440126,\n",
       "  0.18421647305015748,\n",
       "  0.19505976766018895,\n",
       "  0.20590306227022048,\n",
       "  0.21674635688025198,\n",
       "  0.22758965149028348,\n",
       "  0.23843294610031496,\n",
       "  0.2492762407103464,\n",
       "  0.2601195353203779,\n",
       "  0.2709628299304094,\n",
       "  0.2818061245404409,\n",
       "  0.2926494191504724,\n",
       "  0.3034927137605039,\n",
       "  0.3143360083705355,\n",
       "  0.32517930298056685,\n",
       "  0.3360225975905984],\n",
       " [0.0838956011798601,\n",
       "  0.09689138289527338,\n",
       "  0.10988716461068665,\n",
       "  0.1228829463260999,\n",
       "  0.13587872804151319,\n",
       "  0.14887450975692648,\n",
       "  0.16187029147233972,\n",
       "  0.174866073187753,\n",
       "  0.18786185490316626,\n",
       "  0.20085763661857955,\n",
       "  0.21385341833399282,\n",
       "  0.22684920004940606,\n",
       "  0.2398449817648193,\n",
       "  0.2528407634802326,\n",
       "  0.26583654519564587,\n",
       "  0.27883232691105914,\n",
       "  0.2918281086264724,\n",
       "  0.30482389034188573,\n",
       "  0.31781967205729894,\n",
       "  0.3308154537727122])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ann_rets_with_rf = pd.concat([ann_rets, pd.Series([risk_free_rate])], ignore_index=True)\n",
    "\n",
    "# Calculate portfolio returns using the concatenated returns\n",
    "mus = [erk.portfolio_return(wstar[i], ann_rets_with_rf) for i in range(len(wstar))]\n",
    "\n",
    "# Calculate annualized volatilities\n",
    "sigmas = [\n",
    "    erk.annualize_vol((tr - risk_free_rate) / np.sqrt(np.dot(r_rf, np.dot(invcov, r_rf))), periods_per_year) \n",
    "    for tr in target_ret_vec\n",
    "]\n",
    "\n",
    "mus, sigmas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "036b8a36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-31T20:00:49.504741Z",
     "iopub.status.busy": "2024-05-31T20:00:49.504298Z",
     "iopub.status.idle": "2024-05-31T20:00:49.729728Z",
     "shell.execute_reply": "2024-05-31T20:00:49.727506Z"
    },
    "papermill": {
     "duration": 0.272523,
     "end_time": "2024-05-31T20:00:49.732504",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.459981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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EfEoKiciIiLiUVRORERExKOonIiIiIhHsRiGYZgdQkREROSf9M6JiIiIeBSVExEREfEoKiciIiLiUVRORERExKOonLSCNWvWMHbsWPr378/UqVP59ttvz3lsXl4e999/P2PHjiUpKYnXX3+92edsS1p61i+88AJJSUmn/TNp0qRWvALv0pR5r127lptuuokhQ4YwZMgQbrvttjOONwyD559/npEjR5KSksJtt91Gfn5+K1+Fd2jpWT/88MNnvLanTZvW2pfhFZoy6/fff58pU6Zw2WWXMXDgQK699lrWrVt32jF6XTefykkLy8rKIiMjg3vvvZd33nmH5ORkpk2bRklJyVmPr6mpISEhgenTpxMXF9ci52wrWmPWAL1792br1q2N//zpT39qrUvwKk2d9xdffEFaWhqrV6/mzTffpGPHjtxxxx0cO3as8Zhly5bxxhtvMH/+fNauXUtwcDDTpk2jrq7OXZflkVpj1gCjRo067bX9hz/8wR2X49GaOuvIyEjuuece3nrrLd59912mTJnC7Nmz+eSTTxqP0eu6BRjSon76058aCxYsaPy90+k0Ro4cabz66qvnfe6YMWOMlStXtug5fVlrzHrJkiXGT37yk5aM6TOa+zp0OBzGoEGDjHfeeccwDMNwuVzGiBEjjOXLlzceU15ebvTr18/IzMxs0ezepqVnbRiGMXPmTOOee+5p6aheryU+vl533XXGc889ZxiGXtctRe+ctKD6+np27NjB8OHDGx+zWq0MHz6cbdu2ecw5fUFrzuXAgQOMHDmScePGMX36dI4ePdrcuF6vJeZdU1ODw+EgMjISgMOHD1NUVHTaOcPDwxkwYIBe2y0863/68ssvGTZsGBMnTmTevHmUlZW1aHZv09xZG4ZBdnY2+/fvZ8iQIYBe1y3Fz+wAvqSsrAyn00lMTMxpj8fExLBv3z6POacvaK25pKSkkJGRQffu3SkqKuKll17i5ptv5r333iMsLKy5sb1WS8z7mWeeIT4+vvGDdlFRUeM5fnjO4uLiFkjtnVpj1nBqpTNhwgQSEhI4dOgQf/jDH7jrrrt46623sNlsLXoN3uJiZ11RUcGVV15JfX09VquVefPmMWLECECv65aiciLyb0aPHt346+TkZAYMGMCYMWPYsGEDU6dONTGZd1u6dClZWVmsXr2awMBAs+P4tHPNOi0trfHX/7whdvz48Y3vpsiFCw0NZd26dVRXV5Odnc0TTzxBly5dGDp0qNnRfIbWOi0oKioKm812xo1UJSUlxMbGesw5fYG75hIREUG3bt04ePBgi53TGzVn3itWrGDp0qWsWLGC5OTkxsf/eVOyXtuna41Zn02XLl2IioriwIEDzc7srS521larlcTEROx2O3fccQcTJ05k6dKlgF7XLUXlpAUFBATQt29fsrOzGx9zuVxkZ2czaNAgjzmnL3DXXKqqqjh06NCPfnVPW3Cx8162bBl//OMfWb58Of379z/t3yUkJBAXF3faOSsrK9m+fbte2y0867MpLCzkxIkTbfq13VIfR1wuF/X19YBe1y1Fa50WdvvttzNz5kz69etHSkoKq1atoqamhilTpgAwY8YM2rdvz/Tp04FTN2Tt3bu38dfHjh0jJyeHkJAQEhMTL+icbVVrzPrJJ59kzJgxdOrUiePHj/PCCy9gtVpJT0835yI9SFPnvXTpUpYsWcKzzz5L586dG3fxISEhhIaGYrFYuPXWW3n55ZdJTEwkISGB559/nvj4eMaPH2/adXqClp51VVUVL774IhMnTiQ2NpZDhw7x9NNPk5iYyKhRo0y7Tk/Q1Fm/+uqr9OvXj65du1JfX8/HH3/Mu+++y/z58wH0um4hKictLDU1ldLSUpYsWUJRURF2u53ly5c3vp1XUFCA1fqvN6yOHz/Odddd1/j71157jddee43LL7+cN95444LO2Va1xqwLCwt56KGHOHHiBNHR0QwePJi1a9cSHR3t1mvzRE2d95tvvklDQwMPPPDAaee57777uP/++wG46667qKmpYe7cuZSXlzN48GCWL1/e5u9LaelZ22w2du/ezbp166ioqCA+Pp4RI0bw4IMPEhAQ4NZr8zRNnXV1dTULFiygsLCQoKAgevTowdNPP01qamrjMXpdN5/FMAzD7BAiIiIi/6R7TkRERMSjqJyIiIiIR1E5EREREY+iciIiIiIeReVEREREPIrKiYiIiHgUlRMRERHxKConIiIi4lFUTkSk1Tz88MP85je/MTuGiHgZfYdYEWk1FRUVGIZBRESE2VFExIuonIiIiIhH0VpHRJpt48aNTJ48mZSUFIYOHcptt91GdXX1GWudyspKpk+fzsCBAxk5ciSvv/46t9xyC4sWLWo8ZuzYsfzxj39kxowZDBo0iDFjxvDhhx9SWlrKPffcw6BBg5g8eTLfffdd43PKysp46KGHGDVqFAMGDGDy5MlkZma6dQYi0nJUTkSkWY4fP8706dO5/vrrycrKYvXq1UyYMIGzvSn7xBNPsG3bNl5++WVee+01/v73v7Njx44zjlu1ahWXXnop77zzDqNHj2bGjBnMmDGDn/zkJ/zv//4vXbt2ZebMmY1/Rn19PX379mXp0qVkZmZyww03MGPGDL799ttWv34RaXl+ZgcQEe9WVFSEw+FgwoQJdO7cGYCkpKQzjqusrGTdunU888wzDBs2DICMjAxGjRp1xrFXXnklP//5zwG49957+fOf/0z//v255pprgFM/kv5nP/sZxcXFxMXF0b59e6ZNm9b4/FtuuYWtW7eyYcMGUlJSWvyaRaR1qZyISLMkJyczbNgwJk+ezMiRIxk5ciQTJ04kMjLytOMOHz5MQ0PDaWUhPDyc7t27n3HOfy83sbGxAPTp06fxsZiYGABKSkqIi4vD6XTyyiuvsHHjRo4dO0ZDQwP19fUEBQW16LWKiHtorSMizWKz2Vi5ciXLli2jV69evPHGG0yaNIlDhw5d9Dn9/P71/00WiwUAf3//Mx7751pnxYoVrF69mjvvvJPVq1ezbt06Ro4cSUNDw0VnEBHzqJyISLNZLBYGDx7MAw88wLp16/D392fz5s2nHZOQkIC/v/9pN7JWVFSQn5/f7D//m2++Ydy4cVx77bUkJyfTpUuXFjmviJhDax0RaZbt27eTnZ3NiBEjiImJYfv27ZSWltKjRw927drVeFxYWBjXXXcdTz31FJGRkcTExPDCCy9gsVga3wm5WImJiWzatIlvvvmGyMhIVq5cSXFxMT179mzu5YmICVRORKRZwsLC+Oqrr1i1ahWVlZV06tSJhx9+mNGjR7Nhw4bTjn344YeZN28ev/71rwkLC+POO++koKCAwMDAZmW45557OHToENOmTSM4OJgbbriB8ePHU1FR0azziog59E3YRMQ01dXVXHnllcycOZOpU6eaHUdEPITeORERt9m5cyf79u0jJSWFiooKXnrpJQDGjRtncjIR8SQqJyLiVq+99hr79+/H39+fvn37smbNGqKjo82OJSIeRGsdERER8Sj6UmIRERHxKConIiIi4lFUTkRERMSjqJyIiIiIR1E5EREREY+iciIiIiIeReVEREREPIrKiYiIiHgUlRMRERHxKP8f1UswlOWNhRcAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "CML = pd.concat([pd.DataFrame(sigmas),pd.DataFrame(mus)], axis=1) \n",
    "CML.columns = [\"sigma\",\"mu\"]\n",
    "CML.plot.line(x=\"sigma\", y=\"mu\", grid=True, legend=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "268a1c2e",
   "metadata": {
    "papermill": {
     "duration": 0.045398,
     "end_time": "2024-05-31T20:00:49.821195",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.775797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion\n",
    "Modern Portfolio Theory (MPT) has established itself as a cornerstone of investment strategy. By emphasizing diversification and the relationship between risk and return across a portfolio, MPT equips investors with a framework for building portfolios optimized for their risk tolerance and return goals.\n",
    "\n",
    "While MPT's core concepts, like diversification, remain widely applicable, it's important to acknowledge the limitations of its assumptions. Real-world markets present complexities not fully captured by MPT's historical data reliance.\n",
    "\n",
    "Despite these limitations, MPT's core principles continue to serve as a valuable foundation for investors of all levels. By understanding the power of diversification and the relationship between risk and return, investors can make informed decisions to navigate the investment landscape and pursue their financial goals."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae34bbfb",
   "metadata": {
    "papermill": {
     "duration": 0.044165,
     "end_time": "2024-05-31T20:00:49.909936",
     "exception": false,
     "start_time": "2024-05-31T20:00:49.865771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<HTML>\n",
    "<BODY><center>\n",
    "  <IMG SRC=\"https://media3.giphy.com/media/BPJmthQ3YRwD6QqcVD/giphy.gif?cid=ecf05e47rsmou6giss4s3n1u8oajna2nbe22nd82wtlbr36r&ep=v1_gifs_search&rid=giphy.gif&ct=g\">\n",
    "      </center>\n",
    "    <h2 style=\"color: #00FFFF;\"><center>IF YOU ENJOY PLEASE UPVOTE AND GIVE ME A FEEDBACK  🥰.</center></h2>\n",
    "\n",
    "</BODY>\n",
    "</HTML>"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5000375,
     "sourceId": 8527557,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 83.580143,
   "end_time": "2024-05-31T20:00:50.881181",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-31T19:59:27.301038",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
