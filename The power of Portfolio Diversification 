{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8527557,"sourceType":"datasetVersion","datasetId":5000375}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/yousefsaeedian/the-power-of-portfolio-diversification?scriptVersionId=179993701\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Portfolio Diversification ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats \nfrom pandas_datareader import data \nfrom datetime import datetime\nfrom scipy.optimize import minimize\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:33:51.47889Z","iopub.execute_input":"2024-05-27T06:33:51.479316Z","iopub.status.idle":"2024-05-27T06:33:51.708469Z","shell.execute_reply.started":"2024-05-27T06:33:51.479278Z","shell.execute_reply":"2024-05-27T06:33:51.707237Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%load_ext autoreload\n%autoreload 2\n%matplotlib inline","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:33:52.71929Z","iopub.execute_input":"2024-05-27T06:33:52.719676Z","iopub.status.idle":"2024-05-27T06:33:52.769808Z","shell.execute_reply.started":"2024-05-27T06:33:52.719647Z","shell.execute_reply":"2024-05-27T06:33:52.768851Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sys\nsys.path.insert(1, '/kaggle/input/edhec-investment-management-datasets')\nimport edhec_risk_kit as erk","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:33:53.328714Z","iopub.execute_input":"2024-05-27T06:33:53.32916Z","iopub.status.idle":"2024-05-27T06:33:53.369142Z","shell.execute_reply.started":"2024-05-27T06:33:53.329125Z","shell.execute_reply":"2024-05-27T06:33:53.367753Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# using seaborn style (type plt.style.available to see available styles)\nplt.style.use(\"seaborn-dark\")","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:33:54.848723Z","iopub.execute_input":"2024-05-27T06:33:54.849323Z","iopub.status.idle":"2024-05-27T06:33:54.889166Z","shell.execute_reply.started":"2024-05-27T06:33:54.849286Z","shell.execute_reply":"2024-05-27T06:33:54.887812Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## The limits of Portfolio diversification\nThings that diversification **is effective** at: \n\n1. the way to increase the reward per unit of risk;\n2. the way way to decrease **idiosyncratic or specific** risk: in fact, it allows investors to reduce specific risk within their portfolios, which is how they can achieve a high reward per unit of risk.\n\nThings that diversification **is not effective** at: \n\n1. diversification **is not** an effective way to decrease the **systemic risk**: basically, if the entire market collapses, it does not really matter how much your portfolio is diversified since correlation levels tend to increase and diversification benefits tend to disappear.\n \nIn the following, we want to highlight the last point, i.e., we want to show that in case of huge financial crisis the diversification of a portfolio is not a guarantee of less risk.","metadata":{}},{"cell_type":"markdown","source":"Let us load the follwing dataset about 30 Industry portfolios:","metadata":{}},{"cell_type":"code","source":"nind = 30","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:34:00.075066Z","iopub.execute_input":"2024-05-27T06:34:00.07582Z","iopub.status.idle":"2024-05-27T06:34:00.118101Z","shell.execute_reply.started":"2024-05-27T06:34:00.075783Z","shell.execute_reply":"2024-05-27T06:34:00.115993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ind_rets   = erk.get_ind_file(filetype=\"rets\", nind=nind)\nind_nfirms = erk.get_ind_file(filetype=\"nfirms\", nind=nind)\nind_size   = erk.get_ind_file(filetype=\"size\", nind=nind)","metadata":{"tags":[],"execution":{"iopub.status.busy":"2024-05-27T06:34:00.879073Z","iopub.execute_input":"2024-05-27T06:34:00.879489Z","iopub.status.idle":"2024-05-27T06:34:01.0321Z","shell.execute_reply.started":"2024-05-27T06:34:00.879455Z","shell.execute_reply":"2024-05-27T06:34:01.030906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ind_rets.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:02.420151Z","iopub.execute_input":"2024-05-27T06:34:02.420525Z","iopub.status.idle":"2024-05-27T06:34:02.490913Z","shell.execute_reply.started":"2024-05-27T06:34:02.420499Z","shell.execute_reply":"2024-05-27T06:34:02.489598Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The dataframe **ind_rets** contains the returns (from 1926-2018) of $30$ portfolios including different industry sectors such as food, beer, smoke, etc. \n\nSuch portofolios are constructed by using the weights equal to the corresponding market capitalizations. \nThe **market capitalization** of a company is the **total value of the company** defined as \nthe number of shares outstanding of that company multiplied by the share price \n(for example, there are 100,000 shares of company \"A\", and the share price is 20.3, hence the market cap of company \"A\" is 2,030,000).\n\n\nFor example, the columns **Food** contains the returns of a portfolio consisting of all the companies in the food sectors for each month from 1926 to 2019. The portfolio has been constructed by weighting each company according to its market capitalization.\n\nNow, **the number of firms** composing each single sector are stored in **ind_nfirms**:","metadata":{}},{"cell_type":"code","source":"ind_nfirms.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:04.920293Z","iopub.execute_input":"2024-05-27T06:34:04.920699Z","iopub.status.idle":"2024-05-27T06:34:04.986633Z","shell.execute_reply.started":"2024-05-27T06:34:04.920666Z","shell.execute_reply":"2024-05-27T06:34:04.985357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"that is, in 1926-07, there were 43 (food) companies in the Food portfolio, 3 (beer) companies in the Beer portfolio, etc.\n\nFinally, the datframe **ind_size** contains the **average size** of the companies composing the portfolio:","metadata":{}},{"cell_type":"code","source":"ind_size.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:06.47363Z","iopub.execute_input":"2024-05-27T06:34:06.474964Z","iopub.status.idle":"2024-05-27T06:34:06.535543Z","shell.execute_reply.started":"2024-05-27T06:34:06.47492Z","shell.execute_reply":"2024-05-27T06:34:06.534359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"that is, the average size of the 43 Food companies in 1926-07 was 35.98, the average size of the 3 Beer companies was 7.12, ans so on (it does not matter the unit). \nBy **average size** we mean the **average of the market capitalizations** of the 43 food companies, of the 3 Beer companies, etc.","metadata":{}},{"cell_type":"markdown","source":"### Constructing the index\n\nThe first thing to do is to get the **market capitalization of each industry sector.**\nThis is simply given by the number of firms times their average size:","metadata":{}},{"cell_type":"code","source":"ind_mkt_cap = ind_nfirms * ind_size\nind_mkt_cap.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:08.198692Z","iopub.execute_input":"2024-05-27T06:34:08.199391Z","iopub.status.idle":"2024-05-27T06:34:08.263125Z","shell.execute_reply.started":"2024-05-27T06:34:08.199334Z","shell.execute_reply":"2024-05-27T06:34:08.261803Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now, we want to get the **total market capitalization**, in order to get the fraction of the \ntotal market capitalization which is in each industry. The total market capitalization\nis a single time series **representing the total value of the market at each month**. \nThis can be obtained by summing each market capitalization of each sector every month, i.e., \nby horizontally summing the **ind_mkt_cap**:","metadata":{}},{"cell_type":"code","source":"# total market capitalization: \ntotal_mkt_cap = ind_mkt_cap.sum(axis=1)\ntotal_mkt_cap.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:09.721824Z","iopub.execute_input":"2024-05-27T06:34:09.722233Z","iopub.status.idle":"2024-05-27T06:34:09.767986Z","shell.execute_reply.started":"2024-05-27T06:34:09.722203Z","shell.execute_reply":"2024-05-27T06:34:09.766972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"and now, we can divide each single market cap by the total market cap:","metadata":{}},{"cell_type":"code","source":"ind_cap_weights = ind_mkt_cap.divide(total_mkt_cap, axis=0)\nind_cap_weights.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:11.479156Z","iopub.execute_input":"2024-05-27T06:34:11.479771Z","iopub.status.idle":"2024-05-27T06:34:11.53778Z","shell.execute_reply.started":"2024-05-27T06:34:11.479739Z","shell.execute_reply":"2024-05-27T06:34:11.536577Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This means that, for example, in 1926-07 the total market capitalization was $26657.94$ and that \nthe Food companies (in the portfolio for this month) represented all together about the $5.8\\%$, \nthe Beer companies (in the portfolio for this month) represented all together about the $0.08\\%$, and so on. \n\nLet us visualize these things:","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(1,2,figsize=(18,4)) \ntotal_mkt_cap.plot(grid=True, ax=ax[0]) \nax[0].set_title(\"Total market cap 1929-2018\")\n\nind_cap_weights[[\"Steel\",\"Fin\",\"Telcm\"]].plot(grid=True, ax=ax[1])\nax[1].set_title(\"Steel, Finance, and Telecommunication Market caps (%) 1929-2018\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:14.19904Z","iopub.execute_input":"2024-05-27T06:34:14.199457Z","iopub.status.idle":"2024-05-27T06:34:15.096978Z","shell.execute_reply.started":"2024-05-27T06:34:14.199424Z","shell.execute_reply":"2024-05-27T06:34:15.096072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In the plot on the left we have the total market cap from 1929 to 2018. On the right, we have the Steel, Finance, and Telecommunication Market \ncaps 1929-2018 as a percentage of the total market cap. \n\nFor example, notice that while the Finance sector was around the $3\\%$ of the total market cap in 1929, in 2018 it was more than $15\\%$. \nOn the other hand, the Steel sector was around the $9\\%$ in 1929 until decreasing to the $0.2\\%$ in 2018.\n\nNow, let us find the **total maket return**, i.e., the return time series from the total market. \nThis is simply going to be the sum of the weights of each sector times their corresponding monthly returns.\n\nOnce we have the total market return series, we can **compound** it and obtain \nthe **total market index** (what we called the **wealth** in week 1):","metadata":{}},{"cell_type":"code","source":"total_market_return = (ind_cap_weights * ind_rets).sum(axis=1)\n\n# suppose to have invested a capital of 1000$ in the market\ncapital = 1000\ntotal_market_index = capital * (1 + total_market_return).cumprod()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:16.958111Z","iopub.execute_input":"2024-05-27T06:34:16.958518Z","iopub.status.idle":"2024-05-27T06:34:17.003104Z","shell.execute_reply.started":"2024-05-27T06:34:16.958486Z","shell.execute_reply":"2024-05-27T06:34:17.00188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(1,2,figsize=(18,4)) \n\ntotal_market_index.plot(grid=True, ax=ax[0]) \nax[0].set_title(\"Total market cap-weigthed index 1929-2018\")\n\ntotal_market_return.plot(grid=True, ax=ax[1])\nax[1].set_title(\"Total market cap-weigthed returns 1929-2018\")\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:18.075133Z","iopub.execute_input":"2024-05-27T06:34:18.075546Z","iopub.status.idle":"2024-05-27T06:34:18.781212Z","shell.execute_reply.started":"2024-05-27T06:34:18.075513Z","shell.execute_reply":"2024-05-27T06:34:18.780378Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Notice that the plot of the (cap-weigthed) index is, of course, the same (but different in values) as the plot of the total market capitalization.","metadata":{}},{"cell_type":"markdown","source":"Next, we what to see **how returns are related to market correlations**.\n\n### Rolling returns\n\nLet us plot the total market index, say from 1990, and plot together some moving average (MA) series corresponding to 60, 36, and 12 months (i.e, 5, 3, and 1 years), respectively, just to look at how the **.rolling** method works.","metadata":{}},{"cell_type":"code","source":"total_market_index[\"1990\":].plot(grid=True, figsize=(11,6), label=\"Total market cap-weighted index\")\n\ntotal_market_index[\"1990\":].rolling(window=60).mean().plot(grid=True, figsize=(11,6), label=\"60 months MA\") # 5 years MA\ntotal_market_index[\"1990\":].rolling(window=36).mean().plot(grid=True, figsize=(11,6), label=\"36 months MA\") # 3 years MA\ntotal_market_index[\"1990\":].rolling(window=12).mean().plot(grid=True, figsize=(11,6), label=\"12 months MA\") # 1 year MA\n\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:20.909381Z","iopub.execute_input":"2024-05-27T06:34:20.910161Z","iopub.status.idle":"2024-05-27T06:34:21.437944Z","shell.execute_reply.started":"2024-05-27T06:34:20.910123Z","shell.execute_reply":"2024-05-27T06:34:21.436623Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Ok. Now compute the **trailing 36 months compound returns of total_market_return**. \nThat is, we take the total market return series and open the rolling windows for 36 months. Then, for each rolling window (by using **.aggregate**) we compound the returns: ","metadata":{}},{"cell_type":"code","source":"tmi_trail_36_rets = total_market_return.rolling(window=36).aggregate( erk.annualize_rets, periods_per_year=12 )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:23.588596Z","iopub.execute_input":"2024-05-27T06:34:23.588976Z","iopub.status.idle":"2024-05-27T06:34:23.872526Z","shell.execute_reply.started":"2024-05-27T06:34:23.588947Z","shell.execute_reply":"2024-05-27T06:34:23.871253Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot them\ntotal_market_return.plot(grid=True, figsize=(12,5), label=\"Total market (monthly) return\")\ntmi_trail_36_rets.plot(grid=True, figsize=(12,5), label=\"Trailing 36 months total market compound return\")\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:25.389549Z","iopub.execute_input":"2024-05-27T06:34:25.39036Z","iopub.status.idle":"2024-05-27T06:34:25.829343Z","shell.execute_reply.started":"2024-05-27T06:34:25.390317Z","shell.execute_reply":"2024-05-27T06:34:25.828164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Rolling correlations: multi-indices and groupby\n\nLet us now compute the **rolling** correlations across industries, in the same way as we have computed the trailing 36 months compound returns. We use the **.corr()** method which computes the **pairwise correlation** between columns of the dataframe.","metadata":{}},{"cell_type":"code","source":"rets_trail_36_corr = ind_rets.rolling(window=36).corr()\nrets_trail_36_corr.index.names = [\"date\",\"industry\"]\nrets_trail_36_corr.tail()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:29.74973Z","iopub.execute_input":"2024-05-27T06:34:29.750204Z","iopub.status.idle":"2024-05-27T06:34:30.404732Z","shell.execute_reply.started":"2024-05-27T06:34:29.750168Z","shell.execute_reply":"2024-05-27T06:34:30.403418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The dataframe above is a **time series of correlation matrices**. \nThat is, each matrix represents the trailing $36$ months **correlation matrix** of compounded \nreturns of the industries for each available data. \nThat is, if we look at **rets_trail_36_corr.tail(30)** we would see the (trailing 36 months) correlation matrix of industries during the last available month, i.e., 2018-12,. \nIf we look at **rets_trail_36_corr.tail(60)** we would see the same correlation matrix for 2018-12 and the (trailing 36 months) correlation matrix of 2018-11, etc.\n\nIn the example above, we see that during 2018-12, the  (trailing 36 months) correlation between Whlsl and Food was about 0.47, \nthe (trailing 36 months) correlation betwenn Rtail and Smoke was about 0.03, and so on. \n\nNotice that due to the structure of such a dataframe, we have a **double index**: per each index date, we have the set of index industries. \n\nNext, we want to the see **averages of all these correlation matrices** for each date. To do that, we first get single correlation matrices  using **groupby by date** and the we take the average of them. The result is a pd.Series:","metadata":{}},{"cell_type":"code","source":"ind_trail_36_corr = rets_trail_36_corr.groupby(level=\"date\").apply(lambda corrmat: corrmat.values.mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:32.574339Z","iopub.execute_input":"2024-05-27T06:34:32.574723Z","iopub.status.idle":"2024-05-27T06:34:32.714073Z","shell.execute_reply.started":"2024-05-27T06:34:32.574693Z","shell.execute_reply":"2024-05-27T06:34:32.713072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax1 = plt.subplots(1,1,figsize=(14,6))\n\ntmi_trail_36_rets.plot(ax=ax1, color=\"blue\", grid=True, label=\"Trailing 36 months total market compound return\")\nax2 = ax1.twinx()\nind_trail_36_corr.plot(ax=ax2, color=\"orange\", grid=True, label=\"Trailing 36 months total market return correlations\")\n\nax1.set_ylabel('trail 36mo returns')\nax2.set_ylabel('trail 36mo corrs',rotation=-90)\nax1.legend(loc=2)\nax2.legend(loc=1)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:33.594188Z","iopub.execute_input":"2024-05-27T06:34:33.594554Z","iopub.status.idle":"2024-05-27T06:34:34.156752Z","shell.execute_reply.started":"2024-05-27T06:34:33.594527Z","shell.execute_reply":"2024-05-27T06:34:34.155747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"For example, during the 1929 crisis, we see that when (trailing 36 months) returns of the overall market falls, the average correlation of industries of the market increases, and that when returns recover, then correlations fall. \nThis can be also seen in the Lehman Brother crisis. When in 2007 returns started to fall then correlations increased.\n\nWhen this happens, we simply realize **the limits of diversification**. Returns from the entire market falls means that, on average, all industries in the market are suffering losses, i.e., their correlation increases, and it does not really matter how diversified the portfolio is. **Diversification may not help you when market crashes**.\n\nHowever, **this is not always so: look at the dot com crisis of from 1999.** Returns and correlations follow the same trend, showing that in this case diversification could help to stop losses$\\dots$\n\nIn general:","metadata":{}},{"cell_type":"code","source":"tmi_trail_36_rets.corr(ind_trail_36_corr)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:35.77882Z","iopub.execute_input":"2024-05-27T06:34:35.779247Z","iopub.status.idle":"2024-05-27T06:34:35.825508Z","shell.execute_reply.started":"2024-05-27T06:34:35.779215Z","shell.execute_reply":"2024-05-27T06:34:35.824074Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"this is, the correlation between the series of (trailing 36 months) compounded returns and the series of average correlations \nacross industries **is negative**.","metadata":{}},{"cell_type":"markdown","source":"## Risk insurance strategies \n\nRecent market crises have highlighted the benefits of risk-controlled strategies that allow investors to benefit from **downside risk protection**. \nHere, we describe a risk insurance strategy and then we move on to more sophisticated strategies that aim at achieving \nthe highest possible upside potential while imposing stringent limits to portfolio drawdown.\n\n### Constant Proportion Portfolio Insurance (CPPI)\n\nThe **CPPI** procedure allows to obtain option-like (convex) payoffs without actually using options. \n\nThe two asset classes that are used are a **risky asset** such as equities or mutual funds and a more **conservative asset** \nof either cash or treasury bonds. The idea is all about a **dynamic allocation** between the risky and the safe asset. \nThe percentage allocated to each depends on the so-called **cushion value**, defined as current portfolio value minus a \nchosen **floor value**. The cushion simply represents a certain value of our current portfolio value that we do not want to go below. \n\nMore in details: we allocate to a risky asset **a positive integer number $m$ times the cushion** and \nallocate the remaining proportion to the safe asset. \nA very first conclusion is that if during time the cushion goes to zero, i.e., our portfolio is loosing value \nand it is going to reach the floor, than our allocation to such asset also goes to zero by definition (i.e., we start allocating a hundred percent of the capital in the safe asset). \n\n**Example**: suppose we want to invest in a risky asset and we choose $m=4$ and a floor of $90\\%$ of our portfolio. \nThen, our allocation should be $4(1-0.9)\\% = 40\\%$ of our total capital to the risky asset (and then $60\\%$ to the safe asset).\n\n#### Allocation to the risky asset\n\nLet us denote as $A$ the value of our portfolio that we will call the **account value** (in general, is the capital invested). \nHence, the allocation to the risky asset has to be:\n$$\nE := m (A-F) = m A (1 - f), \n$$\nwhere $F:=fA$ is the **floor value** since $f$ denotes the percentage of our wealth we want to preserve (i.e., $0.9$ in the example above).\n\nIt turns out that **the multiplier $m$ should be chosen proportionally to the drop in value we are ready to take**. \nFor example, let us suppose that $F$ is our floor value, \nand that we have invested a quantity $E$ out of our account value $A$ to the risky asset. \nSuppose that during time the risky asset drops by $d\\%$. **What was the value of $m$ that did not break the floor?**\n\nBasically, we want to see which value of $m$ satisfies:\n$$\n\\text{account}-\\text{loss} = A - dE \\geq F = \\text{floor value},\n$$\nwhere $dE$ is the drop in value of our investment in the risky asset (the **loss**) and $F$ is the floor value. \nIf we substitute, we obtain:\n$$\nA - dmA(1-f) \\geq fA\n$$\nand then:\n$$\n1 - dm(1-f) \\geq f \n\\qquad\\Longrightarrow\\qquad\nm \\leq \\frac{1}{d}.\n$$\nThat is, if we choosed $m$ less than or equal to $1/d$ we did not go below the floor. \n\nNotice that **if $m = 1/d$**, then \n$$\n\\text{account}-\\text{loss} = A - dE = A - d\\frac{1}{d}A(1-f) = fA = \\text{floor value},\n$$\nthat is, we basically loose the entire drop and reach the floor. By choosing $m=6$, with such a drop, \nwe would loose more than the $20\\%$ and go below the floor.\n\n\n**Example**: let the drop be $20\\%$. Then\n$$\nm \\leq \\frac{1}{0.2} = 5,\n$$\nthat is, we should choose a multiplier at most equal to $5$ in order to not go below the floor.\n\n**In general: if $m\\%$ is the maximum drop that we are ready to take then the multiplier should be (at most) $1/m\\%$**.","metadata":{}},{"cell_type":"markdown","source":"### Implementing CPPI with Drawdown constraint\n\nAn algorithm using the CPPI strategy is based on the following three simple things:\n\n1. Computing the **cushion** (Account value minus Floor value)\n2. Compute the allocation to both the risky and the safe asset\n3. Update the account value based on returns\n\nLet us create this investment strategy using the industry returns and the total market index returns.","metadata":{}},{"cell_type":"code","source":"ind_return = erk.get_ind_file(filetype=\"rets\", nind=nind)\ntmi_return = erk.get_total_market_index_returns(nind=nind)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:34:39.073689Z","iopub.execute_input":"2024-05-27T06:34:39.074146Z","iopub.status.idle":"2024-05-27T06:34:39.196245Z","shell.execute_reply.started":"2024-05-27T06:34:39.074107Z","shell.execute_reply":"2024-05-27T06:34:39.19503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let us consider the industry returns from 2000 and let us get only three industries. \nThese are going to be our risky assets:","metadata":{}},{"cell_type":"code","source":"risky_rets = ind_return[\"2000\":][[\"Steel\",\"Fin\",\"Beer\"]]","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:01.140215Z","iopub.execute_input":"2024-05-27T06:35:01.140664Z","iopub.status.idle":"2024-05-27T06:35:01.189577Z","shell.execute_reply.started":"2024-05-27T06:35:01.140627Z","shell.execute_reply":"2024-05-27T06:35:01.188288Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"For the safe asset, let us just create an artificial set of assets which guarantee an annual return of $3\\%$:","metadata":{}},{"cell_type":"code","source":"safe_rets    = pd.DataFrame().reindex_like(risky_rets)\nsafe_rets[:] = 0.03 / 12","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:02.698809Z","iopub.execute_input":"2024-05-27T06:35:02.699208Z","iopub.status.idle":"2024-05-27T06:35:02.740857Z","shell.execute_reply.started":"2024-05-27T06:35:02.699179Z","shell.execute_reply":"2024-05-27T06:35:02.739337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let us now set our initial account value $A$, i.e., our investment, the floor value, and the multiplier $m$. ","metadata":{}},{"cell_type":"code","source":"start_value   = 1000\naccount_value = start_value\nfloor         = 0.8\nfloor_value   = floor * account_value\n\n# recall that a drop > 1/m% would break the floor  \nm = 3","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:03.858967Z","iopub.execute_input":"2024-05-27T06:35:03.859379Z","iopub.status.idle":"2024-05-27T06:35:03.900354Z","shell.execute_reply.started":"2024-05-27T06:35:03.85935Z","shell.execute_reply":"2024-05-27T06:35:03.898993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"account_history = pd.DataFrame().reindex_like(risky_rets)\ncushion_history = pd.DataFrame().reindex_like(risky_rets)\nrisky_w_history = pd.DataFrame().reindex_like(risky_rets)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:04.343995Z","iopub.execute_input":"2024-05-27T06:35:04.344758Z","iopub.status.idle":"2024-05-27T06:35:04.391077Z","shell.execute_reply.started":"2024-05-27T06:35:04.344709Z","shell.execute_reply":"2024-05-27T06:35:04.389677Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Before starting, let us compute the risky wealth series just to make a comparison with the CPPIs that we are going to make below.\nThat is, let us compute the wealth growths in case we would have only invested in the risky assets. This is simply:","metadata":{}},{"cell_type":"code","source":"risky_wealth = start_value * (1 + risky_rets).cumprod()\nrisky_wealth.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:05.980395Z","iopub.execute_input":"2024-05-27T06:35:05.980774Z","iopub.status.idle":"2024-05-27T06:35:06.030476Z","shell.execute_reply.started":"2024-05-27T06:35:05.980745Z","shell.execute_reply":"2024-05-27T06:35:06.02899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Right, run the CPPI strategy:","metadata":{}},{"cell_type":"code","source":"# For loop over dates \nfor step in range( len(risky_rets.index) ):\n    # computing the cushion (as a percentage of the current account value)\n    cushion = (account_value - floor_value) / account_value\n    \n    # compute the weight for the allocation on the risky asset\n    risky_w = m * cushion\n    risky_w = np.minimum(risky_w, 1)\n    risky_w = np.maximum(risky_w, 0)\n    # the last two conditions ensure that the risky weight is in [0,1]\n    \n    # compute the weight for the allocation on the safe asset\n    safe_w  = 1 - risky_w\n    \n    # compute the value allocation\n    risky_allocation = risky_w * account_value\n    safe_allocation  = safe_w  * account_value\n    \n    # compute the new account value: this is given by the new values from both the risky and the safe assets\n    account_value = risky_allocation * (1 + risky_rets.iloc[step] ) + safe_allocation  * (1 + safe_rets.iloc[step]  )\n        \n    # save data: current account value, cushions, weights\n    account_history.iloc[step] = account_value\n    cushion_history.iloc[step] = cushion \n    risky_w_history.iloc[step] = risky_w\n\n# given the CPPI wealth saved in the account_history, we can get back the CPPI returns\ncppi_rets = ( account_history / account_history.shift(1) - 1 ).dropna()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:08.960187Z","iopub.execute_input":"2024-05-27T06:35:08.960591Z","iopub.status.idle":"2024-05-27T06:35:09.39447Z","shell.execute_reply.started":"2024-05-27T06:35:08.96056Z","shell.execute_reply":"2024-05-27T06:35:09.393437Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let us look at the account_history created by the CPPI strategy:","metadata":{}},{"cell_type":"code","source":"ax = account_history.plot(figsize=(10,5), grid=True)\nax.set_ylabel(\"wealth ($)\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:10.300087Z","iopub.execute_input":"2024-05-27T06:35:10.301255Z","iopub.status.idle":"2024-05-27T06:35:10.732336Z","shell.execute_reply.started":"2024-05-27T06:35:10.301218Z","shell.execute_reply":"2024-05-27T06:35:10.731107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"and let us compare the CPPI strategies with the risky wealths in case of a $100\\%$ investment in the risky assets:","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(3,2,figsize=(18,15))\nax = ax.flatten()\n\n# Beer\naccount_history[\"Beer\"].plot(ax=ax[0], grid=True, label=\"CPPI Beer\")\nrisky_wealth[\"Beer\"].plot(ax=ax[0], grid=True, label=\"Beer\", style=\"k:\")\nax[0].axhline(y=floor_value, color=\"r\", linestyle=\"--\", label=\"Fixed floor value\")\nax[0].legend(fontsize=11)\n\n# Weights Beer\nrisky_w_history[\"Beer\"].plot(ax=ax[1], grid=True, label=\"Risky weight in Beer\")\nax[1].legend(fontsize=11)\n\n# Fin\naccount_history[\"Fin\"].plot(ax=ax[2], grid=True, label=\"CPPI Fin\")\nrisky_wealth[\"Fin\"].plot(ax=ax[2], grid=True, label=\"Fin\", style=\"k:\")\nax[2].axhline(y=floor_value, color=\"r\", linestyle=\"--\", label=\"Fixed floor value\")\nax[2].legend(fontsize=11)\n\n# Weights Fin\nrisky_w_history[\"Fin\"].plot(ax=ax[3], grid=True, label=\"Risky weight in Fin\")\nax[3].legend(fontsize=11)\n\n# Steel\naccount_history[\"Steel\"].plot(ax=ax[4], grid=True, label=\"CPPI Steel\")\nrisky_wealth[\"Steel\"].plot(ax=ax[4], grid=True, label=\"Steel\", style=\"k:\")\nax[4].axhline(y=floor_value, color=\"r\", linestyle=\"--\", label=\"Fixed floor value\")\nax[4].legend(fontsize=11)\n\n# Weights Steel\nrisky_w_history[\"Steel\"].plot(ax=ax[5], grid=True, label=\"Risky weight in Steel\")\nax[5].legend(fontsize=11)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:12.718748Z","iopub.execute_input":"2024-05-27T06:35:12.719202Z","iopub.status.idle":"2024-05-27T06:35:14.867927Z","shell.execute_reply.started":"2024-05-27T06:35:12.719167Z","shell.execute_reply":"2024-05-27T06:35:14.866496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"As expected, in case of growth periods, the blue line, which is the growth due to the CPPI strategy is normally below the dotted line, which is the growth due to a $100\\%$ investment in the risky asset. \n\nIn the case of Beer, we see that from about 2009 the weights of the portfolio becomes $1$ to the risky asset and $0$ to the safe asset, i.e., from 2009 we only invested purely in Beer.\n\nFor what concern Finance, the situation is different and we can see the advantage of the CPPI strategy. During the Lehman Brothers crisis, \na pure investment in Fin would have resulted in a loss that breaks the floor value (note the dotted line going below the red line). On the other hand, we see that the blue line stays above the floor and only from about 2013 the risky weight in Fin becomes $1$ again.\n\nLet us compare statistics of the pure risky asset investment and of the CPPI strategy:","metadata":{}},{"cell_type":"code","source":"erk.summary_stats( risky_rets )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:14.904197Z","iopub.execute_input":"2024-05-27T06:35:14.904631Z","iopub.status.idle":"2024-05-27T06:35:14.975992Z","shell.execute_reply.started":"2024-05-27T06:35:14.904597Z","shell.execute_reply":"2024-05-27T06:35:14.974704Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"erk.summary_stats( cppi_rets )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:17.664262Z","iopub.execute_input":"2024-05-27T06:35:17.664663Z","iopub.status.idle":"2024-05-27T06:35:17.732799Z","shell.execute_reply.started":"2024-05-27T06:35:17.664631Z","shell.execute_reply":"2024-05-27T06:35:17.73191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"If we look at drawdowns, we see that the pure investment in the risky assets would incur in higher losses (drawdowns). \nOn the other hand, higher returns are also expected. In fact Beer, for instance, has a annualized return of about $8\\%$ versus $7\\%$ of the CPPI investment strategy.\n\n### Implementing the drawdown constraint\n\nSo far, in our CPPI strategy we had a fixed floor value. However, this is not exactly what an investor would like to do. \nWe would like to **dinamically update the floor value** as long as the wealth of our portfolio increase such that the changes \naccording to the **previous peak** of the wealth growth.\n\nWe have implemented the CPPI in a method in our kit, so we now run the second version of the CPPI using the kit's method. \nIn case the drawdown is present, the method imposes the multiplier $m=1/\\text{drawdown}$. \n\nFor example, let us consider $\\text{drawdown}=0.2$ (i.e., $20\\%$):","metadata":{}},{"cell_type":"code","source":"res = erk.cppi(risky_rets, start_value=1000, floor=0.8, drawdown=0.2, risk_free_rate=0.03, periods_per_year=12)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:19.438856Z","iopub.execute_input":"2024-05-27T06:35:19.439305Z","iopub.status.idle":"2024-05-27T06:35:19.948693Z","shell.execute_reply.started":"2024-05-27T06:35:19.439267Z","shell.execute_reply":"2024-05-27T06:35:19.947434Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sector = \"Fin\"\n\nfig, ax = plt.subplots(1,2,figsize=(18,4))\nax = ax.flatten()\n\nres[\"CPPI wealth\"][sector].plot(ax=ax[0], grid=True, label=\"CPPI \"+sector)\nres[\"Risky wealth\"][sector].plot(ax=ax[0], grid=True, label=sector, style=\"k:\")\nres[\"Floor value\"][sector].plot(ax=ax[0], grid=True, color=\"r\", linestyle=\"--\", label=\"Fixed floor value\")\nax[0].legend(fontsize=11)\n\n# Weights Beer\nres[\"Risky allocation\"][sector].plot(ax=ax[1], grid=True, label=\"Risky weight in \"+sector)\nax[1].legend(fontsize=11)\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:20.639223Z","iopub.execute_input":"2024-05-27T06:35:20.639647Z","iopub.status.idle":"2024-05-27T06:35:21.329649Z","shell.execute_reply.started":"2024-05-27T06:35:20.639615Z","shell.execute_reply":"2024-05-27T06:35:21.328359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Compare the statistics of the sector pure risky returns and of the CPPI returns:","metadata":{}},{"cell_type":"code","source":"erk.summary_stats( risky_rets[sector] )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:21.938341Z","iopub.execute_input":"2024-05-27T06:35:21.938717Z","iopub.status.idle":"2024-05-27T06:35:21.99647Z","shell.execute_reply.started":"2024-05-27T06:35:21.93869Z","shell.execute_reply":"2024-05-27T06:35:21.995286Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"erk.summary_stats( res[\"CPPI returns\"][sector] )","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-05-27T06:35:22.941138Z","iopub.execute_input":"2024-05-27T06:35:22.941576Z","iopub.status.idle":"2024-05-27T06:35:22.997362Z","shell.execute_reply.started":"2024-05-27T06:35:22.941543Z","shell.execute_reply":"2024-05-27T06:35:22.995737Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"As expected, the maximum drawdown taken from the CPPI strategy has been about $19.8\\%$, and overall it had an annual return of $6\\%$. \nObserve the behaviour of the CPPI strategy when changing the maximum drawdown accepted:","metadata":{}},{"cell_type":"code","source":"sector = \"Fin\"\ndrawdowns = [0.2, 0.4, 0.6]\n    \nfig, ax = plt.subplots(1,2,figsize=(18,4))\nax = ax.flatten()\n\nres[\"Risky wealth\"][sector].plot(ax=ax[0], grid=True, style=\"k:\", label=sector)\nax[0].legend()\n\nsumm = pd.DataFrame()\nfor drawdown in drawdowns:\n    res = erk.cppi(risky_rets, start_value=1000, floor=0.8, drawdown=drawdown, risk_free_rate=0.03, periods_per_year=12)    \n    res[\"CPPI wealth\"][sector].plot(ax=ax[0], grid=True, label=\"CPPI dd={}%, m={}\".format(drawdown*100,round(res[\"m\"],1)) )\n    res[\"Risky allocation\"][sector].plot(ax=ax[1], grid=True, label=\"dd={}%, m={}\".format(drawdown*100,round(res[\"m\"],1)) )\n    \n    summ = pd.concat([summ, erk.summary_stats(res[\"CPPI returns\"][sector])], axis=0)\n        \nax[0].legend() \nax[1].legend(fontsize=11)\nax[1].set_title(\"Risky weight\", fontsize=11)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:24.538864Z","iopub.execute_input":"2024-05-27T06:35:24.5393Z","iopub.status.idle":"2024-05-27T06:35:26.687924Z","shell.execute_reply.started":"2024-05-27T06:35:24.539266Z","shell.execute_reply":"2024-05-27T06:35:26.686618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"summ.index = [[\"DD20%\",\"DD40%\",\"DD60%\"]]\nsumm","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:26.689636Z","iopub.execute_input":"2024-05-27T06:35:26.689991Z","iopub.status.idle":"2024-05-27T06:35:26.742924Z","shell.execute_reply.started":"2024-05-27T06:35:26.689963Z","shell.execute_reply":"2024-05-27T06:35:26.741272Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random walk generation - Geometric Brownian Motion \n\nA **Wiener process** $W_{t}$ is a real valued continuous-time **stochastic process** characterised by the following properties:\n 1. $W_{0}=0$;\n 2. $W$ has independent increments, i.e., for every $t>0$ the future increments $W_{t+u}-W_{t}$ (for $u\\geq 0$) \n are independent of the past values $W_{s}$, for all $s< t$; \n 3. $W$ has Gaussian increments, i.e., $W_{t+u}-W_{t}$ is normally distributed with mean $0$ and variance $u$, $W_{t+u}-W_t \\sim{\\mathcal {N}}(0,u)$; \n 4. $W$ has continuous paths, i.e., $W_{t}$ is continuous in $t$. \n\nDue to these features, we have that $\\mathbb{E}[W_t]=0$, $\\text{Var}(W_t) = t$ for a fixed time $t$ and the unconditional \nprobability density function is then: \n$$\nf_{W_{t}}(x) = \\frac{1}{ \\sqrt{2\\pi t} } e^{\\frac{-x^2}{2t}}. \n$$\n\n### Geometric Brownian Motion \n\nA **stochastic process** $S_t$ is said to follow a **geometric Brownian Motion** (GBM) \nif it satisfies the following **stochastic differential equation** (SDE):\n$$\ndS_{t} = \\mu S_{t}\\,dt + \\sigma S_t \\, dW_{t} \n$$\nwhere $W_{t}$ is a **Brownian motion** (i.e. a Wiener process), \n$\\mu$ is called the (percentage) **drift**, and \n$\\sigma$ is called the (percentage) **volatility**. Both the drift and the volatility are constants. \nWhile the drift is used to model a **trend** of the stochastic process, the volatility models unpredictable events \noccurring during this motion (basically, how much the process oscillates around its drift).\n\n#### Returns\n\nIn the equation, $dS_t = S_{t+dt} - S_t$ (and so $dW_t = W_{t+dt} - W_t$) for $dt>0$. \nNote that if we divide by $S_t$:\n$$\n\\frac{S_{t+dt} - S_t}{S_t} = \\mu dt + \\sigma (W_{t+dt} - W_t). \n$$\nThe quantity on the left-hand side is nothing but that the **percentage return**. \n\nAlso, since $W$ has Gaussian increments $W_{t+dt} - W_t$ \nwith zero mean variance $dt$, we can then substitute the increment with a random variable defined as $\\sqrt{dt}\\xi_t$, \nwhere $\\xi_t \\sim \\mathcal{N}(0,1)$ for all $t$. \nIn fact, $\\mathbb{E}[\\sqrt{dt}\\xi_t] = 0$ and $\\text{Var}(\\sqrt{dt}\\xi_t) = dt\\text{Var}(\\xi_t)=dt$. \nTherefore, we can rewrite:\n$$\n\\frac{S_{t+dt} - S_t}{S_t} = \\mu dt + \\sigma \\sqrt{dt}\\xi_t, \n\\quad\\xi_t\\sim\\mathcal{N}(0,1), \\; \\forall\\; t,\n$$\nand this gives us **a formula to actually generate (percentage) returns** from a geometric brownian motion.\nNotice that \n$$\n\\begin{align}\n\\mathbb{E}\\left[\\mu dt + \\sigma \\sqrt{dt}\\xi_t\\right] &= \\mu dt + \\sigma \\sqrt{dt} \\mathbb{E}[\\xi_t] = \\mu dt, \\\\\n\\text{Var}\\left[\\mu dt + \\sigma \\sqrt{dt}\\xi_t\\right] &= \\sigma^2 dt \\text{Var}(\\xi_t) = \\sigma^2 dt,\n\\end{align}\n$$\nthat is the returns generated in this way have mean $\\mu dt$ and volatility $\\sigma \\sqrt{dt}$.\n\n\n#### Prices and log-returns\n\nNote that if we divide by $dt$ the stochastic differential equation we have:\n$$\n\\frac{S_{t+dt} - S_t}{dt} = S_t \\left( \\mu + \\sigma \\frac{dW_t}{dt} \\right), \n$$\nwhich represents the evolution of the process over time. For example, the process $S_t$ can be a **stock price**. \nA solution to the equation can be provided by the following argument.\n\nFirst of all, we have:\n$$\n\\log(1 + x) \\approx x - \\frac{x^2}{2},\n$$\nwhen $x$ is sufficiently small.\nTherefore: \n$$\n\\begin{equation}\n\\begin{split}\n\\log\\left( \\frac{S_{t+dt}}{S_t} \\right) = \\log\\left(1 + \\frac{S_{t+dt} - S_t}{S_t}\\right) \n&\\approx \\frac{S_{t+dt} - S_t}{S_t} - \\frac{1}{2}\\left( \\frac{S_{t+dt} - S_t}{S_t} \\right)^2 \\\\\n&\\approx \\mu dt + \\sigma \\sqrt{dt}\\xi_t - \\frac{1}{2} \\left( \\mu dt + \\sigma \\sqrt{dt}\\xi_t \\right)^2 \\\\\n&\\approx \\mu dt + \\sigma \\sqrt{dt}\\xi_t - \\frac{1}{2} \\left( \\mu^2 \\underbrace{dt^2}_{\\approx 0} + \\sigma^2 dt \\underbrace{\\xi_t^2}_{\\approx \\mathbb{E}[\\xi_t^2]=1}   + 2\\mu \\underbrace{dt \\sqrt{dt}}_{\\approx 0} \\sigma \\xi_t \\right) \\\\\n&\\approx \\mu dt + \\sigma \\sqrt{dt}\\xi_t - \\frac{1}{2} \\sigma^2 dt = \\left(\\mu - \\frac{\\sigma^2}{2}\\right)dt + \\sigma\\sqrt{dt}\\xi_t.\n\\end{split}\n\\end{equation}\n$$\nThe quantity on the left-hand side of the equation above is called **log-return** and it follows a dynamic similar to that of the classic percentage return (see above). The difference is that the equation for the log-return a **scaled drift** ($\\mu-\\sigma^2/2$).\n\nTaking the exponential on both sides:\n$$\nS_{t+dt} \\approx S_t \\exp\\left( \\left(\\mu - \\frac{\\sigma^2}{2}\\right)dt + \\sigma\\sqrt{dt}\\xi_t  \\right).\n$$\nRight. To obtain the solution, just note that for every unit $t = ndt$, for a given $n\\in\\mathbb{N}$, then\n$$\n\\begin{align}\nS_t = S_{0+ndt} \\approx S_0 \\exp\\left( \\left(\\mu - \\frac{\\sigma^2}{2}\\right) (ndt) + \\sigma\\sqrt{ndt}\\xi_t \\right)\n= S_0 \\exp\\left( \\left(\\mu - \\frac{\\sigma^2}{2}\\right)t + \\sigma\\sqrt{t}\\xi_t  \\right) \n= S_0 \\exp\\left( \\left(\\mu - \\frac{\\sigma^2}{2}\\right)t + \\sigma W_t  \\right) \n\\end{align}\n$$\nThis is the equation for the evolution, for example, of a stock price starting from an initial price of $S_0$. \n\nIn our kit we have two functions whichc generate stock prices in the two ways we have seen above, one by **compounding the percentage \nreturns which follow a GBM**, and one by **solving the GBM equation satisfied by the log-returns**:","metadata":{}},{"cell_type":"code","source":"prices_1, rets_1 = erk.simulate_gbm_from_returns(n_years=10, n_scenarios=10, mu=0.07, sigma=0.15, periods_per_year=12, start=100.0)\nprices_2, rets_2 = erk.simulate_gbm_from_prices(n_years=10, n_scenarios=10, mu=0.07, sigma=0.15, periods_per_year=12, start=100.0)","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:29.194124Z","iopub.execute_input":"2024-05-27T06:35:29.194499Z","iopub.status.idle":"2024-05-27T06:35:29.250197Z","shell.execute_reply.started":"2024-05-27T06:35:29.194471Z","shell.execute_reply":"2024-05-27T06:35:29.248605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(1, 2, figsize=(20,5))\nprices_1.plot(ax=ax[0], grid=True, title=\"Prices generated by compounding returns which follow a GBM\")\nprices_2.plot(ax=ax[1], grid=True, title=\"Prices generated by solving the GBM equation satisfied by log-returns\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:29.758654Z","iopub.execute_input":"2024-05-27T06:35:29.759243Z","iopub.status.idle":"2024-05-27T06:35:30.586551Z","shell.execute_reply.started":"2024-05-27T06:35:29.759201Z","shell.execute_reply":"2024-05-27T06:35:30.585182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Sometimes the **drift** $\\mu$ in the geometric Brownian motion is decomposed so that to emphasize the risk-free rate, the volatility, and the sharpe ratio. In fact, recall that the **sharpe ratio** of a stock index was given by\n$$\n\\text{SR} := \\lambda = \\frac{R_s - R_f}{\\sigma} \n\\quad\\Longrightarrow\\quad \nR_s = R_f + \\sigma \\lambda, \n$$\nwith $\\sigma$ being the volatility of the stock index, $R_f$ being the risk-free rate, and $R_s$ being the annualized return from the stock index. \n\nFrom this, we see that since **$\\mu$ denotes the expected return of the stock index that we are modelling**, we simply want to emphasize that such **expected return on the risky stock index is given by a risk-free rate $R_f$ plus a risky premium** given by the unit of risk, i.e., the volatility $\\sigma$, times the reward per unit per risk, i.e., the sharpe ratio $\\lambda$. \n\nTherefore, we may find the geometric Brownian motion of (percentage) returns with $\\mu$ substitued by:\n$$\n\\frac{dS_{t}}{S_t} = (R_f + \\sigma \\lambda) dt + \\sigma dW_{t}. \n$$","metadata":{}},{"cell_type":"markdown","source":"#### Interactive random walk simulation\n\nUsing **ipywidgets** we can obtain interactive plots. Let us make interactive plots of random walk simulation:","metadata":{}},{"cell_type":"code","source":"import ipywidgets as widgets","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:32.015791Z","iopub.execute_input":"2024-05-27T06:35:32.016207Z","iopub.status.idle":"2024-05-27T06:35:32.161242Z","shell.execute_reply.started":"2024-05-27T06:35:32.016175Z","shell.execute_reply":"2024-05-27T06:35:32.159969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The function used is called **show_gbm** and basically it simply generate some random walks by calling the **simulate_gbm_from_returns** \nmethod and plot the random prices. The widget makes the plot interactive:","metadata":{}},{"cell_type":"code","source":"gbm_controls = widgets.interact(erk.show_gbm, \n                                n_years = (1, 10, 1),\n                                n_scenarios = (1, 100, 1),\n                                mu = (-0.30, 0.30, 0.01),\n                                sigma = (0.0, 0.50, 0.01),\n                                periods_per_year = [12, 52, 252],\n                                start = [100]\n                               )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:32.16317Z","iopub.execute_input":"2024-05-27T06:35:32.163616Z","iopub.status.idle":"2024-05-27T06:35:32.627294Z","shell.execute_reply.started":"2024-05-27T06:35:32.163583Z","shell.execute_reply":"2024-05-27T06:35:32.626099Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The GBM is used to model stock prices in the **Black–Scholes model** and is the most widely used model of stock price behavior.\n\nSome of the arguments for using GBM to model stock prices are the following:\n\n - The expected returns of GBM are independent of the value of the process (stock price), which agrees with what we would expect in reality;\n - The GBM process only assumes positive values, as real stock prices;\n - The GBM process shows the same kind of *roughness* in its paths as we see in real stock prices;\n - Calculations with GBM processes are relatively easy.\n \nHowever, GBM is not a completely realistic model, in fact: \n - In real stock prices, volatility changes over time (possibly stochastically), but in GBM processes, volatility is assumed constant;\n - In real life, stock prices often show jumps caused by, for example, news, whereas in GBM processes the path is continuous.","metadata":{}},{"cell_type":"markdown","source":"#### Interactive CPPI simulation - Monte Carlo\n\nHere, we called the method **show_cppi** in out kit \nwhich simulates a CPPI investment strategy starting by returns generated by geometric Brownian Motion. \nWe consider only the case of a fixed floor, i.e., the case with no drawdown contraint.\n\nUsing the widget interact we make the plot interactive:","metadata":{}},{"cell_type":"code","source":"cppi_controls = widgets.interact(erk.show_cppi, \n                                 n_years = (1, 10, 1),\n                                 n_scenarios = (1, 300, 1),\n                                 m = (1, 6, 0.5),\n                                 floor = (0.0, 1.0, 0.05),\n                                 mu = (-0.2, 0.4, 0.01),\n                                 sigma = (0.0, 0.5, 0.01),\n                                 risk_free_rate = (0.01, 0.05, 0.01),\n                                 periods_per_year = [12, 52, 252],\n                                 start = [100],\n                                 ymax = widgets.IntSlider(min=0, max=100, value=100, step=1, description=\"Zoom Y axis\")\n                               )","metadata":{"execution":{"iopub.status.busy":"2024-05-27T06:35:35.165442Z","iopub.execute_input":"2024-05-27T06:35:35.166768Z","iopub.status.idle":"2024-05-27T06:35:36.602939Z","shell.execute_reply.started":"2024-05-27T06:35:35.166716Z","shell.execute_reply":"2024-05-27T06:35:36.601981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## **Happy investing, and see you in the next tutorial!**","metadata":{}},{"cell_type":"markdown","source":"<HTML>\n<BODY><center>\n  <IMG SRC=\"https://media3.giphy.com/media/BPJmthQ3YRwD6QqcVD/giphy.gif?cid=ecf05e47rsmou6giss4s3n1u8oajna2nbe22nd82wtlbr36r&ep=v1_gifs_search&rid=giphy.gif&ct=g\">\n      </center>\n    <h2 style=\"color: #00FFFF;\"><center>IF YOU ENJOY PLEASE UPVOTE AND GIVE ME A FEEDBACK  🥰.</center></h2>\n\n</BODY>\n</HTML>","metadata":{}}]}