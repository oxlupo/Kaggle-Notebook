{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8403540,"sourceType":"datasetVersion","datasetId":5000375}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/yousefsaeedian/var-cvar-analysis-and-sharpe-ratio-calculation?scriptVersionId=178205176\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"![Graphical-presentation-of-VaR-and-CVaR-concepts.png](attachment:a561e9f4-3a88-40d3-9b81-0f1598c1cf40.png)\n\nWelcome to this Jupyter Notebook tutorial on Value at Risk (VaR), Conditional Value at Risk (CVaR), and the Sharpe Ratio. In the world of finance, risk management and performance evaluation are crucial aspects of portfolio management and investment decision-making. Understanding these metrics allows investors and financial analysts to quantify and manage risk effectively while optimizing portfolio returns.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"},"attachments":{"a561e9f4-3a88-40d3-9b81-0f1598c1cf40.png":{"image/png":""}}},{"cell_type":"markdown","source":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #d9534f; /* Bootstraps Danger color for 🔸 */\n        }\n        ul {\n            list-style-type: none;\n            padding-left: 0;\n        }\n        ul ul {\n            padding-left: 20px;\n        }\n        li {\n            margin: 8px 0;\n        }\n        a {\n            text-decoration: none;\n            color: #0275d8; /* Bootstraps Primary color */\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n\n<h1>🔸 Table of Contents</h1>\n<ul>\n    <li><a href=\"#importing-libraries\">1. Importing Libraries</a></li>\n    <li><a href=\"#return\">2. Return</a></li>\n    <li>\n        <a href=\"#compound-return\">3. Compound return</a>\n        <ul>\n            <li><a href=\"#compound-return-equal\">3.1. Compound return in case of equal returns</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#annualized-return\">4. Return per year (or annualized return)</a></li>\n    <li>\n        <a href=\"#volatility\">5. Volatility</a>\n        <ul>\n            <li><a href=\"#adjusting-volatility\">5.1. Adjusting the volatility</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#return-on-risk\">6. Return on risk</a></li>\n    <li><a href=\"#sharpe-ratio\">7. Sharpe Ratio</a></li>\n    <li><a href=\"#Dataset-loading\">8. Dataset Loading</a></li>\n    <li><a href=\"#Drawdown\">9. Drawdown</a></li>\n    <li><a href=\"#Gaussian density and distribution\">10. Gaussian density and distribution</a></li>\n    <li><a href=\"#Skewness and Kurtosis\">11. Skewness and Kurtosis</a></li>\n    <li><a href=\"#Downside risk measures\">12. Downside risk measures</a></li>\n    <li><a href=\"#Value at Risk (VaR)\">13. Value at Risk (VaR)</a></li>\n    <li><a href=\"#Conditional VaR (or Beyond VaR)\">14. Conditional VaR (or Beyond VaR)</a></li>\n    <li><a href=\"#Methods for estimating VaR and CVaR\">15. Methods for estimating VaR and CVaR</a></li>\n    <ul>\n            <li><a href=\"#Historical method (non parametric)\">15.1 Historical method (non parametric)</a></li>\n        </ul>\n    <ul>\n            <li><a href=\"#Historical method (non parametric)\">15.2 Parametric method (Gaussian)</a></li>\n        </ul>\n    <ul>\n            <li><a href=\"#Cornish-Fisher method (semi parametric)\">16.3 Cornish-Fisher method (semi parametric)</a></li>\n        </ul>\n    \n    \n    \n    \n","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:47:48.959384Z","iopub.execute_input":"2024-05-17T12:47:48.959772Z","iopub.status.idle":"2024-05-17T12:47:49.000829Z","shell.execute_reply.started":"2024-05-17T12:47:48.959741Z","shell.execute_reply":"2024-05-17T12:47:48.999365Z"}}},{"cell_type":"markdown","source":"### 1. Importing Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats \nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:34:48.576858Z","iopub.execute_input":"2024-05-14T10:34:48.577211Z","iopub.status.idle":"2024-05-14T10:34:48.803409Z","shell.execute_reply.started":"2024-05-14T10:34:48.577184Z","shell.execute_reply":"2024-05-14T10:34:48.801998Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%load_ext autoreload\n%autoreload 2\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:34:50.610366Z","iopub.execute_input":"2024-05-14T10:34:50.610782Z","iopub.status.idle":"2024-05-14T10:34:50.647012Z","shell.execute_reply.started":"2024-05-14T10:34:50.610722Z","shell.execute_reply":"2024-05-14T10:34:50.645575Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sys\nsys.path.append(\"../\")","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:34:51.900668Z","iopub.execute_input":"2024-05-14T10:34:51.901139Z","iopub.status.idle":"2024-05-14T10:34:51.933432Z","shell.execute_reply.started":"2024-05-14T10:34:51.901103Z","shell.execute_reply":"2024-05-14T10:34:51.9322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# using seaborn style (type plt.style.available to see available styles)\nsns.set_style(\"dark\")  ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:35:01.146195Z","iopub.execute_input":"2024-05-14T10:35:01.146574Z","iopub.status.idle":"2024-05-14T10:35:01.179613Z","shell.execute_reply.started":"2024-05-14T10:35:01.146545Z","shell.execute_reply":"2024-05-14T10:35:01.178356Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2. Returns\n\nDefinition of percentage (price) **return**: how much we gain (or loose) from the price at time $t+1$ and the price at time $t$. \nThat is:\n$$\nP_{t+1} = P_{t} + R_{t,t+1}P_{t} = P_{t}(1+R_{t,t+1})\n\\qquad\\Longrightarrow\\qquad \nR_{t,t+1} := \\frac{P_{t+1} - P_t}{P_{t}} = \\frac{P_{t+1}}{P_t} - 1. \n$$\n\nFor example, $P_t=\\$100$ and $P_{t+1}=\\$104$. Hence $R_{t,t+1}=104/100-1=0.04=4\\%$.","metadata":{}},{"cell_type":"markdown","source":"### 3. Compound return\n\nIf we look at two time periods, the overall returns is not just the sum of the returns over the two periods. \nFor example, consider the price variation during two time periods:\n$$\nP_1 = P_0 + R_{0,1}P_0\n\\qquad\\text{and}\\qquad \nP_2 = P_1 + R_{1,2}P_1. \n$$\nSubstitue $P_1$ into $P_2$:\n$$\nP_2 = P_0 + R_{0,1}P_0 + R_{1,2}( P_0 + R_{0,1}P_0 ) = P_0 + R_{0,1}P_0 + R_{1,2}P_0 + R_{1,2}R_{0,1}P_0.\n$$\nHence, the **total return** over the period $(0,2)$ is given by:\n$$\nR_{0,2} = \\frac{P_2}{P_0} - 1 \n= 1 + R_{0,1}+R_{1,2}+R_{1,2}R_{0,1} - 1 \n= (1 + R_{0,1})(1 + R_{1,2}) - 1.\n$$\nThat is, in general, given a time frame $(t, t+k)$, with $k>1$:\n$$\nR_{t,t+k} = (1+R_{t,t+1})(1+R_{t+1,t+2})\\cdots(1+R_{t+k-1,t+k}) - 1.\n$$","metadata":{}},{"cell_type":"markdown","source":"### 3.1. Compound return in case of equal returns\n\nIf the returns are the same over all time periods, say $R$, for the entire given time frame $(t, t+k)$, with $k>1$, \nthen the compound returns becomes simply\n$$\nR_{t,t+k} = (1+R)^{k} - 1.\n$$","metadata":{}},{"cell_type":"markdown","source":"#### Examples\n\n**1)** Suppose we buy a stock that on the first day goes $10\\%$ up whereas on the second day goes $3\\%$ down.\n**What is the total return at the end of the second day?**\n\nUsing the formula for compound returns:\n$$\nR_{0,2} = (1 + R_{0,1})(1 + R_{1,2}) - 1 = (1 + 0.10)(1 - 0.03) - 1 = 0.066999 = 6.7\\%.\n$$\n\nAs we can see, this is not simply $10\\%$ minus $3\\%$, i.e., $7\\%$, but it is something lower$\\dots$","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:39:34.128392Z","iopub.execute_input":"2024-05-14T10:39:34.128811Z","iopub.status.idle":"2024-05-14T10:39:34.165455Z","shell.execute_reply.started":"2024-05-14T10:39:34.128777Z","shell.execute_reply":"2024-05-14T10:39:34.163716Z"}}},{"cell_type":"markdown","source":"**2) What is the annualized return of a stock** which has a $1\\%$ return over a quarter, i.e., three months \n(that is, supposing that the stock return is $1\\%$ over all quarters)? \n\nAs the returns over quarters are the same ($1\\%$), and in one year there are $4$ quarters, we use the simplified formula for \ncompound returns:\n$$\nR_{0,12} = (1 + R_{0,3})^4 - 1 = (1 + 0.01)^4 - 1 = 0.040604 = 4.06\\%, \n$$\nwhere $R_{0,3}$ is the same as $R_{3,6}$, and so on.","metadata":{}},{"cell_type":"markdown","source":"### 4. Return per month\nSuppose we have a series of **monthly returns**, i.e., each timeframe $t$ represents a month time period. \nIn the example above, for the period $(0,2)$ we have two months, with prices $P_0$ (at the beginnnig of the first month), $P_1$ at the end of the first month, and $P_2$ at the end of the second month. \n\nThe compound (total) return after two months is $R_{total} := R_{0,2} = (1+R_{0,1})(1+R_{1,2})-1$, where $R_{0,1}$ and $R_{1,2}$ are the returns of the first and the second month, respectively. \n\nWhat is the **return per month**, i.e., **the fixed return for each month that will give the same total return $R_{total}$?** \nThat is, we are asking for the value $R_{pm}$ such that:\n$$\nR_{total} = (1 + R_{pm})^2 - 1,\n$$\nwhere we have used the simplified formula as $R_{pm}$ is going to be the same for the $2$ months considered. \nWe get: \n$$\nR_{pm} = (1 + R_{total})^{1/2} - 1 = ((1+R_{0,1})(1+R_{1,2}))^{1/2} - 1.\n$$\n\nIn general, in the equation above we **divide by the number of given months** ($2$ in this case). ","metadata":{}},{"cell_type":"markdown","source":"### 5. Return per year (or annualized return)\nIf we have monthly returns and a (fixed) *return per month*, we can *infer* what will be the **annualized return**, or **return per year**, i.e., the total (compound) return after $12$ months: \n$$\nR_{py} = (1 + R_{pm})^{12} - 1. \n$$\n\nIf we don't compute the return per month beforehand, we can still obtain the return per year from our series of monthly returns, \nin particular, from the total compound return. \nFor example, by using the formula for $R_{pm}$ that we have above, we obtain \n$$\nR_{py} \n= \\left(1 + \\underbrace{R_{pm}}\\right)^{12} - 1\n= \\left(1 + \\underbrace{(1+R_{total})^{1/2} - 1}\\right)^{12} - 1 = (1 + R_{total})^{12/2} - 1.\n$$\n\nIn general, given a series of monthly returns, there holds\n$$\nR_{py} = (1 + R_{total})^{12/n} - 1,\n$$\nwhere $n$ is the number of available months under consideration and $R_{total}$ is the compound (total) return over all the available months we have. \n\n#### General formula\n\nThe formula above works for any kind of available returns that we may have, e.g., daily, weekly, or monthly returns. \nThe difference would be in the numerator of the power.\n\nFor example, if we have a series of **daily returns**, then the annualized return is given by:\n$$\nR_{py} \n= \\left(1 + \\underbrace{R_{pd}}\\right)^{252} - 1\n= \\left(1 + \\underbrace{(1+R_{total})^{1/N_{\\text{rets}}} - 1}\\right)^{252} - 1 = (1 + R_{total})^{252/N_{\\text{rets}}} - 1,\n$$\nwhere again, $R_{total}$ is the compound (total) return of the series of (daily) returns that we have, \n$252$ is the approximate number of (**trading**) days in one year, and $N_{\\text{rets}}$ is the lenght of our series of returns. \n\n**In general**:\n$$\nR_{py} = (1 + R_{total})^{P_{y}/N_{\\text{rets}}} - 1,\n\\quad\\text{where}\\quad\nP_{y} =\n\\begin{cases}\n&252  & \\text{if we have daily returns},\\\\\n&52   & \\text{if we have weekly returns},\\\\\n&12  & \\text{if we have monthly returns.}\n\\end{cases}\n$$\nThe variable $P_y$ is called *periods per year*.\n","metadata":{}},{"cell_type":"markdown","source":"### 6. Volatility (or risk)\n\nThe **volatility** of an asset is simply the standard deviation of the returns of the asset:\n$$\n\\sigma := \\sqrt{  \\frac{1}{N-1} \\sum_{t} (R_t - \\mu)^2  },\n$$\nwhere $R_t$ is our series of returns at time $t$ and $\\mu$ is the sample mean of the returns, i.e., $\\mu := \\frac{1}{N}\\sum_{t}R_t$, \nwith $N$ denoting the number of returns.\n\n### 6.1. Adjusting the volatility\n\nSuppose that we have **monthly** returns and we compute the volatily of our asset, that is, we compute the **monthly volatility**. \nWhat if we want to know the **volatility over the year?** \nIt is clear that we cannot compare the volatility obtained from data corresponding to different time scales. \nThe way to proceed is the following:\n$$\n\\sigma_{ann} = \\sigma_{p} \\sqrt{p},\n$$\nwhere $\\sigma_{ann}$ is the **annualized volatility**, or volatility per year, whereas $p$ stands for the period considered \nand $\\sigma_p$ the corresponding computed volatility. \n\nFor example:\n\n1) In case of **monthly** returns with volatility $\\sigma_m$, we compute the annualized volatility \nby doing $\\sigma_{ann}=\\sigma_m\\sqrt{12}$;\n\n2) In case of **weekly** returns with volatility $\\sigma_w$, we compute the annualized volatility \nby doing $\\sigma_{ann}=\\sigma_w\\sqrt{52}$;\n\n3) In case of **daily** returns with volatility $\\sigma_d$, we compute the annualized volatility \nby doing $\\sigma_{ann}=\\sigma_d\\sqrt{252}$.","metadata":{}},{"cell_type":"markdown","source":"### Example","metadata":{}},{"cell_type":"code","source":"# Generate two stock prices from N(10,1) and N(10,5) normal distributions \nnp.random.seed(51)\nstocks = pd.DataFrame( {\"Stock A\" : np.random.normal(10,1,size=10), \"Stock B\" : np.random.normal(10,5,size=10)} )\nstocks.index.name = \"Months\"\nstocks = round(stocks,2)\nstocks","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:41:28.908879Z","iopub.execute_input":"2024-05-14T10:41:28.909746Z","iopub.status.idle":"2024-05-14T10:41:28.965874Z","shell.execute_reply.started":"2024-05-14T10:41:28.909705Z","shell.execute_reply":"2024-05-14T10:41:28.964718Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compute the returns using the shift method\nstocks[\"Stock A Rets\"] = stocks[\"Stock A\"]/stocks[\"Stock A\"].shift(1) - 1\nstocks[\"Stock B Rets\"] = stocks[\"Stock B\"]/stocks[\"Stock B\"].shift(1) - 1\nstocks = round(stocks,2)\nstocks","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:41:38.113325Z","iopub.execute_input":"2024-05-14T10:41:38.114054Z","iopub.status.idle":"2024-05-14T10:41:38.159256Z","shell.execute_reply.started":"2024-05-14T10:41:38.114019Z","shell.execute_reply":"2024-05-14T10:41:38.158036Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"f, ax = plt.subplots(1,2,figsize=(20,4))\nax[0].plot( stocks[[\"Stock A\",\"Stock B\"]] )\nax[0].set_title('Stock price')\nax[0].set_xlabel(\"months\") \nax[0].set_ylabel(\"Price (USD)\")\nax[0].legend([\"Stock A\",\"Stock B\"])\nax[0].grid()\n(stocks[[\"Stock A Rets\",\"Stock B Rets\"]].drop(index=0,axis=0)*100).plot.bar(ax=ax[1]) \nax[1].set_title('Stock returns')\nax[1].set_xlabel(\"months\") \nax[1].set_ylabel(\"Returns (%)\") \nax[1].legend([\"Stock A\",\"Stock B\"])\nax[1].grid()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:41:43.58816Z","iopub.execute_input":"2024-05-14T10:41:43.588536Z","iopub.status.idle":"2024-05-14T10:41:44.427294Z","shell.execute_reply.started":"2024-05-14T10:41:43.588501Z","shell.execute_reply":"2024-05-14T10:41:44.425791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compute the total (compound) return over the entire time frame (using prod() method)\ntotal_ret = (1 + stocks[[\"Stock A\",\"Stock B\"]]).prod() - 1 \nprint(\"Total returns (%):\")\ntotal_ret * 100","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:41:52.453696Z","iopub.execute_input":"2024-05-14T10:41:52.454101Z","iopub.status.idle":"2024-05-14T10:41:52.493052Z","shell.execute_reply.started":"2024-05-14T10:41:52.454068Z","shell.execute_reply":"2024-05-14T10:41:52.491823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compute the means and the volatility of the stocks\nmeans      = stocks[[\"Stock A\",\"Stock B\"]].mean()\nvolatility = stocks[[\"Stock A\",\"Stock B\"]].std()\nprint(\"Means:\")\nprint(means)\nprint(\"Volatility:\")\nprint(volatility)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:41:56.973667Z","iopub.execute_input":"2024-05-14T10:41:56.974073Z","iopub.status.idle":"2024-05-14T10:41:57.01369Z","shell.execute_reply.started":"2024-05-14T10:41:56.974044Z","shell.execute_reply":"2024-05-14T10:41:57.012471Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Note that the total returns of the two stock is about the same ($\\sim 29\\%$) although stock B is about seven times more volatile than stock A.","metadata":{}},{"cell_type":"code","source":"# annualizing the volatility\nann_volatility = volatility * np.sqrt(12)\nann_volatility","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:42:09.613203Z","iopub.execute_input":"2024-05-14T10:42:09.613675Z","iopub.status.idle":"2024-05-14T10:42:09.649347Z","shell.execute_reply.started":"2024-05-14T10:42:09.613641Z","shell.execute_reply":"2024-05-14T10:42:09.648168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Return on risk \n\nThis is a measure to obtain **how much reward (return) do we get from our the investment in some asset per unit of risk** (volatility). \nBy definition, this is simply the ratio between the return and the volatility:\n$$\n\\text{ROR} := \\frac{\\text{RETURN}}{\\text{RISK}} = \\frac{R}{\\sigma}, \n$$\nwhere RETURN is the total (compound) return over the period under consideration. \nLet us compute the RORs for the two stocks in the example above.","metadata":{}},{"cell_type":"code","source":"ROR = total_ret / volatility\nprint(\"Return on risk:\")\nROR","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:42:35.224173Z","iopub.execute_input":"2024-05-14T10:42:35.224587Z","iopub.status.idle":"2024-05-14T10:42:35.260713Z","shell.execute_reply.started":"2024-05-14T10:42:35.224552Z","shell.execute_reply":"2024-05-14T10:42:35.259644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Higher ROR for stock A just says that **we get a better return (per unit of risk) if we invest in this stock**, or, in other words, it is better to invest in it rather than invest in stock B nonetheless the total return from the two stock is about the same.","metadata":{}},{"cell_type":"markdown","source":"### 7. Sharpe Ratio\nThe **sharpe ratio** is obtained from an adjustment to the return on risk ratio. \nBasically, the adjustment is to subtract from the return somenthing called **risk free rate** which is the return from some asset considered risk-free, i.e., with a very small volatility (e.g., **US Treasury Bill**, 30 days or less). The **sharpe ratio** is defined as:\n$$\n\\lambda := \\frac{E_R}{\\sigma}\n\\quad\\text{where}\\quad\nE_R := R - R_F, \n$$\nwhere $E_R$ is called the **excess return** which is therefore nothing but that the return $R$ minus a **benchmark (risk-free) return**.","metadata":{}},{"cell_type":"code","source":"# Supposing that the risk free ratio is 3%, we would have:\nrisk_free_rate = 0.03 \nexcess_return  = total_ret - risk_free_rate\nsharpe_ratio   = excess_return / volatility\nsharpe_ratio","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:42:57.953664Z","iopub.execute_input":"2024-05-14T10:42:57.954069Z","iopub.status.idle":"2024-05-14T10:42:57.989272Z","shell.execute_reply.started":"2024-05-14T10:42:57.954039Z","shell.execute_reply":"2024-05-14T10:42:57.988087Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In our example, the situation would not change that much.","metadata":{}},{"cell_type":"markdown","source":"## 7. Dataset Loading","metadata":{}},{"cell_type":"code","source":"file_to_load = \"/kaggle/input/edhec-investment-management-datasets/Portfolios_Formed_on_ME_monthly_EW.csv\"\ndf = pd.read_csv(file_to_load, index_col=0, parse_dates=True, na_values=-99.99, date_format=\"%Y%m\")\ndf.index = pd.to_datetime(df.index, format=\"%Y%m\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:44:44.283482Z","iopub.execute_input":"2024-05-14T10:44:44.284282Z","iopub.status.idle":"2024-05-14T10:44:44.35703Z","shell.execute_reply.started":"2024-05-14T10:44:44.284245Z","shell.execute_reply":"2024-05-14T10:44:44.355964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"These are all kinds of returns for different portfolios of US stocks divided in capitalization (in quantiles). \nFor example, **Lo 10** denotes the Small caps companies (bottom decile), i.e., the lowest $10\\%$ of US stocks, whereas **Hi 10** denotes the Large Caps (top decile), i.e., the top $10\\%$ of US stocks.\n\nNote that these are monthly data, i.e., monthly returns from 07/1926 up to 12/2018.","metadata":{}},{"cell_type":"code","source":"# take Low 10 and High 10. Moreover, divede by 100, since they are returns\ndff = df[[\"Lo 20\", \"Hi 20\"]][\"1999\":\"2015\"] / 100\nprint(dff.index)\ndff.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:45:28.653942Z","iopub.execute_input":"2024-05-14T10:45:28.654358Z","iopub.status.idle":"2024-05-14T10:45:28.707795Z","shell.execute_reply.started":"2024-05-14T10:45:28.654324Z","shell.execute_reply":"2024-05-14T10:45:28.706457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dff.plot(grid=True, figsize=(10,4))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:45:35.324734Z","iopub.execute_input":"2024-05-14T10:45:35.325402Z","iopub.status.idle":"2024-05-14T10:45:35.840346Z","shell.execute_reply.started":"2024-05-14T10:45:35.325367Z","shell.execute_reply":"2024-05-14T10:45:35.839181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# compute the volatility\nvol = dff.std()\nvol","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:45:43.689099Z","iopub.execute_input":"2024-05-14T10:45:43.689519Z","iopub.status.idle":"2024-05-14T10:45:43.726454Z","shell.execute_reply.started":"2024-05-14T10:45:43.689484Z","shell.execute_reply":"2024-05-14T10:45:43.725148Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Note that this is the **monthly** volatility since we have monthly data. Compute the annualized volatility:","metadata":{}},{"cell_type":"code","source":"annualized_vol = vol * np.sqrt(12)\nannualized_vol *100","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:45:57.719205Z","iopub.execute_input":"2024-05-14T10:45:57.7202Z","iopub.status.idle":"2024-05-14T10:45:57.757465Z","shell.execute_reply.started":"2024-05-14T10:45:57.720156Z","shell.execute_reply":"2024-05-14T10:45:57.756161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now, we want to compute the **return per month**. We need the total numbers of months of the entire timeframe (from 1926 to 2018), which is simply the number of rows of the dataframe. Then we can use the formula for the return per month:","metadata":{}},{"cell_type":"code","source":"nmonths = dff.shape[0]\ntotal_return = (1 + dff).prod() - 1\nreturn_per_month = (1 + total_return)**(1/nmonths) - 1\nreturn_per_month","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:46:11.714534Z","iopub.execute_input":"2024-05-14T10:46:11.715306Z","iopub.status.idle":"2024-05-14T10:46:11.752729Z","shell.execute_reply.started":"2024-05-14T10:46:11.71527Z","shell.execute_reply":"2024-05-14T10:46:11.751441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now compute the **return per year** (**annualized return**) by using either the return per month or using the total return.","metadata":{}},{"cell_type":"code","source":"# return-per-year: using the formula with return per month and power 12\nannualized_return = (1 + return_per_month)**12 - 1\nprint(annualized_return *100) \n\n# which is the same as:\n# return-per-year: using the formula with total return and power 12/no. of months  \n#annualized_return = (1 + total_return) ** (12/nmonths) - 1\n#print( annualized_return ) ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:46:27.135323Z","iopub.execute_input":"2024-05-14T10:46:27.135762Z","iopub.status.idle":"2024-05-14T10:46:27.172876Z","shell.execute_reply.started":"2024-05-14T10:46:27.135728Z","shell.execute_reply":"2024-05-14T10:46:27.171737Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Compute the **ROR and sharpe ratios**:","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:46:35.463449Z","iopub.execute_input":"2024-05-14T10:46:35.463855Z","iopub.status.idle":"2024-05-14T10:46:35.496916Z","shell.execute_reply.started":"2024-05-14T10:46:35.463823Z","shell.execute_reply":"2024-05-14T10:46:35.495474Z"}}},{"cell_type":"code","source":"ROR = annualized_return / annualized_vol\nROR","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:46:44.995525Z","iopub.execute_input":"2024-05-14T10:46:44.995903Z","iopub.status.idle":"2024-05-14T10:46:45.031378Z","shell.execute_reply.started":"2024-05-14T10:46:44.995874Z","shell.execute_reply":"2024-05-14T10:46:45.030233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This would suggest to invest in Large caps (Hi 10) due to higher return per unit of risk. However:","metadata":{}},{"cell_type":"code","source":"# define a risk free rate\nrisk_free_rate = 0.03\nexcess_return  = annualized_return - risk_free_rate\nsharpe_ratio   = excess_return / volatility\nsharpe_ratio","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:47:06.583794Z","iopub.execute_input":"2024-05-14T10:47:06.584199Z","iopub.status.idle":"2024-05-14T10:47:06.621319Z","shell.execute_reply.started":"2024-05-14T10:47:06.584169Z","shell.execute_reply":"2024-05-14T10:47:06.620171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Question:\n\nSuppose that asset A loses $1\\%$ a month for $12$ months and asset B gains $1\\%$ per month for $12$ months. \n**Which is the more volatile asset?** The answer is easy, none of them (**their volatility is zero**), \nsince they do not actually oscillate, the first stock goes all the way down while the second stock goes all the way up. \n\nBut let us see it with an example:","metadata":{}},{"cell_type":"code","source":"# Create the two artifical assets with this features \na = [10]\nb = [10]\nfor i in range(12):\n    a.append( a[i] + (-0.01)*a[i] ) # return A loses 1% every month\n    b.append( b[i] + (0.01)*b[i]  ) # return B gains 1% every month\ndf = pd.DataFrame({\"A\":a, \"B\":b})\n\n# Adding returns: by construction they are equal to -0.01 and 0.01 for each month...\ndf[\"returns A\"] = df[\"A\"] / df[\"A\"].shift(1) - 1\ndf[\"returns B\"] = df[\"B\"] / df[\"B\"].shift(1) - 1\ndf","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:47:39.908542Z","iopub.execute_input":"2024-05-14T10:47:39.908962Z","iopub.status.idle":"2024-05-14T10:47:39.960468Z","shell.execute_reply.started":"2024-05-14T10:47:39.90893Z","shell.execute_reply":"2024-05-14T10:47:39.959273Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Note that asset B gains more than how much asset A looses (in absolute value)\ntotal_returns = (1 + df[[\"returns A\",\"returns B\"]]).prod() - 1 \ntotal_returns","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:47:47.449321Z","iopub.execute_input":"2024-05-14T10:47:47.449751Z","iopub.status.idle":"2024-05-14T10:47:47.488303Z","shell.execute_reply.started":"2024-05-14T10:47:47.449717Z","shell.execute_reply":"2024-05-14T10:47:47.487196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"> i.e., investing in asset A will incur in a lost of 11.36% whereas investing in asset B will incur in a gain of 12.68%.","metadata":{}},{"cell_type":"code","source":"# Finally, compute the volatility:\nvolatility = df[[\"returns A\",\"returns B\"]].std()\nvolatility","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:48:20.009093Z","iopub.execute_input":"2024-05-14T10:48:20.009501Z","iopub.status.idle":"2024-05-14T10:48:20.047815Z","shell.execute_reply.started":"2024-05-14T10:48:20.009467Z","shell.execute_reply":"2024-05-14T10:48:20.046597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**The volatily is zero in both cases** as we expected.","metadata":{}},{"cell_type":"markdown","source":"### 8. Drawdown\n\nThe Drawdown is defined as the **worst return** we would experience if we buy at very highest peak and sell at very lowest point. \nIt measures **potential losses**, and therefore it is a **downside risk measure**.","metadata":{}},{"cell_type":"code","source":"# Load the data set \nfile_to_load = \"/kaggle/input/edhec-investment-management-datasets/Portfolios_Formed_on_ME_monthly_EW.csv\"\nrets = pd.read_csv(file_to_load, index_col=0, parse_dates=True, na_values=-99.99)\n\n# Consider only Low 10 and High 10, i.e., Small Caps and Large Caps\n# Moreover, divide by 100, since they are returns, and change the index to datatime\nrets = rets[[\"Lo 20\", \"Hi 20\"]] / 100\nrets.columns = [\"Small Caps\", \"Large Caps\"]\nrets.index = pd.to_datetime(rets.index, format=\"%Y%m\")   #.to_period(\"M\") forces the index to be monthly period...\nrets.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:50:52.399394Z","iopub.execute_input":"2024-05-14T10:50:52.40033Z","iopub.status.idle":"2024-05-14T10:50:52.458707Z","shell.execute_reply.started":"2024-05-14T10:50:52.400293Z","shell.execute_reply":"2024-05-14T10:50:52.457591Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In order to compute the drawdon of the two indices we do the following steps\n1. Compute the so-called **wealth index**, i.e., the value of the portfolio as it compounds over times. That is, given the series of returns, it is the series of compound returns at each time frame (using *cumprod()* method) \n2. Compute previous peaks\n3. Compute the **drawdown**, i.e., the wealth values as a percentage of previous peaks","metadata":{}},{"cell_type":"code","source":"# we start from $100 and see how they evolve according to the returns\nwealth_index = 100 * (1 + rets).cumprod()\nwealth_index.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:11.568612Z","iopub.execute_input":"2024-05-14T10:51:11.569049Z","iopub.status.idle":"2024-05-14T10:51:11.608547Z","shell.execute_reply.started":"2024-05-14T10:51:11.569011Z","shell.execute_reply":"2024-05-14T10:51:11.60723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"f, ax = plt.subplots(figsize=(20,5), nrows=1, ncols=2)\n# Plot of the wealth indices\nwealth_index[\"Small Caps\"].plot(grid=True, ax=ax[0], label=\"small caps\", legend=True)\nwealth_index[\"Large Caps\"].plot(grid=True, ax=ax[1], label=\"large caps\", legend=True )\n# Using the cummax() method we can compute the cumulative max (peaks) throughout the series\nprevious_peaks = wealth_index.cummax()\nprevious_peaks[\"Small Caps\"].plot(title=\"Small Caps with max peaks\", grid=True, ax=ax[0], label=\"max peaks\", legend=True)\nprevious_peaks[\"Large Caps\"].plot(title=\"Large Caps with max peaks\", grid=True, ax=ax[1], label=\"max peaks\", legend=True)\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:16.228025Z","iopub.execute_input":"2024-05-14T10:51:16.228406Z","iopub.status.idle":"2024-05-14T10:51:17.242415Z","shell.execute_reply.started":"2024-05-14T10:51:16.228375Z","shell.execute_reply":"2024-05-14T10:51:17.241318Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The **drawdown** is simply the difference of the wealth index from the (last) max peak, that is:\n1. wealth_index - previous_peaks                    (*in absolute values*)\n2. (wealth_index - previous_peaks) / previous_peaks (*in percentage*)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:24.02436Z","iopub.execute_input":"2024-05-14T10:51:24.024777Z","iopub.status.idle":"2024-05-14T10:51:24.060203Z","shell.execute_reply.started":"2024-05-14T10:51:24.024744Z","shell.execute_reply":"2024-05-14T10:51:24.058692Z"}}},{"cell_type":"code","source":"f, ax = plt.subplots(3,2,figsize=(20,12))\n# Plot of the wealth indices\nwealth_index[\"Small Caps\"].plot(grid=True, title=\"Small Caps\", ax=ax[0,0]) \nwealth_index[\"Large Caps\"].plot(grid=True, title=\"Large Caps\", ax=ax[0,1]) \n\n(wealth_index - previous_peaks)[\"Small Caps\"].plot(grid=True, title=\"Small Caps - Max Peaks\", ax=ax[1,0], color='r')\n(wealth_index - previous_peaks)[\"Large Caps\"].plot(grid=True, title=\"Large Caps - Max Peaks\", ax=ax[1,1], color='r')\n\ndrawdown = (wealth_index - previous_peaks) / previous_peaks\n(drawdown[\"Small Caps\"]*100).plot(grid=True, title=\"Drawdown Small Caps\", ax=ax[2,0], color='r')\n(drawdown[\"Large Caps\"]*100).plot(grid=True, title=\"Drawdown Large Caps\", ax=ax[2,1], color='r')\nax[2,0].set_ylabel(\"%\")\nax[2,1].set_ylabel(\"%\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:36.253799Z","iopub.execute_input":"2024-05-14T10:51:36.254243Z","iopub.status.idle":"2024-05-14T10:51:39.143909Z","shell.execute_reply.started":"2024-05-14T10:51:36.25421Z","shell.execute_reply":"2024-05-14T10:51:39.142705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"'29 crisis: \")\nprint( \"{}%\" .format( drawdown.min().round(2)*100) )\nprint(\"Date max drawdown:\")\nprint( drawdown.idxmin() )","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:46.649132Z","iopub.execute_input":"2024-05-14T10:51:46.649582Z","iopub.status.idle":"2024-05-14T10:51:46.688108Z","shell.execute_reply.started":"2024-05-14T10:51:46.649547Z","shell.execute_reply":"2024-05-14T10:51:46.686921Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The other two large drawdowns occured during the **dot com** crisis a the beginning of the new century and due to the **Lehman Brothers** crisis:","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:51:52.168533Z","iopub.execute_input":"2024-05-14T10:51:52.168951Z","iopub.status.idle":"2024-05-14T10:51:52.205236Z","shell.execute_reply.started":"2024-05-14T10:51:52.168919Z","shell.execute_reply":"2024-05-14T10:51:52.20347Z"}}},{"cell_type":"code","source":"print(\"Dot Com crisis: \")\nprint( \"{}%\" .format( drawdown[\"1990\":\"2015\"].min().round(2)*100) )\nprint(\"Date max drawdown:\")\nprint( drawdown[\"1999\":\"2015\"].idxmin() )","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:52:01.210844Z","iopub.execute_input":"2024-05-14T10:52:01.211211Z","iopub.status.idle":"2024-05-14T10:52:01.252469Z","shell.execute_reply.started":"2024-05-14T10:52:01.211183Z","shell.execute_reply":"2024-05-14T10:52:01.25103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Lehman Brothers crisis: \")\nprint( \"{}%\" .format( drawdown[\"2005\":].min().round(2)*100) )\nprint(\"Date max drawdown:\")\nprint( drawdown[\"2005\":].idxmin() )","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:52:07.008066Z","iopub.execute_input":"2024-05-14T10:52:07.008506Z","iopub.status.idle":"2024-05-14T10:52:07.047153Z","shell.execute_reply.started":"2024-05-14T10:52:07.008459Z","shell.execute_reply":"2024-05-14T10:52:07.046002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 9. Gaussian density and distribution \nLet $X$ be a **Gaussian random variable** with mean $\\mu$ and variance $\\sigma^2$ (i.e., $X\\sim N(\\mu,\\sigma^2$)). \nHis **density function** is\n$$\nf(x) := \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left(\\frac{-(x-\\mu)^2}{2\\sigma^2}\\right),\n$$\nwhereas his **cumulative distribution function** is given by\n$$\nF_X(x) := \\mathbb{P}(X\\leq x) = \\int_{-\\infty}^x f(t)dt = \\Phi(x).\n$$\nIf $\\mu=0$, and $\\sigma^2=1$, we say $X$ is **standard**. \n\nThere holds the following property:\n$$\n\\Phi(x) = 1-\\Phi(-x).\n$$\nAlso, since $\\exp(-t^2/2)$ is symmetric (i.e., an even function), we have that if $X\\sim N(0,1)$, then \nthe distribution of the random variable $-X$ is also $N(0,1)$, i.e. \n$$\n\\mathbb{P}(-X\\leq x) \n= \\mathbb{P}(X\\geq -x)\n= 1-\\mathbb{P}(X\\leq -x)\n= 1-\\Phi(-x)\n= \\Phi(x)\n= \\mathbb{P}(X\\leq x),\n$$\nthat is, $F_{-X}(x) = F_X(x)$.","metadata":{}},{"cell_type":"markdown","source":"### Quantiles\n\nLet $X$ be a random variable and let $\\alpha\\in(0,1)$. \nThe **quantile of order $\\alpha$** of the distribution of $X$ is that number $\\phi_\\alpha\\in\\mathbb{R}$ \nsuch that $\\mathbb{P}(X\\leq \\phi_\\alpha) = \\alpha$.\n\nNow, let $X\\sim N(0,1)$ be a standard normal random variable and let $\\phi_\\alpha$ be the $\\alpha$-quantile. \nThere holds:\n$$\n\\Phi(-\\phi_\\alpha) \n= \\mathbb{P}(X\\leq - \\phi_\\alpha) \n= \\mathbb{P}(-X\\leq - \\phi_\\alpha) \n= \\mathbb{P}(X\\geq \\phi_\\alpha) \n= 1 - \\mathbb{P}(X\\leq \\phi_\\alpha) \n= 1 - \\Phi(\\phi_\\alpha) \n= 1 - \\alpha\n= \\mathbb{P}(X\\leq \\phi_{1-\\alpha})\n= \\Phi(\\phi_{1-\\alpha}), \n$$\nfrom which we get:\n$$\n-\\phi_\\alpha = \\phi_{1-\\alpha}.\n$$\nThis is an important identity of quantiles of normal standard distribution. \n\nMorevoer:\n$$\n\\mathbb{P}(|X|\\leq \\phi_{1-\\alpha/2})\n= \\mathbb{P}(-\\phi_{1-\\alpha/2} \\leq X \\leq \\phi_{1-\\alpha/2})\n= \\Phi(\\phi_{1-\\alpha/2}) - \\Phi(\\underbrace{ -\\phi_{1-\\alpha/2} }_{= \\phi_{\\alpha/2}})\n= (1-\\alpha/2) - (\\alpha/2)\n= 1-\\alpha.\n$$\n\nExample: **what is the 0.9-quantile**, i.e., the quantile of order 0.9, of the normal distribution?\nThat is, what is the number $\\phi_{0.9}$ such that $\\Phi(\\phi_{0.9}) = \\mathbb{P}(X \\leq \\phi_{0.9}) = 0.9$?\nWe are basically looking at \n$$\n\\phi_{0.9} = \\Phi^{-1}(0.9).\n$$\nWe can use the *norm.ppf()* from **scipy.stats** function which returns the quantiles of the Gaussian distribution. ","metadata":{}},{"cell_type":"code","source":"z = scipy.stats.norm.ppf(0.9, 0,1)\nprint('phi_0.9 = Phi^(-1)(0.9) = {:.4}' .format(z) )\n#\n# double check: compute Phi(0.9)\nprint('Double check: Phi({:.4})={:.4}' .format(z,scipy.stats.norm.cdf(z,0,1)) ) ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:52:45.3092Z","iopub.execute_input":"2024-05-14T10:52:45.309683Z","iopub.status.idle":"2024-05-14T10:52:45.345954Z","shell.execute_reply.started":"2024-05-14T10:52:45.309647Z","shell.execute_reply":"2024-05-14T10:52:45.344731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Skewness and Kurtosis \n\nThe **skewness** is a measure of the asymmetry of the probability distribution of a real-valued random variable \nabout its mean. It **can be positive or negative, or undefined**.\nFor a unimodal distribution, **negative skewness commonly indicates that the tail is on the left side of the distribution**, and positive \nskewness indicates that the tail is on the right. \n\nThe formal definition involves the third centered moment:\n$$\nS(X) := \\frac{\\mathbb{E}(X - \\mathbb{E}(X)^3)}{\\sigma^3},\n$$\nwhere $\\sigma$ is the standard deviation of $X$.\n\nThe **kurtosis** is a measure of the **tailedness** of the probability distribution of a real-valued random \nvariable, that is, it is a descriptor of the shape of a probability distribution. \nThe formal definition involves the fourth centered moment:\n$$\nK(X) := \\frac{\\mathbb{E}(X - \\mathbb{E}(X)^4)}{\\sigma^4},\n$$\nwhere $\\sigma$ is the standard deviation of $X$. Basically, Kurtosis is **the average of the standardized data raised to the fourth power**. Any standardized values that are less than 1 (i.e., data within one standard deviation of the mean, which is where we observe the \"peak\"), contribute virtually nothing to kurtosis, since raising a number that is less than 1 to the fourth power makes it closer to zero. The only data values (observed or observable) that contribute to kurtosis in any meaningful way are those outside the region of the peak; i.e., the outliers. Therefore, **kurtosis measures outliers only**, saying nothing about the peak.\n\n\n**If $X$ is a Gaussian random variable we have $S(X) = 0$ and $K(X)=3$.**\n\nIn particular, the **Excess Kurtosis** is defined as Kurtosis minus 3, in order to provide a comparison to the normal distribution.","metadata":{}},{"cell_type":"code","source":"def skewness(s):\n    '''\n    Computes the Skewness of the input Series or Dataframe.\n    There is also the function scipy.stats.skew().\n    '''\n    return ( ((s - s.mean()) / s.std(ddof=0))**3 ).mean()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:06.347346Z","iopub.execute_input":"2024-05-14T10:53:06.347783Z","iopub.status.idle":"2024-05-14T10:53:06.380823Z","shell.execute_reply.started":"2024-05-14T10:53:06.34775Z","shell.execute_reply":"2024-05-14T10:53:06.379544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def kurtosis(s):\n    '''\n    Computes the Kurtosis of the input Series or Dataframe.\n    There is also the function scipy.stats.kurtosis() which, however, \n    computes the \"Excess Kurtosis\", i.e., Kurtosis minus 3\n    '''\n    return ( ((s - s.mean()) / s.std(ddof=0))**4 ).mean()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:11.188756Z","iopub.execute_input":"2024-05-14T10:53:11.189162Z","iopub.status.idle":"2024-05-14T10:53:11.226912Z","shell.execute_reply.started":"2024-05-14T10:53:11.189132Z","shell.execute_reply":"2024-05-14T10:53:11.225605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_ffme_returns():\n    '''\n    Returns the French-Fama dataset for the returns of the bottom and top \n    deciles (Low 10 (Small Caps) and Hi 10 (Large Caps)) of US stocks\n    '''\n    filepath = \"/kaggle/input/edhec-investment-management-datasets/Portfolios_Formed_on_ME_monthly_EW.csv\"\n    rets = pd.read_csv(filepath, index_col=0, parse_dates=True, na_values=-99.99)\n    rets = rets[[\"Lo 10\", \"Hi 10\"]] / 100\n    rets.index = pd.to_datetime(rets.index, format=\"%Y%m\").to_period(\"M\") #.to_period(\"M\") forces the index to be monthly period...\n    return rets ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:19.578679Z","iopub.execute_input":"2024-05-14T10:53:19.579058Z","iopub.status.idle":"2024-05-14T10:53:19.613489Z","shell.execute_reply.started":"2024-05-14T10:53:19.57903Z","shell.execute_reply":"2024-05-14T10:53:19.612233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Normal distributed random variable with mean 0 and std 2\nA = pd.DataFrame( {\"A\" : np.random.normal(0, 2, size=800)} )\n\n# Returns from FF dataset, that we know that are NOT normally distributed\nB = get_ffme_returns()\nB = B[\"Hi 10\"]\n\nf = plt.figure(figsize=(18,3))\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\nax1.hist( A.values ,bins=60, density=True )\nax1.set_title('Normal r.v. - Mean {}; Std {}' .format(A.mean().values.round(3),A.std().values.round(3)))\nax1.grid()\n\nax2.hist( B.values ,bins=60, density=True )\nax2.set_title('Not Normal r.v. - Mean {}; Std {}' .format(np.round(B.mean(),3), np.round(B.std(),3) ))\nax2.grid()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:25.418383Z","iopub.execute_input":"2024-05-14T10:53:25.418809Z","iopub.status.idle":"2024-05-14T10:53:26.469207Z","shell.execute_reply.started":"2024-05-14T10:53:25.418775Z","shell.execute_reply":"2024-05-14T10:53:26.468103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the plot of the distributions, we can see that for the not normal random variables, we have a kind of symmetry, **but tails are fatters**. \nWe then expect **the skewness to be close to zero** whereas the **kurtosis to be higher than $3$**.","metadata":{}},{"cell_type":"code","source":"# Skewness of A and B\nS_A = ( (A - A.mean())**3 / A.std(ddof=0)**3 ).mean() \nK_A = ( (A - A.mean())**4 / A.std(ddof=0)**4 ).mean() \n\nS_B = ( (B - B.mean())**3 / B.std(ddof=0)**3 ).mean()\nK_B = ( (B - B.mean())**4 / B.std(ddof=0)**4 ).mean()\n\nf = plt.figure(figsize=(18,8))\nax1 = f.add_subplot(221)\nax2 = f.add_subplot(222)\nax3 = f.add_subplot(223)\nax4 = f.add_subplot(224)\n\nax1.plot( ((A - A.mean())**3 / A.std(ddof=0)**3).values  )\nax1.set_title('Normal RV: plot of \"skewness before the mean\" - S={}' .format(S_A.values) )\nax1.axhline(y=S_A[0], linestyle=\":\", color=\"red\")\nax1.grid()\n\nax2.plot( ((A - A.mean())**4 / A.std(ddof=0)**4).values  )\nax2.set_title('Normal RV: plot of \"kurtosis before the mean\" - K={}' .format(K_A.values) )\nax2.axhline(y=K_A[0], linestyle=\":\", color=\"red\")\nax2.grid()\n\nax3.plot( ((B - B.mean())**3 / B.std(ddof=0)**3).values  )\nax3.set_title('Not Normal RV: plot of \"skewness before the mean\" - S={}' .format(np.round(S_B,3)) )\nax3.axhline(y=S_B, linestyle=\":\", color=\"red\")\nax3.grid()\n\nax4.plot( ((B - B.mean())**4 / B.std(ddof=0)**4).values  )\nax4.set_title('Not Normal RV: plot of \"kurtosis before the mean\" - S={}' .format(np.round(K_B,3)) )\nax4.axhline(y=K_B, linestyle=\":\", color=\"red\")\nax4.grid()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:42.528241Z","iopub.execute_input":"2024-05-14T10:53:42.5288Z","iopub.status.idle":"2024-05-14T10:53:44.112932Z","shell.execute_reply.started":"2024-05-14T10:53:42.528754Z","shell.execute_reply":"2024-05-14T10:53:44.111808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_hfi_returns():\n    '''\n    Returns the EDHEC Hedge Funds Index returns\n    '''\n    filepath = \"/kaggle/input/edhec-investment-management-datasets/edhec-hedgefundindices.csv\"\n    hfi = pd.read_csv(filepath, index_col=0, parse_dates=True, na_values=-99.99) / 100.0\n    # the index is already of type datetime\n    return hfi ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:49.078934Z","iopub.execute_input":"2024-05-14T10:53:49.07932Z","iopub.status.idle":"2024-05-14T10:53:49.112209Z","shell.execute_reply.started":"2024-05-14T10:53:49.079288Z","shell.execute_reply":"2024-05-14T10:53:49.110986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"hfi = get_hfi_returns()\nhfi.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:53:53.767367Z","iopub.execute_input":"2024-05-14T10:53:53.767797Z","iopub.status.idle":"2024-05-14T10:53:53.830201Z","shell.execute_reply.started":"2024-05-14T10:53:53.767763Z","shell.execute_reply":"2024-05-14T10:53:53.829191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def is_normal(s, level=0.01):\n    '''\n    Jarque-Bera test to see if a series (of returns) is normally distributed.\n    Returns True or False according to whether the p-value is larger \n    than the default level=0.01.\n    '''\n    statistic, pvalue = scipy.stats.jarque_bera( s )\n    return pvalue > level","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:54:07.968357Z","iopub.execute_input":"2024-05-14T10:54:07.968811Z","iopub.status.idle":"2024-05-14T10:54:08.002283Z","shell.execute_reply.started":"2024-05-14T10:54:07.968768Z","shell.execute_reply":"2024-05-14T10:54:08.001168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"hfi_skew_kurt = pd.DataFrame(columns=[\"Skewness\",\"Kurtosis\"])\n\n# Compute the skewness and kurtosis of the returns in hfi using the pandas aggregate method, \n# which takes in input a function and applies the function to every column of the given dataframe\n\n# compute the skewness\nhfi_skew_kurt[\"Skewness\"] = hfi.aggregate(skewness)\n\n# compute the kurtosis\nhfi_skew_kurt[\"Kurtosis\"] = hfi.aggregate(kurtosis )\n\nhfi_skew_kurt","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:54:14.589696Z","iopub.execute_input":"2024-05-14T10:54:14.590083Z","iopub.status.idle":"2024-05-14T10:54:14.655901Z","shell.execute_reply.started":"2024-05-14T10:54:14.590053Z","shell.execute_reply":"2024-05-14T10:54:14.654684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Which index has, more or less, a Gaussian distribution? It seems that **CTA Global** has a skewnesss close to zero and kurtosis close to 3. \n\nWe can use a test, called **Jarque-Bera test** from **scipy** which is implemented in our erk toolkit.","metadata":{}},{"cell_type":"code","source":"# For example:\nprint(scipy.stats.jarque_bera(hfi[\"CTA Global\"]))\nprint(is_normal( hfi[\"CTA Global\"]))","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:54:51.130168Z","iopub.execute_input":"2024-05-14T10:54:51.131189Z","iopub.status.idle":"2024-05-14T10:54:51.168212Z","shell.execute_reply.started":"2024-05-14T10:54:51.131152Z","shell.execute_reply":"2024-05-14T10:54:51.167117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#while:\nprint(scipy.stats.jarque_bera(hfi[\"Convertible Arbitrage\"]))\nprint(is_normal(hfi[\"Convertible Arbitrage\"]))","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:54:57.929365Z","iopub.execute_input":"2024-05-14T10:54:57.92988Z","iopub.status.idle":"2024-05-14T10:54:57.967204Z","shell.execute_reply.started":"2024-05-14T10:54:57.929846Z","shell.execute_reply":"2024-05-14T10:54:57.96601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The second value is the so-called **p value** which is the one to look at to see if the returs are normally distributed. \nBy default, if this value is larger than $0.01$, then the answer is true, or if you want, the series of returns passes the test.","metadata":{}},{"cell_type":"code","source":"hfi.aggregate(is_normal)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:55:12.322553Z","iopub.execute_input":"2024-05-14T10:55:12.322995Z","iopub.status.idle":"2024-05-14T10:55:12.374979Z","shell.execute_reply.started":"2024-05-14T10:55:12.322961Z","shell.execute_reply":"2024-05-14T10:55:12.37384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We see that only the CTA GLobal index of returns passes the test, i.e., it seems to be normally distributed.","metadata":{}},{"cell_type":"markdown","source":"## Downside risk measures\n\n### Semi-volatility (or semi-deviation)\nRecall that the volatility of an asset is simply the standard deviation. \nThe **semivolatility** is simply the volatility of the portion of the return dataset which are negative.\nIn fact, when returns are positive, and they largely deviate from the mean, it is not really a problem. Investors are happy if this happens and they do not concern about how much volatile positive returns are. \n\n**We rather concern about the volatility of negative returns**. Therefore, the definition is simply given by:\n$$\n\\sigma_{semi} := \\sqrt{ \\frac{1}{N_{semi}} \\sum_{R_t < 0} (R_t - \\mu_{semi})^2 },\n$$\nwhere $\\mu_{semi}$ is the sample mean of the negative returns and $N_{semi}$ is the number of these negative returns. \n\nNote that the definition can be applied to the returns which are **below the mean**, not necessarily at the negative ones.","metadata":{}},{"cell_type":"code","source":"def semivolatility(s):\n    '''\n    Returns the semivolatility of a series, i.e., the volatility of\n    negative returns\n    '''\n    return s[s<0].std(ddof=0) ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:56:10.488557Z","iopub.execute_input":"2024-05-14T10:56:10.488998Z","iopub.status.idle":"2024-05-14T10:56:10.524424Z","shell.execute_reply.started":"2024-05-14T10:56:10.488964Z","shell.execute_reply":"2024-05-14T10:56:10.523015Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"semivolatility(hfi)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:56:15.327176Z","iopub.execute_input":"2024-05-14T10:56:15.327577Z","iopub.status.idle":"2024-05-14T10:56:15.366283Z","shell.execute_reply.started":"2024-05-14T10:56:15.327543Z","shell.execute_reply":"2024-05-14T10:56:15.365027Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Value at Risk (VaR)\n\nIt represents the **maximum expected loss** over a certain time period. \nFirst of all, we specify a certain confidence **level**, in $(0,1)$, although it is typically expressed in percentage. \n\nFor example consider a $99\\%$ level (i.e., $\\alpha=0.99$). When we say **$99\\%$ monthly VaR** it means that we are looking at the **worst possibile outcome over a month after excluding the $1\\%$ of extreme worst losses**. In other words, what is **the maximum loss that you can take with $99\\%$ of probability  over one month**.\n\n**Example:** we are given the following set of monthly returns:\n$$\nR = (-4\\%, +5\\%, +2\\%, -7\\%, +1\\%, +0.5\\%, -2\\%, -1\\%, -2\\%, +5\\%).\n$$\n**What is the $90\\%$ monthly VaR?** \n\nSo what we have to do is 1) to exclude the $10\\%$ worst returns and 2) looking at the worst return of the remaining ones. \nSince we have $10$ returns, the $10\\%$ worse return is just $1$ return, i.e., $-7\\%$, and so the worse return of the remaing ones is $-4\\%$. \nThen $\\text{VaR} = 4\\%$.\n\n**NOTE THAT although the value we find was $-4\\%$ we say that $\\text{VaR} = 4\\%$, i.e., the VaR is tipically a positive number.**\n\n\nMathematically, the VaR is defined as follow. Given the confidence level $\\alpha\\in(0,1)$,\n$$\n\\text{VaR}_{\\alpha}\n:= - \\text{inf}\\{x\\in\\mathbb{R} \\;:\\; \\mathbb{P}(R \\leq x) \\geq 1-\\alpha \\} \n= - \\text{inf}\\left\\{x\\in\\mathbb{R} \\;:\\;  \\mathbb{P}(R \\geq x) \\leq \\alpha\\right\\},  \n$$\nthat is, it is nothing but that the **$(1-\\alpha)$-quantile** since we effectively want to find the number $\\text{VaR}_\\alpha$ such that \n$$\n\\mathbb{P}( R \\leq -\\text{VaR}_\\alpha) = 1-\\alpha,\n$$\nwhich says that there is a $(1-\\alpha)\\%$ probability of having a (negative) return greater or equal to $-\\text{VaR}_\\alpha$.\n\nIn previous example, the $90\\%$ monthly VaR equal to $4\\%$, means that \n$$\n0.04 = \\text{VaR}_{0.9} = -\\text{inf}\\{x\\in\\mathbb{R} \\;:\\; \\mathbb{P}(R \\leq x) \\geq 0.1 \\},\n$$\ni.e., there is a $10\\%$ probability of loosing more than $4\\%$ of our money invested (having monthly returns less than -$4\\%$). ","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:56:21.644117Z","iopub.execute_input":"2024-05-14T10:56:21.645081Z","iopub.status.idle":"2024-05-14T10:56:21.692481Z","shell.execute_reply.started":"2024-05-14T10:56:21.645044Z","shell.execute_reply":"2024-05-14T10:56:21.690991Z"}}},{"cell_type":"markdown","source":"### Conditional VaR (or Beyond VaR)\n\nThis is defined as the expected loss **beyond** VaR, or more formally, we look at **the average of the distribution beyond the VaR**, that is of those returns which are less than the VaR. Mathematically, this is going to be:\n$$\n\\text{CVaR} := - \\mathbb{E}( R | R<-\\text{VaR}) = - \\frac{\\int_{-\\infty}^{-\\text{VaR}} t f_R(t)dt }{F_R(-\\text{Var})},\n$$\nwhere $f_R$ is the density function of our returns and $F_R$ is the cumulative distribution function. \n\n**Example:** we are given the following set of monthly returns:\n$$\nR = (-4\\%, +5\\%, +2\\%, -7\\%, +1\\%, +0.5\\%, -2\\%, -1\\%, -2\\%, +5\\%).\n$$\n**What is the $80\\%$ monthly CVaR?** \n\nSo what we have to do is 1) excluding the $20\\%$ worse returns and 2) looking at the worse return of the remaining ones and in this way we find $\\text{VaR}_{0.8}$. 3) Then, we take the average of the returns which are less than $\\text{VaR}_{0.8}$. \n\nSince we have $10$ returns, the $20\\%$ worse return are $2$ returns, $-7\\%$ and $-4\\%$. The worse return among the remaining ones is $-2\\%$. That is, $\\text{VaR}_{0.8} = 2\\%$. Now, we see that the returns less than $-\\text{VaR}_{0.8}=-2\\%$ are only $-7\\%$ and $-4\\%$. \nTheir average is $\\text{CVAR}_{0.8} = - (-7\\%-4\\%)/2 = 5.5\\%$.","metadata":{}},{"cell_type":"markdown","source":"### Methods for estimating VaR and CVaR\nWe have the following methods:\n\n#### Historical method (non parametric)\nThis is the most intuitive one which works by simply applying the definition of VaR as $(1-\\alpha)$-quantile of the distribution of the returns of the asset under consideration. For example, consider the hedge fund indices returns:","metadata":{}},{"cell_type":"code","source":"# get the CTA global returns\nhfi = get_hfi_returns()\n\n# ...and plot their distribution\nax = hfi[\"CTA Global\"].plot.hist(figsize=(8,4), bins=60, density=True)\nax.set_title(\"CTA Global returns distribution\")\nax.grid()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:57:07.314306Z","iopub.execute_input":"2024-05-14T10:57:07.314747Z","iopub.status.idle":"2024-05-14T10:57:07.918868Z","shell.execute_reply.started":"2024-05-14T10:57:07.314705Z","shell.execute_reply":"2024-05-14T10:57:07.917729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We want to get the $90\\%$, $95\\%$, and $99\\%$ monthly VaR. \nThat is, we have levels $1-\\alpha=0.01, 0.05, 0.01$. We can use the *percentile* method.","metadata":{}},{"cell_type":"code","source":"alpha = np.array([0.90, 0.95, 0.99])\nlevel = 1 - alpha\n\n# In the percentile method, we multiply by 100 because it wants an input between 0 and 100\nVaRs = -np.percentile(hfi[\"CTA Global\"], level*100)\n\nprint(\"90% Var: {:.2f}%\".format(VaRs[0] * 100))\nprint(\"95% Var: {:.2f}%\".format(VaRs[1] * 100))\nprint(\"99% Var: {:.2f}%\".format(VaRs[2] * 100))","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:57:24.114098Z","iopub.execute_input":"2024-05-14T10:57:24.11448Z","iopub.status.idle":"2024-05-14T10:57:24.153516Z","shell.execute_reply.started":"2024-05-14T10:57:24.11445Z","shell.execute_reply":"2024-05-14T10:57:24.152333Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It means that there is a $10\\%$, $5\\%$, $1\\%$ probability that any given month we can loose at least about $2.4\\%$, $3\\%$, and $5\\%$, respectively. \n\nOr, alternatively, that **there is a $90\\%$, $95\\%$, $99\\%$ probability that for any given month we loose less than $2.4\\%$, $3\\%$, and $5\\%$, respectively.**","metadata":{}},{"cell_type":"markdown","source":"> It is worth saying that this way of computing VaR is, however, sensitive to the timescale of our returns, \n> because a VaR computed using monthly returns will be different from a VaR computed using weekly returns$\\dots$","metadata":{}},{"cell_type":"markdown","source":"#### Parametric method (Gaussian)\nHere, we **assume that the returns are normally distributed**, which is, however, **often incorrect**. \n\nLet $\\mu$ and $\\sigma$ be the mean and the volatility of the returns $R$ and suppose that $R\\sim N(\\mu,\\sigma)$. \nVia standardization, we can express $R$ as $R = \\mu + X \\sigma$, where $X\\sim N(0,1)$. \nThis way, **for computing $\\text{VaR}_\\alpha$, i.e. the $(1-\\alpha)$-quantile of the distribution of $R$, we can compute the $(1-\\alpha)$-quantile of the stardard normal distribution**. \n\nBy definition of $\\text{VaR}_\\alpha$ and quantiles, we want to find the number $z_\\alpha$ such that \n$$\n\\mathbb{P}(R \\leq z_\\alpha) = 1-\\alpha.\n$$\nHence we would have:\n$$\n1-\\alpha = \\mathbb{P}(R \\leq z_\\alpha) = \\mathbb{P}(\\mu+ X\\sigma \\leq z_\\alpha) \n= \\mathbb{P}\\left(X \\leq \\frac{z_\\alpha-\\mu}{\\sigma}\\right) \n= \\Phi\\left( \\frac{z_\\alpha-\\mu}{\\sigma} \\right)\n\\qquad\\Longrightarrow\\qquad\nz_\\alpha = \\mu + \\Phi^{-1}(1-\\alpha)\\sigma \n$$\nHence, we have found:\n$$\n\\text{VaR}_\\alpha = -\\left(\\;\\mu + \\Phi^{-1}(1-\\alpha) \\sigma\\;\\right),\n$$\nwhere $\\Phi^{-1}(1-\\alpha)$ is the $(1-\\alpha)$-quantile of the Gaussian distribution that we can find using the *norm.ppf*, \nand $\\mu$ and $\\sigma$ are the mean and volatility of our returns series, respectively \n(here, recall that we put a minus since we want the VaR to be a positive number).","metadata":{}},{"cell_type":"code","source":"def var_gaussian(s, level=0.05, cf=False):\n    '''\n    Returns the (1-level)% VaR using the parametric Gaussian method. \n    By default it computes the 95% VaR, i.e., alpha=0.95 which gives level 1-alpha=0.05.\n    The variable \"cf\" stands for Cornish-Fisher. If True, the method computes the \n    modified VaR using the Cornish-Fisher expansion of quantiles.\n    The method takes in input either a DataFrame or a Series and, in the former \n    case, it computes the VaR for every column (Series).\n    '''\n    # alpha-quantile of Gaussian distribution \n    za = scipy.stats.norm.ppf(level,0,1) \n    if cf:\n        S = skewness(s)\n        K = kurtosis(s)\n        za = za + (za**2 - 1)*S/6 + (za**3 - 3*za)*(K-3)/24 - (2*za**3 - 5*za)*(S**2)/36    \n    return -(s.mean() + za * s.std(ddof=0))","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:58:06.632553Z","iopub.execute_input":"2024-05-14T10:58:06.633417Z","iopub.status.idle":"2024-05-14T10:58:06.668657Z","shell.execute_reply.started":"2024-05-14T10:58:06.633382Z","shell.execute_reply":"2024-05-14T10:58:06.667335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compute the 95% monthly Gaussian VaR of the hedge fund indices \nalpha = 0.95\nvar_gaussian( hfi, level=1-alpha)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:58:17.708996Z","iopub.execute_input":"2024-05-14T10:58:17.70942Z","iopub.status.idle":"2024-05-14T10:58:17.747198Z","shell.execute_reply.started":"2024-05-14T10:58:17.709385Z","shell.execute_reply":"2024-05-14T10:58:17.746107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Cornish-Fisher method (semi parametric)\n\nThis is a modification of the parametric Gaussian method. The method uses the **Cornish-Fisher expansion (1937) of quantiles** which basically relates the $\\alpha$-quantilies of **non Gaussian** distribution with the $\\alpha$-quantiles of the Gaussian distribution \nin the following way:\n$$\n\\tilde{z}_\\alpha \n= z_\\alpha + \\frac{1}{6}(z_\\alpha^2 - 1)S \n+ \\frac{1}{24}(z_\\alpha^3 - 3 z_\\alpha)(K-3) \n- \\frac{1}{36}(2z_\\alpha^3 - 5 z_\\alpha)S^2\n$$\nwhere $\\tilde{z}_\\alpha$, $S$, and $K$ denote the $\\alpha$-quantile, the skewness, and the kurtosis of the the non Gaussian distribution (say, our returns series), respectively, and $z_\\alpha$ is the $\\alpha$-quantile of the Gaussian distribution. \nNotice that if the distribution of our series was, effectively, Gaussian, then $S=0$ and $K=3$ and so $\\tilde{z}_\\alpha$ would be equal to $z_\\alpha$.\n\nTherefore, with this method, we have:\n$$\n\\text{VaR}_\\alpha = -\\left(\\;\\mu + \\tilde{z}_\\alpha  \\sigma\\;\\right).\n$$","metadata":{}},{"cell_type":"code","source":"# Compute the 95% monthly Gaussian VaR of the hedge fund indices using the Cornish-Fisher method\nvar_gaussian(hfi, cf=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:59:25.838753Z","iopub.execute_input":"2024-05-14T10:59:25.839136Z","iopub.status.idle":"2024-05-14T10:59:25.883618Z","shell.execute_reply.started":"2024-05-14T10:59:25.839107Z","shell.execute_reply":"2024-05-14T10:59:25.882557Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Finally, the **conditional VaR** is computed using the historical method: look at the *cvar_historic* from the *erk* toolkit.","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:59:32.438664Z","iopub.execute_input":"2024-05-14T10:59:32.439071Z","iopub.status.idle":"2024-05-14T10:59:32.473931Z","shell.execute_reply.started":"2024-05-14T10:59:32.439042Z","shell.execute_reply":"2024-05-14T10:59:32.472304Z"}}},{"cell_type":"code","source":"def var_historic(s, level=0.05):\n    '''\n    Returns the (1-level)% VaR using historical method. \n    By default it computes the 95% VaR, i.e., alpha=0.95 which gives level 1-alpha=0.05.\n    The method takes in input either a DataFrame or a Series and, in the former \n    case, it computes the VaR for every column (Series) by using pd.aggregate\n    '''\n    if isinstance(s, pd.DataFrame):\n        return s.aggregate( var_historic, level=level )\n    elif isinstance(s, pd.Series):\n        return - np.percentile(s, level*100)\n    else:\n        raise TypeError(\"Expected pd.DataFrame or pd.Series\")","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:59:39.777319Z","iopub.execute_input":"2024-05-14T10:59:39.777721Z","iopub.status.idle":"2024-05-14T10:59:39.811958Z","shell.execute_reply.started":"2024-05-14T10:59:39.777687Z","shell.execute_reply":"2024-05-14T10:59:39.810738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def cvar_historic(s, level=0.05):\n    '''\n    Computes the (1-level)% Conditional VaR (based on historical method).\n    By default it computes the 95% CVaR, i.e., alpha=0.95 which gives level 1-alpha=0.05.\n    The method takes in input either a DataFrame or a Series and, in the former \n    case, it computes the VaR for every column (Series).\n    '''\n    if isinstance(s, pd.DataFrame):\n        return s.aggregate( cvar_historic, level=level )\n    elif isinstance(s, pd.Series):\n        # find the returns which are less than (the historic) VaR\n        mask = s < -var_historic(s, level=level)\n        # and of them, take the mean \n        return -s[mask].mean()\n    else:\n        raise TypeError(\"Expected pd.DataFrame or pd.Series\")","metadata":{"execution":{"iopub.status.busy":"2024-05-14T10:59:44.223021Z","iopub.execute_input":"2024-05-14T10:59:44.22339Z","iopub.status.idle":"2024-05-14T10:59:44.258116Z","shell.execute_reply.started":"2024-05-14T10:59:44.223362Z","shell.execute_reply":"2024-05-14T10:59:44.256927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Compare VaRs","metadata":{}},{"cell_type":"code","source":"comparevars = pd.concat([var_historic(hfi), var_gaussian(hfi), var_gaussian(hfi,cf=True), cvar_historic(hfi)], axis=1)\ncomparevars.columns = [\"Historical\",\"Gaussian\",\"Cornish-Fisher\",\"Conditional VaR\"]\n(comparevars * 100).plot.bar(figsize=(13,5), grid=True, title=\"Comparison of 95% monthly VaRs for Hedge Fund indices\")\nplt.ylabel(\"%\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-14T11:00:02.3737Z","iopub.execute_input":"2024-05-14T11:00:02.374126Z","iopub.status.idle":"2024-05-14T11:00:03.019549Z","shell.execute_reply.started":"2024-05-14T11:00:02.374092Z","shell.execute_reply":"2024-05-14T11:00:03.01838Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🔸 Conclusion:\n\nThank you for joining me on this journey through the realms of Value at Risk (VaR), Conditional Value at Risk (CVaR), and the Sharpe Ratio in the context of portfolio management and investment analysis. Throughout this Kaggle notebook, we've explored fundamental concepts, implemented Python code to calculate these metrics, and gained valuable insights into risk management and performance evaluation.\n\nAs we conclude this tutorial, I hope you've found the content informative and the examples illustrative. Understanding VaR, CVaR, and the Sharpe Ratio equips us with powerful tools to make informed decisions in the dynamic world of finance.\n\nYour engagement, feedback, and support are greatly appreciated. If you've found value in this notebook and enjoyed exploring these concepts, please consider upvoting and sharing it with your peers. Your support encourages me to continue creating educational content and sharing knowledge within the Kaggle community.\n\nRemember, learning is a journey, and the quest for knowledge never ends. Stay curious, keep exploring, and may your investment endeavors be prosperous and fulfilling. Thank you once again for your time and attention.\n\n**Happy investing, and see you in the next tutorial!**\n","metadata":{}},{"cell_type":"markdown","source":"<HTML>\n<BODY><center>\n  <IMG SRC=\"https://media3.giphy.com/media/BPJmthQ3YRwD6QqcVD/giphy.gif?cid=ecf05e47rsmou6giss4s3n1u8oajna2nbe22nd82wtlbr36r&ep=v1_gifs_search&rid=giphy.gif&ct=g\">\n      </center>\n    <h2 style=\"color: #00FFFF;\"><center>IF YOU ENJOY PLEASE UPVOTE AND GIVE ME A FEEDBACK  🥰.</center></h2>\n\n</BODY>\n</HTML>","metadata":{}}]}